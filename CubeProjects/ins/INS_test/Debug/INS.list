
INS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080095a4  080095a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009678  08009678  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009678  08009678  00019678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009680  08009680  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009680  08009680  00019680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009684  08009684  00019684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001d50  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb0  20001eb0  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017938  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000350c  00000000  00000000  00037ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0003afd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003c290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022502  00000000  00000000  0003d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185a8  00000000  00000000  0005f90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0768  00000000  00000000  00077eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013861a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005200  00000000  00000000  0013866c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800958c 	.word	0x0800958c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800958c 	.word	0x0800958c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8000598:	f7ff fff4 	bl	8000584 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2120      	movs	r1, #32
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <MPU9250_Activate+0x18>)
 80005a2:	f001 f947 	bl	8001834 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40020800 	.word	0x40020800

080005b0 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2120      	movs	r1, #32
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <MPU9250_Deactivate+0x14>)
 80005ba:	f001 f93b 	bl	8001834 <HAL_GPIO_WritePin>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020800 	.word	0x40020800

080005c8 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(HSPI,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <SPIx_WriteRead+0x38>)
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	f107 020f 	add.w	r2, r7, #15
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	f003 fc6c 	bl	8003ec4 <HAL_SPI_TransmitReceive>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SPIx_WriteRead+0x2e>
	{
		return -1;
 80005f2:	23ff      	movs	r3, #255	; 0xff
 80005f4:	e000      	b.n	80005f8 <SPIx_WriteRead+0x30>
	}
	else
	{
	}
	return receivedbyte;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000017c 	.word	0x2000017c

08000604 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8000614:	f7ff ffbe 	bl	8000594 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffd4 	bl	80005c8 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8000620:	e00a      	b.n	8000638 <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffce 	bl	80005c8 <SPIx_WriteRead>
		NumByteToWrite--;
 800062c:	883b      	ldrh	r3, [r7, #0]
 800062e:	3b01      	subs	r3, #1
 8000630:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8000638:	883b      	ldrh	r3, [r7, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f1      	bne.n	8000622 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 800063e:	f7ff ffb7 	bl	80005b0 <MPU9250_Deactivate>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
 8000658:	4613      	mov	r3, r2
 800065a:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 800065c:	f7ff ff9a 	bl	8000594 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	4313      	orrs	r3, r2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(HSPI, &data, 1, HAL_MAX_DELAY);
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MPU_SPI_Read+0x4c>)
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	f107 010f 	add.w	r1, r7, #15
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2201      	movs	r2, #1
 8000678:	f003 f9d7 	bl	8003a2a <HAL_SPI_Transmit>
	HAL_SPI_Receive(HSPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MPU_SPI_Read+0x4c>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	883a      	ldrh	r2, [r7, #0]
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f003 fb0b 	bl	8003ca2 <HAL_SPI_Receive>
	MPU9250_Deactivate();
 800068c:	f7ff ff90 	bl	80005b0 <MPU9250_Deactivate>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000017c 	.word	0x2000017c

0800069c <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 80006ac:	79f9      	ldrb	r1, [r7, #7]
 80006ae:	1dbb      	adds	r3, r7, #6
 80006b0:	2201      	movs	r2, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffa6 	bl	8000604 <MPU_SPI_Write>
	HAL_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fde9 	bl	8001290 <HAL_Delay>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4603      	mov	r3, r0
 80006ce:	603a      	str	r2, [r7, #0]
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	460b      	mov	r3, r1
 80006d4:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4619      	mov	r1, r3
 80006de:	6838      	ldr	r0, [r7, #0]
 80006e0:	f7ff ffb4 	bl	800064c <MPU_SPI_Read>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80006fc:	2325      	movs	r3, #37	; 0x25
 80006fe:	220c      	movs	r2, #12
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffca 	bl	800069c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8000708:	2226      	movs	r2, #38	; 0x26
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	4610      	mov	r0, r2
 8000710:	f7ff ffc4 	bl	800069c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8000714:	2263      	movs	r2, #99	; 0x63
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	4619      	mov	r1, r3
 800071a:	4610      	mov	r0, r2
 800071c:	f7ff ffbe 	bl	800069c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8000720:	2227      	movs	r2, #39	; 0x27
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	4610      	mov	r0, r2
 800072e:	f7ff ffb5 	bl	800069c <writeRegister>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	4603      	mov	r3, r0
 8000742:	603a      	str	r2, [r7, #0]
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	460b      	mov	r3, r1
 8000748:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 800074a:	2025      	movs	r0, #37	; 0x25
 800074c:	220c      	movs	r2, #12
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	4313      	orrs	r3, r2
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	f7ff ffa1 	bl	800069c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800075a:	2226      	movs	r2, #38	; 0x26
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4619      	mov	r1, r3
 8000760:	4610      	mov	r0, r2
 8000762:	f7ff ff9b 	bl	800069c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8000766:	2027      	movs	r0, #39	; 0x27
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	4313      	orrs	r3, r2
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4619      	mov	r1, r3
 8000772:	f7ff ff93 	bl	800069c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fd8a 	bl	8001290 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800077c:	2049      	movs	r0, #73	; 0x49
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	f7ff ff9f 	bl	80006c6 <readRegisters>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8000794:	2375      	movs	r3, #117	; 0x75
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <whoAmI+0x18>)
 8000798:	2101      	movs	r1, #1
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff93 	bl	80006c6 <readRegisters>

	// return the register value
	return _buffer[0];
 80007a0:	4b01      	ldr	r3, [pc, #4]	; (80007a8 <whoAmI+0x18>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000180 	.word	0x20000180

080007ac <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 80007b0:	2300      	movs	r3, #0
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <whoAmIAK8963+0x18>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ffbf 	bl	800073a <readAK8963Registers>
	// return the register value
	return _buffer[0];
 80007bc:	4b01      	ldr	r3, [pc, #4]	; (80007c4 <whoAmIAK8963+0x18>)
 80007be:	781b      	ldrb	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000180 	.word	0x20000180

080007c8 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init(SPI_HandleTypeDef* hspi)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	HSPI = hspi;
 80007d0:	4a56      	ldr	r2, [pc, #344]	; (800092c <MPU9250_Init+0x164>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80007d6:	236b      	movs	r3, #107	; 0x6b
 80007d8:	2201      	movs	r2, #1
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80007e2:	236a      	movs	r3, #106	; 0x6a
 80007e4:	2220      	movs	r2, #32
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff57 	bl	800069c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80007ee:	2324      	movs	r3, #36	; 0x24
 80007f0:	220d      	movs	r2, #13
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff51 	bl	800069c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80007fa:	230a      	movs	r3, #10
 80007fc:	2200      	movs	r2, #0
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff73 	bl	80006ec <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 8000806:	236b      	movs	r3, #107	; 0x6b
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff45 	bl	800069c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8000812:	200a      	movs	r0, #10
 8000814:	f000 fd3c 	bl	8001290 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8000818:	230b      	movs	r3, #11
 800081a:	2201      	movs	r2, #1
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff64 	bl	80006ec <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000824:	236b      	movs	r3, #107	; 0x6b
 8000826:	2201      	movs	r2, #1
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff36 	bl	800069c <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 8000830:	f7ff ffae 	bl	8000790 <whoAmI>
 8000834:	4603      	mov	r3, r0
 8000836:	73fb      	strb	r3, [r7, #15]
	if((who != 0x71) &&( who != 0x70))
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b71      	cmp	r3, #113	; 0x71
 800083c:	d004      	beq.n	8000848 <MPU9250_Init+0x80>
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b70      	cmp	r3, #112	; 0x70
 8000842:	d001      	beq.n	8000848 <MPU9250_Init+0x80>
	{
		return who;
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	e06c      	b.n	8000922 <MPU9250_Init+0x15a>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8000848:	236c      	movs	r3, #108	; 0x6c
 800084a:	2200      	movs	r2, #0
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff24 	bl	800069c <writeRegister>

	// setting accel range to 16G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G);
 8000854:	231c      	movs	r3, #28
 8000856:	2218      	movs	r2, #24
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff1e 	bl	800069c <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS);
 8000860:	231b      	movs	r3, #27
 8000862:	2200      	movs	r2, #0
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff18 	bl	800069c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 800086c:	231d      	movs	r3, #29
 800086e:	2201      	movs	r2, #1
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff12 	bl	800069c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8000878:	231a      	movs	r3, #26
 800087a:	2201      	movs	r2, #1
 800087c:	4611      	mov	r1, r2
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff0c 	bl	800069c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8000884:	2319      	movs	r3, #25
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff07 	bl	800069c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 800088e:	236a      	movs	r3, #106	; 0x6a
 8000890:	2220      	movs	r2, #32
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff01 	bl	800069c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 800089a:	2324      	movs	r3, #36	; 0x24
 800089c:	220d      	movs	r2, #13
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fefb 	bl	800069c <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 80008a6:	f7ff ff81 	bl	80007ac <whoAmIAK8963>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b48      	cmp	r3, #72	; 0x48
 80008ae:	d001      	beq.n	80008b4 <MPU9250_Init+0xec>
	{
		return 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e036      	b.n	8000922 <MPU9250_Init+0x15a>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80008b4:	230a      	movs	r3, #10
 80008b6:	2200      	movs	r2, #0
 80008b8:	4611      	mov	r1, r2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff16 	bl	80006ec <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 80008c0:	2064      	movs	r0, #100	; 0x64
 80008c2:	f000 fce5 	bl	8001290 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 80008c6:	230a      	movs	r3, #10
 80008c8:	220f      	movs	r2, #15
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff0d 	bl	80006ec <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80008d2:	2064      	movs	r0, #100	; 0x64
 80008d4:	f000 fcdc 	bl	8001290 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80008d8:	2310      	movs	r3, #16
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MPU9250_Init+0x168>)
 80008dc:	2103      	movs	r1, #3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff2b 	bl	800073a <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80008e4:	230a      	movs	r3, #10
 80008e6:	2200      	movs	r2, #0
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fefe 	bl	80006ec <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80008f0:	2064      	movs	r0, #100	; 0x64
 80008f2:	f000 fccd 	bl	8001290 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80008f6:	230a      	movs	r3, #10
 80008f8:	2216      	movs	r2, #22
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fef5 	bl	80006ec <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8000902:	2064      	movs	r0, #100	; 0x64
 8000904:	f000 fcc4 	bl	8001290 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 8000908:	236b      	movs	r3, #107	; 0x6b
 800090a:	2201      	movs	r2, #1
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fec4 	bl	800069c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 8000914:	2303      	movs	r3, #3
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <MPU9250_Init+0x16c>)
 8000918:	2107      	movs	r1, #7
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff0d 	bl	800073a <readAK8963Registers>

	// successful init, return 0
	return who;
 8000920:	7bfb      	ldrb	r3, [r7, #15]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000017c 	.word	0x2000017c
 8000930:	20000198 	.word	0x20000198
 8000934:	20000180 	.word	0x20000180

08000938 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8000944:	233b      	movs	r3, #59	; 0x3b
 8000946:	4a63      	ldr	r2, [pc, #396]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000948:	2115      	movs	r1, #21
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff febb 	bl	80006c6 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8000950:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b21a      	sxth	r2, r3
 8000958:	4b5e      	ldr	r3, [pc, #376]	; (8000ad4 <MPU9250_GetData+0x19c>)
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21a      	sxth	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8000966:	4b5b      	ldr	r3, [pc, #364]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000968:	789b      	ldrb	r3, [r3, #2]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b219      	sxth	r1, r3
 800096e:	4b59      	ldr	r3, [pc, #356]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000970:	78db      	ldrb	r3, [r3, #3]
 8000972:	b21a      	sxth	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3302      	adds	r3, #2
 8000978:	430a      	orrs	r2, r1
 800097a:	b212      	sxth	r2, r2
 800097c:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800097e:	4b55      	ldr	r3, [pc, #340]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000980:	791b      	ldrb	r3, [r3, #4]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b219      	sxth	r1, r3
 8000986:	4b53      	ldr	r3, [pc, #332]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000988:	795b      	ldrb	r3, [r3, #5]
 800098a:	b21a      	sxth	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	3304      	adds	r3, #4
 8000990:	430a      	orrs	r2, r1
 8000992:	b212      	sxth	r2, r2
 8000994:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8000996:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000998:	7a1b      	ldrb	r3, [r3, #8]
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	b21a      	sxth	r2, r3
 800099e:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009a0:	7a5b      	ldrb	r3, [r3, #9]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 80009ac:	4b49      	ldr	r3, [pc, #292]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009ae:	7a9b      	ldrb	r3, [r3, #10]
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	b219      	sxth	r1, r3
 80009b4:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009b6:	7adb      	ldrb	r3, [r3, #11]
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3302      	adds	r3, #2
 80009be:	430a      	orrs	r2, r1
 80009c0:	b212      	sxth	r2, r2
 80009c2:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80009c4:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009c6:	7b1b      	ldrb	r3, [r3, #12]
 80009c8:	021b      	lsls	r3, r3, #8
 80009ca:	b219      	sxth	r1, r3
 80009cc:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009ce:	7b5b      	ldrb	r3, [r3, #13]
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	3304      	adds	r3, #4
 80009d6:	430a      	orrs	r2, r1
 80009d8:	b212      	sxth	r2, r2
 80009da:	801a      	strh	r2, [r3, #0]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80009dc:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009de:	7bdb      	ldrb	r3, [r3, #15]
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	b21a      	sxth	r2, r3
 80009e4:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009e6:	7b9b      	ldrb	r3, [r3, #14]
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	82fb      	strh	r3, [r7, #22]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80009ee:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009f0:	7c5b      	ldrb	r3, [r3, #17]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b21a      	sxth	r2, r3
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <MPU9250_GetData+0x19c>)
 80009f8:	7c1b      	ldrb	r3, [r3, #16]
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	82bb      	strh	r3, [r7, #20]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000a02:	7cdb      	ldrb	r3, [r3, #19]
 8000a04:	021b      	lsls	r3, r3, #8
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MPU9250_GetData+0x19c>)
 8000a0a:	7c9b      	ldrb	r3, [r3, #18]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	827b      	strh	r3, [r7, #18]

	MagData[0] = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 8000a12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <MPU9250_GetData+0x1a0>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	3b80      	subs	r3, #128	; 0x80
 8000a24:	ee07 3a90 	vmov	s15, r3
 8000a28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a2c:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8000adc <MPU9250_GetData+0x1a4>
 8000a30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a44:	ee17 3a90 	vmov	r3, s15
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	801a      	strh	r2, [r3, #0]
	MagData[1] = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8000a4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a52:	ee07 3a90 	vmov	s15, r3
 8000a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MPU9250_GetData+0x1a0>)
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	3b80      	subs	r3, #128	; 0x80
 8000a60:	ee07 3a90 	vmov	s15, r3
 8000a64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a68:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8000adc <MPU9250_GetData+0x1a4>
 8000a6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3302      	adds	r3, #2
 8000a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a84:	ee17 2a90 	vmov	r2, s15
 8000a88:	b212      	sxth	r2, r2
 8000a8a:	801a      	strh	r2, [r3, #0]
	MagData[2] = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8000a8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a90:	ee07 3a90 	vmov	s15, r3
 8000a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MPU9250_GetData+0x1a0>)
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	3b80      	subs	r3, #128	; 0x80
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000aa6:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8000adc <MPU9250_GetData+0x1a4>
 8000aaa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	3304      	adds	r3, #4
 8000abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac2:	ee17 2a90 	vmov	r2, s15
 8000ac6:	b212      	sxth	r2, r2
 8000ac8:	801a      	strh	r2, [r3, #0]
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000180 	.word	0x20000180
 8000ad8:	20000198 	.word	0x20000198
 8000adc:	43800000 	.word	0x43800000

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	b0d3      	sub	sp, #332	; 0x14c
 8000ae4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fb61 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f85b 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f000 f951 	bl	8000d94 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000af2:	f007 fb91 	bl	8008218 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000af6:	f000 f8bf 	bl	8000c78 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000afa:	f000 f921 	bl	8000d40 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000afe:	f000 f8e9 	bl	8000cd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // >>>> MPU start
  uint8_t who_ami_addr = MPU9250_Init(&hspi1);
 8000b02:	4826      	ldr	r0, [pc, #152]	; (8000b9c <main+0xbc>)
 8000b04:	f7ff fe60 	bl	80007c8 <MPU9250_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 MPU9250_GetData(AccData, GyroData, MagData);
 8000b0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b12:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000b16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff0c 	bl	8000938 <MPU9250_GetData>
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b20:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
			 	  "Acc: %d %d %d\n"
			 	  "Gyro: %d %d %d\n "
			 	  "Mag: %d %d %d\n\n", who_ami_addr, AccData[0], AccData[1], AccData[2],
 8000b24:	f9b7 3120 	ldrsh.w	r3, [r7, #288]	; 0x120
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b28:	469c      	mov	ip, r3
			 	  "Mag: %d %d %d\n\n", who_ami_addr, AccData[0], AccData[1], AccData[2],
 8000b2a:	f9b7 3122 	ldrsh.w	r3, [r7, #290]	; 0x122
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b2e:	60fb      	str	r3, [r7, #12]
			 	  "Mag: %d %d %d\n\n", who_ami_addr, AccData[0], AccData[1], AccData[2],
 8000b30:	f9b7 1124 	ldrsh.w	r1, [r7, #292]	; 0x124
			 	 	 	 	 	 	 GyroData[0], GyroData[1], GyroData[2],
 8000b34:	f9b7 0118 	ldrsh.w	r0, [r7, #280]	; 0x118
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b38:	4604      	mov	r4, r0
			 	 	 	 	 	 	 GyroData[0], GyroData[1], GyroData[2],
 8000b3a:	f9b7 011a 	ldrsh.w	r0, [r7, #282]	; 0x11a
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b3e:	4605      	mov	r5, r0
			 	 	 	 	 	 	 GyroData[0], GyroData[1], GyroData[2],
 8000b40:	f9b7 011c 	ldrsh.w	r0, [r7, #284]	; 0x11c
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b44:	4606      	mov	r6, r0
									 MagData[0], MagData[1], MagData[2]);
 8000b46:	f9b7 0110 	ldrsh.w	r0, [r7, #272]	; 0x110
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b4a:	60b8      	str	r0, [r7, #8]
									 MagData[0], MagData[1], MagData[2]);
 8000b4c:	f9b7 0112 	ldrsh.w	r0, [r7, #274]	; 0x112
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b50:	6078      	str	r0, [r7, #4]
									 MagData[0], MagData[1], MagData[2]);
 8000b52:	f9b7 0114 	ldrsh.w	r0, [r7, #276]	; 0x114
	 sprintf(buf, "WHOAMI addr: %d\n"
 8000b56:	4603      	mov	r3, r0
 8000b58:	f107 0010 	add.w	r0, r7, #16
 8000b5c:	9307      	str	r3, [sp, #28]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	9306      	str	r3, [sp, #24]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	9305      	str	r3, [sp, #20]
 8000b66:	9604      	str	r6, [sp, #16]
 8000b68:	9503      	str	r5, [sp, #12]
 8000b6a:	9402      	str	r4, [sp, #8]
 8000b6c:	9101      	str	r1, [sp, #4]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	4663      	mov	r3, ip
 8000b74:	490a      	ldr	r1, [pc, #40]	; (8000ba0 <main+0xc0>)
 8000b76:	f008 f89b 	bl	8008cb0 <siprintf>
	 CDC_Transmit_FS((uint8_t *)buf,strlen(buf));
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb26 	bl	80001d0 <strlen>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f007 fc01 	bl	8008394 <CDC_Transmit_FS>
	 HAL_Delay(1000);
 8000b92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b96:	f000 fb7b 	bl	8001290 <HAL_Delay>
  {
 8000b9a:	e7b8      	b.n	8000b0e <main+0x2e>
 8000b9c:	200001f0 	.word	0x200001f0
 8000ba0:	080095a4 	.word	0x080095a4

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2230      	movs	r2, #48	; 0x30
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f008 f874 	bl	8008ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a27      	ldr	r2, [pc, #156]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <SystemClock_Config+0xcc>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c00:	2301      	movs	r3, #1
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c18:	23a8      	movs	r3, #168	; 0xa8
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c20:	2307      	movs	r3, #7
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 f9df 	bl	8002fec <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c34:	f000 f90e 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2105      	movs	r1, #5
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fc40 	bl	80034dc <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c62:	f000 f8f7 	bl	8000e54 <Error_Handler>
  }
}
 8000c66:	bf00      	nop
 8000c68:	3750      	adds	r7, #80	; 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_I2C1_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_I2C1_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb6:	f000 fdd7 	bl	8001868 <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f000 f8c8 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000019c 	.word	0x2000019c
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	000186a0 	.word	0x000186a0

08000cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <MX_SPI1_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d20:	220a      	movs	r2, #10
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_SPI1_Init+0x64>)
 8000d26:	f002 fdf7 	bl	8003918 <HAL_SPI_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d30:	f000 f890 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200001f0 	.word	0x200001f0
 8000d3c:	40013000 	.word	0x40013000

08000d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <MX_USART1_UART_Init+0x50>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d78:	f003 fb76 	bl	8004468 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d82:	f000 f867 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000248 	.word	0x20000248
 8000d90:	40011000 	.word	0x40011000

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_GPIO_Init+0xb8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f24e 0130 	movw	r1, #57392	; 0xe030
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <MX_GPIO_Init+0xbc>)
 8000e22:	f000 fd07 	bl	8001834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8000e26:	f24e 0330 	movw	r3, #57392	; 0xe030
 8000e2a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_GPIO_Init+0xbc>)
 8000e40:	f000 fb5c 	bl	80014fc <HAL_GPIO_Init>

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <Error_Handler+0x8>
	...

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_I2C_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12b      	bne.n	8000f2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eee:	23c0      	movs	r3, #192	; 0xc0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef2:	2312      	movs	r3, #18
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000efe:	2304      	movs	r3, #4
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <HAL_I2C_MspInit+0x8c>)
 8000f0a:	f000 faf7 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40005400 	.word	0x40005400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_SPI_MspInit+0x84>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d12b      	bne.n	8000fba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_SPI_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f9a:	23e0      	movs	r3, #224	; 0xe0
 8000f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000faa:	2305      	movs	r3, #5
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_SPI_MspInit+0x8c>)
 8000fb6:	f000 faa1 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40013000 	.word	0x40013000
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_UART_MspInit+0x84>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12c      	bne.n	800104c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_UART_MspInit+0x88>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_UART_MspInit+0x88>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_UART_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800102a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800103c:	2307      	movs	r3, #7
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_UART_MspInit+0x8c>)
 8001048:	f000 fa58 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40011000 	.word	0x40011000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f8d0 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <OTG_FS_IRQHandler+0x10>)
 80010ba:	f000 fe69 	bl	8001d90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20001774 	.word	0x20001774

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f007 fda8 	bl	8008c4c <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20020000 	.word	0x20020000
 8001128:	00000400 	.word	0x00000400
 800112c:	2000028c 	.word	0x2000028c
 8001130:	20001eb0 	.word	0x20001eb0

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001182:	f7ff ffd7 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f007 fd67 	bl	8008c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fca9 	bl	8000ae0 <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 800119c:	08009688 	.word	0x08009688
  ldr r2, =_sbss
 80011a0:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80011a4:	20001eb0 	.word	0x20001eb0

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <HAL_Init+0x40>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_Init+0x40>)
 80011c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x40>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f94f 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff fe3e 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f967 	bl	80014e2 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f92f 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000008 	.word	0x20000008
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	20000290 	.word	0x20000290

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000290 	.word	0x20000290

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff29 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff3e 	bl	8001320 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff31 	bl	800133c <__NVIC_EnableIRQ>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffa2 	bl	8001434 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e16b      	b.n	80017f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 815a 	bne.w	80017ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	2b02      	cmp	r3, #2
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d017      	beq.n	80015ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80b4 	beq.w	80017ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a5f      	ldr	r2, [pc, #380]	; (8001808 <HAL_GPIO_Init+0x30c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_GPIO_Init+0x310>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_GPIO_Init+0x314>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d02b      	beq.n	8001722 <HAL_GPIO_Init+0x226>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a51      	ldr	r2, [pc, #324]	; (8001814 <HAL_GPIO_Init+0x318>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x222>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a50      	ldr	r2, [pc, #320]	; (8001818 <HAL_GPIO_Init+0x31c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x21e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_GPIO_Init+0x320>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_GPIO_Init+0x324>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_GPIO_Init+0x328>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_GPIO_Init+0x32c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	; (800182c <HAL_GPIO_Init+0x330>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x20a>
 8001702:	2307      	movs	r3, #7
 8001704:	e00e      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001706:	2308      	movs	r3, #8
 8001708:	e00c      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170a:	2306      	movs	r3, #6
 800170c:	e00a      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170e:	2305      	movs	r3, #5
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001712:	2304      	movs	r3, #4
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001722:	2300      	movs	r3, #0
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001734:	4935      	ldr	r1, [pc, #212]	; (800180c <HAL_GPIO_Init+0x310>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001766:	4a32      	ldr	r2, [pc, #200]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_GPIO_Init+0x334>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001790:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ba:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	f67f ae90 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40013800 	.word	0x40013800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40021000 	.word	0x40021000
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40021c00 	.word	0x40021c00
 8001830:	40013c00 	.word	0x40013c00

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e12b      	b.n	8001ad2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d106      	bne.n	8001894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fb0e 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2224      	movs	r2, #36	; 0x24
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018cc:	f001 fffc 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a81      	ldr	r2, [pc, #516]	; (8001adc <HAL_I2C_Init+0x274>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d807      	bhi.n	80018ec <HAL_I2C_Init+0x84>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a80      	ldr	r2, [pc, #512]	; (8001ae0 <HAL_I2C_Init+0x278>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	bf94      	ite	ls
 80018e4:	2301      	movls	r3, #1
 80018e6:	2300      	movhi	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	e006      	b.n	80018fa <HAL_I2C_Init+0x92>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a7d      	ldr	r2, [pc, #500]	; (8001ae4 <HAL_I2C_Init+0x27c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	bf94      	ite	ls
 80018f4:	2301      	movls	r3, #1
 80018f6:	2300      	movhi	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0e7      	b.n	8001ad2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4a78      	ldr	r2, [pc, #480]	; (8001ae8 <HAL_I2C_Init+0x280>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0c9b      	lsrs	r3, r3, #18
 800190c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a6a      	ldr	r2, [pc, #424]	; (8001adc <HAL_I2C_Init+0x274>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d802      	bhi.n	800193c <HAL_I2C_Init+0xd4>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3301      	adds	r3, #1
 800193a:	e009      	b.n	8001950 <HAL_I2C_Init+0xe8>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	4a69      	ldr	r2, [pc, #420]	; (8001aec <HAL_I2C_Init+0x284>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	3301      	adds	r3, #1
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	430b      	orrs	r3, r1
 8001956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	495c      	ldr	r1, [pc, #368]	; (8001adc <HAL_I2C_Init+0x274>)
 800196c:	428b      	cmp	r3, r1
 800196e:	d819      	bhi.n	80019a4 <HAL_I2C_Init+0x13c>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e59      	subs	r1, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	fbb1 f3f3 	udiv	r3, r1, r3
 800197e:	1c59      	adds	r1, r3, #1
 8001980:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001984:	400b      	ands	r3, r1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00a      	beq.n	80019a0 <HAL_I2C_Init+0x138>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1e59      	subs	r1, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fbb1 f3f3 	udiv	r3, r1, r3
 8001998:	3301      	adds	r3, #1
 800199a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199e:	e051      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e04f      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d111      	bne.n	80019d0 <HAL_I2C_Init+0x168>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e58      	subs	r0, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	440b      	add	r3, r1
 80019ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	e012      	b.n	80019f6 <HAL_I2C_Init+0x18e>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e58      	subs	r0, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	0099      	lsls	r1, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_I2C_Init+0x196>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e022      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10e      	bne.n	8001a24 <HAL_I2C_Init+0x1bc>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	1e58      	subs	r0, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6859      	ldr	r1, [r3, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	440b      	add	r3, r1
 8001a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a22:	e00f      	b.n	8001a44 <HAL_I2C_Init+0x1dc>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e58      	subs	r0, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	0099      	lsls	r1, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	6809      	ldr	r1, [r1, #0]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69da      	ldr	r2, [r3, #28]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6911      	ldr	r1, [r2, #16]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68d2      	ldr	r2, [r2, #12]
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	000186a0 	.word	0x000186a0
 8001ae0:	001e847f 	.word	0x001e847f
 8001ae4:	003d08ff 	.word	0x003d08ff
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	10624dd3 	.word	0x10624dd3

08001af0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	b08f      	sub	sp, #60	; 0x3c
 8001af4:	af0a      	add	r7, sp, #40	; 0x28
 8001af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e10f      	b.n	8001d22 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f006 fd81 	bl	8008624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 f868 	bl	8004c16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	687e      	ldr	r6, [r7, #4]
 8001b4e:	466d      	mov	r5, sp
 8001b50:	f106 0410 	add.w	r4, r6, #16
 8001b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b60:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b64:	1d33      	adds	r3, r6, #4
 8001b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b68:	6838      	ldr	r0, [r7, #0]
 8001b6a:	f002 ff3f 	bl	80049ec <USB_CoreInit>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0d0      	b.n	8001d22 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 f856 	bl	8004c38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e04a      	b.n	8001c28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b92:	7bfa      	ldrb	r2, [r7, #15]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	333d      	adds	r3, #61	; 0x3d
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	333c      	adds	r3, #60	; 0x3c
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b298      	uxth	r0, r3
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	3344      	adds	r3, #68	; 0x44
 8001bce:	4602      	mov	r2, r0
 8001bd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	3340      	adds	r3, #64	; 0x40
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3348      	adds	r3, #72	; 0x48
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	334c      	adds	r3, #76	; 0x4c
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3354      	adds	r3, #84	; 0x54
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	3301      	adds	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d3af      	bcc.n	8001b92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	e044      	b.n	8001cc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d3b5      	bcc.n	8001c38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	687e      	ldr	r6, [r7, #4]
 8001cd4:	466d      	mov	r5, sp
 8001cd6:	f106 0410 	add.w	r4, r6, #16
 8001cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ce2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ce6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cea:	1d33      	adds	r3, r6, #4
 8001cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f002 ffee 	bl	8004cd0 <USB_DevInit>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00d      	b.n	8001d22 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 f93d 	bl	8005f9a <USB_DevDisconnect>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_PCD_Start+0x1c>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e020      	b.n	8001d88 <HAL_PCD_Start+0x5e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d109      	bne.n	8001d6a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d005      	beq.n	8001d6a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 ff40 	bl	8004bf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 f8ed 	bl	8005f58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b08d      	sub	sp, #52	; 0x34
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 f9ab 	bl	8006102 <USB_GetMode>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 848a 	bne.w	80026c8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f004 f90f 	bl	8005fdc <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8480 	beq.w	80026c6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 f8fc 	bl	8005fdc <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d107      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f002 0202 	and.w	r2, r2, #2
 8001dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 f8ea 	bl	8005fdc <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d161      	bne.n	8001ed6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0210 	bic.w	r2, r2, #16
 8001e20:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	0c5b      	lsrs	r3, r3, #17
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d124      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d035      	beq.n	8001ec6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6a38      	ldr	r0, [r7, #32]
 8001e6e:	f003 ff21 	bl	8005cb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e7e:	441a      	add	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	6a1a      	ldr	r2, [r3, #32]
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e90:	441a      	add	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	621a      	str	r2, [r3, #32]
 8001e96:	e016      	b.n	8001ec6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	0c5b      	lsrs	r3, r3, #17
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d110      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eaa:	2208      	movs	r2, #8
 8001eac:	4619      	mov	r1, r3
 8001eae:	6a38      	ldr	r0, [r7, #32]
 8001eb0:	f003 ff00 	bl	8005cb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ec0:	441a      	add	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699a      	ldr	r2, [r3, #24]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0210 	orr.w	r2, r2, #16
 8001ed4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 f87e 	bl	8005fdc <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001eea:	f040 80a7 	bne.w	800203c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 f883 	bl	8006002 <USB_ReadDevAllOutEpInterrupt>
 8001efc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001efe:	e099      	b.n	8002034 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 808e 	beq.w	8002028 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 f8a7 	bl	800606a <USB_ReadDevOutEPInterrupt>
 8001f1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f34:	461a      	mov	r2, r3
 8001f36:	2301      	movs	r3, #1
 8001f38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fec3 	bl	8002cc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00c      	beq.n	8001f66 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 ff99 	bl	8002e98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2310      	movs	r3, #16
 8001f80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d030      	beq.n	8001fee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	2b80      	cmp	r3, #128	; 0x80
 8001f96:	d109      	bne.n	8001fac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001faa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	78db      	ldrb	r3, [r3, #3]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f006 fc2a 	bl	8008830 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2302      	movs	r3, #2
 8001fec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002004:	461a      	mov	r2, r3
 8002006:	2320      	movs	r3, #32
 8002008:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002020:	461a      	mov	r2, r3
 8002022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002026:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	3301      	adds	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f af62 	bne.w	8001f00 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f003 ffcb 	bl	8005fdc <USB_ReadInterrupts>
 8002046:	4603      	mov	r3, r0
 8002048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002050:	f040 80db 	bne.w	800220a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 ffec 	bl	8006036 <USB_ReadDevAllInEpInterrupt>
 800205e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002064:	e0cd      	b.n	8002202 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80c2 	beq.w	80021f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f004 f812 	bl	80060a6 <USB_ReadDevInEPInterrupt>
 8002082:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d057      	beq.n	800213e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	2201      	movs	r2, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69f9      	ldr	r1, [r7, #28]
 80020aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020ae:	4013      	ands	r3, r2
 80020b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020be:	461a      	mov	r2, r3
 80020c0:	2301      	movs	r3, #1
 80020c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d132      	bne.n	8002132 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	334c      	adds	r3, #76	; 0x4c
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4403      	add	r3, r0
 80020ec:	3348      	adds	r3, #72	; 0x48
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4419      	add	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4403      	add	r3, r0
 8002100:	334c      	adds	r3, #76	; 0x4c
 8002102:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	2b00      	cmp	r3, #0
 8002108:	d113      	bne.n	8002132 <HAL_PCD_IRQHandler+0x3a2>
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3354      	adds	r3, #84	; 0x54
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800212a:	461a      	mov	r2, r3
 800212c:	2101      	movs	r1, #1
 800212e:	f004 f819 	bl	8006164 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f006 faf4 	bl	8008726 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002154:	461a      	mov	r2, r3
 8002156:	2308      	movs	r3, #8
 8002158:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002170:	461a      	mov	r2, r3
 8002172:	2310      	movs	r3, #16
 8002174:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800218c:	461a      	mov	r2, r3
 800218e:	2340      	movs	r3, #64	; 0x40
 8002190:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d023      	beq.n	80021e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800219c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219e:	6a38      	ldr	r0, [r7, #32]
 80021a0:	f002 fefa 	bl	8004f98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	3338      	adds	r3, #56	; 0x38
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	78db      	ldrb	r3, [r3, #3]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d108      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 fb41 	bl	8008854 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021de:	461a      	mov	r2, r3
 80021e0:	2302      	movs	r3, #2
 80021e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80021ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fcdb 	bl	8002bac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	3301      	adds	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f af2e 	bne.w	8002066 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fee4 	bl	8005fdc <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800221a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800221e:	d122      	bne.n	8002266 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800223a:	2b01      	cmp	r3, #1
 800223c:	d108      	bne.n	8002250 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002246:	2100      	movs	r1, #0
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 fec3 	bl	8002fd4 <HAL_PCDEx_LPM_Callback>
 800224e:	e002      	b.n	8002256 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f006 fadf 	bl	8008814 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 feb6 	bl	8005fdc <USB_ReadInterrupts>
 8002270:	4603      	mov	r3, r0
 8002272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800227a:	d112      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d102      	bne.n	8002292 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f006 fa9b 	bl	80087c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022a0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fe98 	bl	8005fdc <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b6:	f040 80b7 	bne.w	8002428 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2110      	movs	r1, #16
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fe5f 	bl	8004f98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022de:	e046      	b.n	800236e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ec:	461a      	mov	r2, r3
 80022ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002304:	0151      	lsls	r1, r2, #5
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	440a      	add	r2, r1
 800230a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800230e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002312:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002326:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002338:	0151      	lsls	r1, r2, #5
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	440a      	add	r2, r1
 800233e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002346:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002358:	0151      	lsls	r1, r2, #5
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	440a      	add	r2, r1
 800235e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002366:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	3301      	adds	r3, #1
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002374:	429a      	cmp	r2, r3
 8002376:	d3b3      	bcc.n	80022e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002386:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800238a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	2b00      	cmp	r3, #0
 8002392:	d016      	beq.n	80023c2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a4:	f043 030b 	orr.w	r3, r3, #11
 80023a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ba:	f043 030b 	orr.w	r3, r3, #11
 80023be:	6453      	str	r3, [r2, #68]	; 0x44
 80023c0:	e015      	b.n	80023ee <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023e8:	f043 030b 	orr.w	r3, r3, #11
 80023ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002400:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002412:	461a      	mov	r2, r3
 8002414:	f003 fea6 	bl	8006164 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fdd5 	bl	8005fdc <USB_ReadInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243c:	d124      	bne.n	8002488 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fe6b 	bl	800611e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f002 fe20 	bl	8005092 <USB_GetDevSpeed>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681c      	ldr	r4, [r3, #0]
 800245e:	f001 fa27 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 8002462:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	4620      	mov	r0, r4
 800246e:	f002 fb1f 	bl	8004ab0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f006 f97f 	bl	8008776 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002486:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fda5 	bl	8005fdc <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b08      	cmp	r3, #8
 800249a:	d10a      	bne.n	80024b2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f006 f95c 	bl	800875a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f002 0208 	and.w	r2, r2, #8
 80024b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fd90 	bl	8005fdc <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b80      	cmp	r3, #128	; 0x80
 80024c4:	d122      	bne.n	800250c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024d2:	2301      	movs	r3, #1
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e014      	b.n	8002502 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fb27 	bl	8002b4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	3301      	adds	r3, #1
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	429a      	cmp	r2, r3
 800250a:	d3e5      	bcc.n	80024d8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f003 fd63 	bl	8005fdc <USB_ReadInterrupts>
 8002516:	4603      	mov	r3, r0
 8002518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002520:	d13b      	bne.n	800259a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002522:	2301      	movs	r3, #1
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
 8002526:	e02b      	b.n	8002580 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3340      	adds	r3, #64	; 0x40
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d115      	bne.n	800257a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800254e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002550:	2b00      	cmp	r3, #0
 8002552:	da12      	bge.n	800257a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	333f      	adds	r3, #63	; 0x3f
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fae8 	bl	8002b4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	3301      	adds	r3, #1
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002586:	429a      	cmp	r2, r3
 8002588:	d3ce      	bcc.n	8002528 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fd1c 	bl	8005fdc <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ae:	d155      	bne.n	800265c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b0:	2301      	movs	r3, #1
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
 80025b4:	e045      	b.n	8002642 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d12e      	bne.n	800263c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	da2b      	bge.n	800263c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d121      	bne.n	800263c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002638:	6053      	str	r3, [r2, #4]
            break;
 800263a:	e007      	b.n	800264c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	3301      	adds	r3, #1
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002648:	429a      	cmp	r2, r3
 800264a:	d3b4      	bcc.n	80025b6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800265a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fcbb 	bl	8005fdc <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d10a      	bne.n	8002688 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f006 f900 	bl	8008878 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fca5 	bl	8005fdc <USB_ReadInterrupts>
 8002692:	4603      	mov	r3, r0
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d115      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f006 f8f0 	bl	8008894 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	e000      	b.n	80026c8 <HAL_PCD_IRQHandler+0x938>
      return;
 80026c6:	bf00      	nop
    }
  }
}
 80026c8:	3734      	adds	r7, #52	; 0x34
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}

080026ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_PCD_SetAddress+0x1a>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e013      	b.n	8002710 <HAL_PCD_SetAddress+0x42>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fc03 	bl	8005f0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4603      	mov	r3, r0
 8002728:	70fb      	strb	r3, [r7, #3]
 800272a:	460b      	mov	r3, r1
 800272c:	803b      	strh	r3, [r7, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da0f      	bge.n	800275e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 020f 	and.w	r2, r3, #15
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	3338      	adds	r3, #56	; 0x38
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	3304      	adds	r3, #4
 8002754:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	705a      	strb	r2, [r3, #1]
 800275c:	e00f      	b.n	800277e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	3304      	adds	r3, #4
 8002776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800278a:	883a      	ldrh	r2, [r7, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	78ba      	ldrb	r2, [r7, #2]
 8002794:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	785b      	ldrb	r3, [r3, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d004      	beq.n	80027a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027a8:	78bb      	ldrb	r3, [r7, #2]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d102      	bne.n	80027b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_PCD_EP_Open+0xaa>
 80027be:	2302      	movs	r3, #2
 80027c0:	e00e      	b.n	80027e0 <HAL_PCD_EP_Open+0xc8>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 fc83 	bl	80050dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80027de:	7afb      	ldrb	r3, [r7, #11]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da0f      	bge.n	800281c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	f003 020f 	and.w	r2, r3, #15
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	3338      	adds	r3, #56	; 0x38
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	705a      	strb	r2, [r3, #1]
 800281a:	e00f      	b.n	800283c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_PCD_EP_Close+0x6e>
 8002852:	2302      	movs	r3, #2
 8002854:	e00e      	b.n	8002874 <HAL_PCD_EP_Close+0x8c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	4618      	mov	r0, r3
 8002866:	f002 fcc1 	bl	80051ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	460b      	mov	r3, r1
 800288a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800288c:	7afb      	ldrb	r3, [r7, #11]
 800288e:	f003 020f 	and.w	r2, r3, #15
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2200      	movs	r2, #0
 80028bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028be:	7afb      	ldrb	r3, [r7, #11]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	6979      	ldr	r1, [r7, #20]
 80028f0:	f002 ffa0 	bl	8005834 <USB_EP0StartXfer>
 80028f4:	e008      	b.n	8002908 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	6979      	ldr	r1, [r7, #20]
 8002904:	f002 fd4e 	bl	80053a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002934:	681b      	ldr	r3, [r3, #0]
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	460b      	mov	r3, r1
 8002950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	3338      	adds	r3, #56	; 0x38
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	3304      	adds	r3, #4
 8002968:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2201      	movs	r2, #1
 8002980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	b2da      	uxtb	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d102      	bne.n	800299c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800299c:	7afb      	ldrb	r3, [r7, #11]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	6979      	ldr	r1, [r7, #20]
 80029b4:	f002 ff3e 	bl	8005834 <USB_EP0StartXfer>
 80029b8:	e008      	b.n	80029cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	6979      	ldr	r1, [r7, #20]
 80029c8:	f002 fcec 	bl	80053a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d901      	bls.n	80029f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e050      	b.n	8002a96 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da0f      	bge.n	8002a1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 020f 	and.w	r2, r3, #15
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	3338      	adds	r3, #56	; 0x38
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	3304      	adds	r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	705a      	strb	r2, [r3, #1]
 8002a1a:	e00d      	b.n	8002a38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_PCD_EP_SetStall+0x82>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e01e      	b.n	8002a96 <HAL_PCD_EP_SetStall+0xc0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 f97c 	bl	8005d64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	b2d9      	uxtb	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a86:	461a      	mov	r2, r3
 8002a88:	f003 fb6c 	bl	8006164 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d901      	bls.n	8002abc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e042      	b.n	8002b42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	da0f      	bge.n	8002ae4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 020f 	and.w	r2, r3, #15
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	3338      	adds	r3, #56	; 0x38
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3304      	adds	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	705a      	strb	r2, [r3, #1]
 8002ae2:	e00f      	b.n	8002b04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_PCD_EP_ClrStall+0x86>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e00e      	b.n	8002b42 <HAL_PCD_EP_ClrStall+0xa4>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f003 f984 	bl	8005e40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	da0c      	bge.n	8002b78 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	f003 020f 	and.w	r2, r3, #15
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	3338      	adds	r3, #56	; 0x38
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	3304      	adds	r3, #4
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e00c      	b.n	8002b92 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3304      	adds	r3, #4
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f002 ffa3 	bl	8005ae4 <USB_EPStopXfer>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	3338      	adds	r3, #56	; 0x38
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d901      	bls.n	8002be4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e06c      	b.n	8002cbe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d902      	bls.n	8002c00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3303      	adds	r3, #3
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c08:	e02b      	b.n	8002c62 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d902      	bls.n	8002c26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6919      	ldr	r1, [r3, #16]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4603      	mov	r3, r0
 8002c44:	6978      	ldr	r0, [r7, #20]
 8002c46:	f002 fff7 	bl	8005c38 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	441a      	add	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1a      	ldr	r2, [r3, #32]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	441a      	add	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d809      	bhi.n	8002c8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d203      	bcs.n	8002c8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1be      	bne.n	8002c0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d811      	bhi.n	8002cbc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	6939      	ldr	r1, [r7, #16]
 8002cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cb8:	4013      	ands	r3, r2
 8002cba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	333c      	adds	r3, #60	; 0x3c
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d17b      	bne.n	8002df6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4a61      	ldr	r2, [pc, #388]	; (8002e90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	f240 80b9 	bls.w	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80b3 	beq.w	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d30:	6093      	str	r3, [r2, #8]
 8002d32:	e0a7      	b.n	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	6093      	str	r3, [r2, #8]
 8002d50:	e098      	b.n	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 8093 	bne.w	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4a4b      	ldr	r2, [pc, #300]	; (8002e90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d90f      	bls.n	8002d86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d82:	6093      	str	r3, [r2, #8]
 8002d84:	e07e      	b.n	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	3304      	adds	r3, #4
 8002d9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	0159      	lsls	r1, r3, #5
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d114      	bne.n	8002de8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	f003 f9c6 	bl	8006164 <USB_EP0_OutStart>
 8002dd8:	e006      	b.n	8002de8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	441a      	add	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	4619      	mov	r1, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f005 fc7e 	bl	80086f0 <HAL_PCD_DataOutStageCallback>
 8002df4:	e046      	b.n	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d124      	bne.n	8002e48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e14:	461a      	mov	r2, r3
 8002e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1a:	6093      	str	r3, [r2, #8]
 8002e1c:	e032      	b.n	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	2320      	movs	r3, #32
 8002e38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f005 fc55 	bl	80086f0 <HAL_PCD_DataOutStageCallback>
 8002e46:	e01d      	b.n	8002e84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d114      	bne.n	8002e78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d108      	bne.n	8002e78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e70:	461a      	mov	r2, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	f003 f976 	bl	8006164 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f005 fc36 	bl	80086f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	4f54300a 	.word	0x4f54300a
 8002e94:	4f54310a 	.word	0x4f54310a

08002e98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d90e      	bls.n	8002eec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f005 fbed 	bl	80086cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d90c      	bls.n	8002f14 <PCD_EP_OutSetupPacket_int+0x7c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d108      	bne.n	8002f14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2101      	movs	r1, #1
 8002f10:	f003 f928 	bl	8006164 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	4f54300a 	.word	0x4f54300a

08002f24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	70fb      	strb	r3, [r7, #3]
 8002f30:	4613      	mov	r3, r2
 8002f32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d107      	bne.n	8002f52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f42:	883b      	ldrh	r3, [r7, #0]
 8002f44:	0419      	lsls	r1, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f50:	e028      	b.n	8002fa4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e00d      	b.n	8002f82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	3340      	adds	r3, #64	; 0x40
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4413      	add	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	7bfa      	ldrb	r2, [r7, #15]
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d3ec      	bcc.n	8002f66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f8c:	883b      	ldrh	r3, [r7, #0]
 8002f8e:	0418      	lsls	r0, r3, #16
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	4302      	orrs	r2, r0
 8002f9c:	3340      	adds	r3, #64	; 0x40
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e267      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d075      	beq.n	80030f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300a:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d00c      	beq.n	8003030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b85      	ldr	r3, [pc, #532]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800301e:	2b08      	cmp	r3, #8
 8003020:	d112      	bne.n	8003048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003022:	4b82      	ldr	r3, [pc, #520]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302e:	d10b      	bne.n	8003048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	4b7e      	ldr	r3, [pc, #504]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d05b      	beq.n	80030f4 <HAL_RCC_OscConfig+0x108>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d157      	bne.n	80030f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e242      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d106      	bne.n	8003060 <HAL_RCC_OscConfig+0x74>
 8003052:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a75      	ldr	r2, [pc, #468]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e01d      	b.n	800309c <HAL_RCC_OscConfig+0xb0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x98>
 800306a:	4b70      	ldr	r3, [pc, #448]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6f      	ldr	r2, [pc, #444]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b6d      	ldr	r3, [pc, #436]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6c      	ldr	r2, [pc, #432]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0xb0>
 8003084:	4b69      	ldr	r3, [pc, #420]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a68      	ldr	r2, [pc, #416]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b66      	ldr	r3, [pc, #408]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a65      	ldr	r2, [pc, #404]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe f8e8 	bl	8001278 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe f8e4 	bl	8001278 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e207      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b5b      	ldr	r3, [pc, #364]	; (800322c <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0xc0>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe f8d4 	bl	8001278 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe f8d0 	bl	8001278 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1f3      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	4b51      	ldr	r3, [pc, #324]	; (800322c <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0xe8>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d063      	beq.n	80031ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003102:	4b4a      	ldr	r3, [pc, #296]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003116:	2b08      	cmp	r3, #8
 8003118:	d11c      	bne.n	8003154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d116      	bne.n	8003154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x152>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e1c7      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4937      	ldr	r1, [pc, #220]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	e03a      	b.n	80031ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <HAL_RCC_OscConfig+0x244>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe f889 	bl	8001278 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316a:	f7fe f885 	bl	8001278 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e1a8      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4925      	ldr	r1, [pc, #148]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
 800319c:	e015      	b.n	80031ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_OscConfig+0x244>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f868 	bl	8001278 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fe f864 	bl	8001278 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e187      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d036      	beq.n	8003244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_RCC_OscConfig+0x248>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe f848 	bl	8001278 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fe f844 	bl	8001278 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e167      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_OscConfig+0x240>)
 8003200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x200>
 800320a:	e01b      	b.n	8003244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x248>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe f831 	bl	8001278 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	e00e      	b.n	8003238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe f82d 	bl	8001278 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d907      	bls.n	8003238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e150      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
 800322c:	40023800 	.word	0x40023800
 8003230:	42470000 	.word	0x42470000
 8003234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	4b88      	ldr	r3, [pc, #544]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ea      	bne.n	800321a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8097 	beq.w	8003380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003256:	4b81      	ldr	r3, [pc, #516]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b7d      	ldr	r3, [pc, #500]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4a7c      	ldr	r2, [pc, #496]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	; 0x40
 8003272:	4b7a      	ldr	r3, [pc, #488]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b77      	ldr	r3, [pc, #476]	; (8003460 <HAL_RCC_OscConfig+0x474>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b74      	ldr	r3, [pc, #464]	; (8003460 <HAL_RCC_OscConfig+0x474>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a73      	ldr	r2, [pc, #460]	; (8003460 <HAL_RCC_OscConfig+0x474>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fd ffed 	bl	8001278 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fd ffe9 	bl	8001278 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e10c      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x474>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x2ea>
 80032c8:	4b64      	ldr	r3, [pc, #400]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a63      	ldr	r2, [pc, #396]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	e01c      	b.n	8003310 <HAL_RCC_OscConfig+0x324>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x30c>
 80032de:	4b5f      	ldr	r3, [pc, #380]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	4a5e      	ldr	r2, [pc, #376]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ea:	4b5c      	ldr	r3, [pc, #368]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a5b      	ldr	r2, [pc, #364]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0x324>
 80032f8:	4b58      	ldr	r3, [pc, #352]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a57      	ldr	r2, [pc, #348]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	4b55      	ldr	r3, [pc, #340]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a54      	ldr	r2, [pc, #336]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800330a:	f023 0304 	bic.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d015      	beq.n	8003344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fd ffae 	bl	8001278 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fd ffaa 	bl	8001278 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0cb      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	4b49      	ldr	r3, [pc, #292]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ee      	beq.n	8003320 <HAL_RCC_OscConfig+0x334>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003344:	f7fd ff98 	bl	8001278 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fd ff94 	bl	8001278 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0b5      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003362:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ee      	bne.n	800334c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4a38      	ldr	r2, [pc, #224]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a1 	beq.w	80034cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338a:	4b34      	ldr	r3, [pc, #208]	; (800345c <HAL_RCC_OscConfig+0x470>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b08      	cmp	r3, #8
 8003394:	d05c      	beq.n	8003450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d141      	bne.n	8003422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b31      	ldr	r3, [pc, #196]	; (8003464 <HAL_RCC_OscConfig+0x478>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fd ff68 	bl	8001278 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fd ff64 	bl	8001278 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e087      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	3b01      	subs	r3, #1
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	491b      	ldr	r1, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x470>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x478>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fd ff3d 	bl	8001278 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003402:	f7fd ff39 	bl	8001278 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e05c      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x416>
 8003420:	e054      	b.n	80034cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_RCC_OscConfig+0x478>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fd ff26 	bl	8001278 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fd ff22 	bl	8001278 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e045      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_RCC_OscConfig+0x470>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x444>
 800344e:	e03d      	b.n	80034cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d107      	bne.n	8003468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e038      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000
 8003464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003468:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_OscConfig+0x4ec>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d028      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d121      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d11a      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800349e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d111      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	3b01      	subs	r3, #1
 80034b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0cc      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b68      	ldr	r3, [pc, #416]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d90c      	bls.n	8003518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b65      	ldr	r3, [pc, #404]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b63      	ldr	r3, [pc, #396]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0b8      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003530:	4b59      	ldr	r3, [pc, #356]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a58      	ldr	r2, [pc, #352]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800353a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a52      	ldr	r2, [pc, #328]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003554:	4b50      	ldr	r3, [pc, #320]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	494d      	ldr	r1, [pc, #308]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d044      	beq.n	80035fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d119      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e07f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d003      	beq.n	800359a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003596:	2b03      	cmp	r3, #3
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	4b3f      	ldr	r3, [pc, #252]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e06f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	4b3b      	ldr	r3, [pc, #236]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e067      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4934      	ldr	r1, [pc, #208]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035cc:	f7fd fe54 	bl	8001278 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fd fe50 	bl	8001278 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e04f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b25      	ldr	r3, [pc, #148]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d20c      	bcs.n	8003624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b22      	ldr	r3, [pc, #136]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b20      	ldr	r3, [pc, #128]	; (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e032      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4916      	ldr	r1, [pc, #88]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	490e      	ldr	r1, [pc, #56]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003662:	f000 f821 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8003666:	4602      	mov	r2, r0
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	490a      	ldr	r1, [pc, #40]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	5ccb      	ldrb	r3, [r1, r3]
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fdb4 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023c00 	.word	0x40023c00
 8003698:	40023800 	.word	0x40023800
 800369c:	0800962c 	.word	0x0800962c
 80036a0:	20000000 	.word	0x20000000
 80036a4:	20000004 	.word	0x20000004

080036a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ac:	b094      	sub	sp, #80	; 0x50
 80036ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	647b      	str	r3, [r7, #68]	; 0x44
 80036b4:	2300      	movs	r3, #0
 80036b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b8:	2300      	movs	r3, #0
 80036ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c0:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d00d      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x40>
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	f200 80e1 	bhi.w	8003894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x34>
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036da:	e0db      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b73      	ldr	r3, [pc, #460]	; (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 80036de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036e0:	e0db      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036e2:	4b72      	ldr	r3, [pc, #456]	; (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 80036e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036e6:	e0d8      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e8:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f2:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d063      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	2200      	movs	r2, #0
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
 8003708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
 8003712:	2300      	movs	r3, #0
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800371a:	4622      	mov	r2, r4
 800371c:	462b      	mov	r3, r5
 800371e:	f04f 0000 	mov.w	r0, #0
 8003722:	f04f 0100 	mov.w	r1, #0
 8003726:	0159      	lsls	r1, r3, #5
 8003728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372c:	0150      	lsls	r0, r2, #5
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4621      	mov	r1, r4
 8003734:	1a51      	subs	r1, r2, r1
 8003736:	6139      	str	r1, [r7, #16]
 8003738:	4629      	mov	r1, r5
 800373a:	eb63 0301 	sbc.w	r3, r3, r1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800374c:	4659      	mov	r1, fp
 800374e:	018b      	lsls	r3, r1, #6
 8003750:	4651      	mov	r1, sl
 8003752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003756:	4651      	mov	r1, sl
 8003758:	018a      	lsls	r2, r1, #6
 800375a:	4651      	mov	r1, sl
 800375c:	ebb2 0801 	subs.w	r8, r2, r1
 8003760:	4659      	mov	r1, fp
 8003762:	eb63 0901 	sbc.w	r9, r3, r1
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	4623      	mov	r3, r4
 8003780:	eb18 0303 	adds.w	r3, r8, r3
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	462b      	mov	r3, r5
 8003788:	eb49 0303 	adc.w	r3, r9, r3
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800379a:	4629      	mov	r1, r5
 800379c:	028b      	lsls	r3, r1, #10
 800379e:	4621      	mov	r1, r4
 80037a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a4:	4621      	mov	r1, r4
 80037a6:	028a      	lsls	r2, r1, #10
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037b8:	f7fc fd62 	bl	8000280 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c4:	e058      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	2200      	movs	r2, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	4611      	mov	r1, r2
 80037d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	2300      	movs	r3, #0
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
 80037dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	f04f 0000 	mov.w	r0, #0
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	0159      	lsls	r1, r3, #5
 80037ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f2:	0150      	lsls	r0, r2, #5
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4641      	mov	r1, r8
 80037fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80037fe:	4649      	mov	r1, r9
 8003800:	eb63 0b01 	sbc.w	fp, r3, r1
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003818:	ebb2 040a 	subs.w	r4, r2, sl
 800381c:	eb63 050b 	sbc.w	r5, r3, fp
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	00eb      	lsls	r3, r5, #3
 800382a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382e:	00e2      	lsls	r2, r4, #3
 8003830:	4614      	mov	r4, r2
 8003832:	461d      	mov	r5, r3
 8003834:	4643      	mov	r3, r8
 8003836:	18e3      	adds	r3, r4, r3
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	464b      	mov	r3, r9
 800383c:	eb45 0303 	adc.w	r3, r5, r3
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800384e:	4629      	mov	r1, r5
 8003850:	028b      	lsls	r3, r1, #10
 8003852:	4621      	mov	r1, r4
 8003854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003858:	4621      	mov	r1, r4
 800385a:	028a      	lsls	r2, r1, #10
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003862:	2200      	movs	r2, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	61fa      	str	r2, [r7, #28]
 8003868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800386c:	f7fc fd08 	bl	8000280 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4613      	mov	r3, r2
 8003876:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	3301      	adds	r3, #1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003892:	e002      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003896:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800389c:	4618      	mov	r0, r3
 800389e:	3750      	adds	r7, #80	; 0x50
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800
 80038ac:	00f42400 	.word	0x00f42400

080038b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000000 	.word	0x20000000

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	0800963c 	.word	0x0800963c

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffdc 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0b5b      	lsrs	r3, r3, #13
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	0800963c 	.word	0x0800963c

08003918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07b      	b.n	8003a22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	d108      	bne.n	8003944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393a:	d009      	beq.n	8003950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	61da      	str	r2, [r3, #28]
 8003942:	e005      	b.n	8003950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fd fae8 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003986:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d4:	ea42 0103 	orr.w	r1, r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f003 0104 	and.w	r1, r3, #4
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0210 	and.w	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b088      	sub	sp, #32
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_SPI_Transmit+0x22>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e126      	b.n	8003c9a <HAL_SPI_Transmit+0x270>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a54:	f7fd fc10 	bl	8001278 <HAL_GetTick>
 8003a58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d002      	beq.n	8003a70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a6e:	e10b      	b.n	8003c88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0x52>
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a80:	e102      	b.n	8003c88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2203      	movs	r2, #3
 8003a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac8:	d10f      	bne.n	8003aea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ae8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d007      	beq.n	8003b08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b10:	d14b      	bne.n	8003baa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_Transmit+0xf6>
 8003b1a:	8afb      	ldrh	r3, [r7, #22]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d13e      	bne.n	8003b9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b44:	e02b      	b.n	8003b9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d112      	bne.n	8003b7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	881a      	ldrh	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b78:	e011      	b.n	8003b9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b7a:	f7fd fb7d 	bl	8001278 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d803      	bhi.n	8003b92 <HAL_SPI_Transmit+0x168>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_Transmit+0x16e>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b9c:	e074      	b.n	8003c88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ce      	bne.n	8003b46 <HAL_SPI_Transmit+0x11c>
 8003ba8:	e04c      	b.n	8003c44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_SPI_Transmit+0x18e>
 8003bb2:	8afb      	ldrh	r3, [r7, #22]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d140      	bne.n	8003c3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	7812      	ldrb	r2, [r2, #0]
 8003bc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bde:	e02c      	b.n	8003c3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d113      	bne.n	8003c16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c14:	e011      	b.n	8003c3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c16:	f7fd fb2f 	bl	8001278 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d803      	bhi.n	8003c2e <HAL_SPI_Transmit+0x204>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d102      	bne.n	8003c34 <HAL_SPI_Transmit+0x20a>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c38:	e026      	b.n	8003c88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1cd      	bne.n	8003be0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	6839      	ldr	r1, [r7, #0]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fbcb 	bl	80043e4 <SPI_EndRxTxTransaction>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e000      	b.n	8003c88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b088      	sub	sp, #32
 8003ca6:	af02      	add	r7, sp, #8
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cbe:	d112      	bne.n	8003ce6 <HAL_SPI_Receive+0x44>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2204      	movs	r2, #4
 8003ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f8f1 	bl	8003ec4 <HAL_SPI_TransmitReceive>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	e0ea      	b.n	8003ebc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_SPI_Receive+0x52>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0e3      	b.n	8003ebc <HAL_SPI_Receive+0x21a>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cfc:	f7fd fabc 	bl	8001278 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d002      	beq.n	8003d14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d12:	e0ca      	b.n	8003eaa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_SPI_Receive+0x7e>
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d24:	e0c1      	b.n	8003eaa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	88fa      	ldrh	r2, [r7, #6]
 8003d44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6c:	d10f      	bne.n	8003d8e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d007      	beq.n	8003dac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003daa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d162      	bne.n	8003e7a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003db4:	e02e      	b.n	8003e14 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d115      	bne.n	8003df0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f103 020c 	add.w	r2, r3, #12
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dee:	e011      	b.n	8003e14 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df0:	f7fd fa42 	bl	8001278 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d803      	bhi.n	8003e08 <HAL_SPI_Receive+0x166>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Receive+0x16c>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e12:	e04a      	b.n	8003eaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1cb      	bne.n	8003db6 <HAL_SPI_Receive+0x114>
 8003e1e:	e031      	b.n	8003e84 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d113      	bne.n	8003e56 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	1c9a      	adds	r2, r3, #2
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e54:	e011      	b.n	8003e7a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e56:	f7fd fa0f 	bl	8001278 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d803      	bhi.n	8003e6e <HAL_SPI_Receive+0x1cc>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d102      	bne.n	8003e74 <HAL_SPI_Receive+0x1d2>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e78:	e017      	b.n	8003eaa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1cd      	bne.n	8003e20 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	6839      	ldr	r1, [r7, #0]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fa45 	bl	8004318 <SPI_EndRxTransaction>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
 8003ea6:	e000      	b.n	8003eaa <HAL_SPI_Receive+0x208>
  }

error :
 8003ea8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	; 0x30
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_SPI_TransmitReceive+0x26>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e18a      	b.n	8004200 <HAL_SPI_TransmitReceive+0x33c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef2:	f7fd f9c1 	bl	8001278 <HAL_GetTick>
 8003ef6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d00f      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x70>
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f1a:	d107      	bne.n	8003f2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d103      	bne.n	8003f2c <HAL_SPI_TransmitReceive+0x68>
 8003f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d003      	beq.n	8003f34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f32:	e15b      	b.n	80041ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_SPI_TransmitReceive+0x82>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_TransmitReceive+0x82>
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f4c:	e14e      	b.n	80041ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d003      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2205      	movs	r2, #5
 8003f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	887a      	ldrh	r2, [r7, #2]
 8003f72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	887a      	ldrh	r2, [r7, #2]
 8003f84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	887a      	ldrh	r2, [r7, #2]
 8003f8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d007      	beq.n	8003fb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbe:	d178      	bne.n	80040b2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x10a>
 8003fc8:	8b7b      	ldrh	r3, [r7, #26]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d166      	bne.n	800409c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ff2:	e053      	b.n	800409c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d11b      	bne.n	800403a <HAL_SPI_TransmitReceive+0x176>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d016      	beq.n	800403a <HAL_SPI_TransmitReceive+0x176>
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d113      	bne.n	800403a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	881a      	ldrh	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	1c9a      	adds	r2, r3, #2
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d119      	bne.n	800407c <HAL_SPI_TransmitReceive+0x1b8>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d014      	beq.n	800407c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	b292      	uxth	r2, r2
 800405e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	1c9a      	adds	r2, r3, #2
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004078:	2301      	movs	r3, #1
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800407c:	f7fd f8fc 	bl	8001278 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004088:	429a      	cmp	r2, r3
 800408a:	d807      	bhi.n	800409c <HAL_SPI_TransmitReceive+0x1d8>
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d003      	beq.n	800409c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800409a:	e0a7      	b.n	80041ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1a6      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x130>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1a1      	bne.n	8003ff4 <HAL_SPI_TransmitReceive+0x130>
 80040b0:	e07c      	b.n	80041ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x1fc>
 80040ba:	8b7b      	ldrh	r3, [r7, #26]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d16b      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	7812      	ldrb	r2, [r2, #0]
 80040cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e6:	e057      	b.n	8004198 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d11c      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x26c>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d017      	beq.n	8004130 <HAL_SPI_TransmitReceive+0x26c>
 8004100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d114      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	7812      	ldrb	r2, [r2, #0]
 8004112:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d119      	bne.n	8004172 <HAL_SPI_TransmitReceive+0x2ae>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d014      	beq.n	8004172 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800416e:	2301      	movs	r3, #1
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004172:	f7fd f881 	bl	8001278 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800417e:	429a      	cmp	r2, r3
 8004180:	d803      	bhi.n	800418a <HAL_SPI_TransmitReceive+0x2c6>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d102      	bne.n	8004190 <HAL_SPI_TransmitReceive+0x2cc>
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004196:	e029      	b.n	80041ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1a2      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x224>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d19d      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f917 	bl	80043e4 <SPI_EndRxTxTransaction>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d006      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041c8:	e010      	b.n	80041ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	e000      	b.n	80041ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004200:	4618      	mov	r0, r3
 8004202:	3730      	adds	r7, #48	; 0x30
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004218:	f7fd f82e 	bl	8001278 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	4413      	add	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004228:	f7fd f826 	bl	8001278 <HAL_GetTick>
 800422c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800422e:	4b39      	ldr	r3, [pc, #228]	; (8004314 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	015b      	lsls	r3, r3, #5
 8004234:	0d1b      	lsrs	r3, r3, #20
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800423e:	e054      	b.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d050      	beq.n	80042ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004248:	f7fd f816 	bl	8001278 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	429a      	cmp	r2, r3
 8004256:	d902      	bls.n	800425e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d13d      	bne.n	80042da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800426c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004276:	d111      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004280:	d004      	beq.n	800428c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428a:	d107      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a4:	d10f      	bne.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e017      	b.n	800430a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	429a      	cmp	r2, r3
 8004306:	d19b      	bne.n	8004240 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000000 	.word	0x20000000

08004318 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432c:	d111      	bne.n	8004352 <SPI_EndRxTransaction+0x3a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004336:	d004      	beq.n	8004342 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004340:	d107      	bne.n	8004352 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004350:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435a:	d12a      	bne.n	80043b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004364:	d012      	beq.n	800438c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2200      	movs	r2, #0
 800436e:	2180      	movs	r1, #128	; 0x80
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff ff49 	bl	8004208 <SPI_WaitFlagStateUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02d      	beq.n	80043d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e026      	b.n	80043da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2200      	movs	r2, #0
 8004394:	2101      	movs	r1, #1
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff ff36 	bl	8004208 <SPI_WaitFlagStateUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01a      	beq.n	80043d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e013      	b.n	80043da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2101      	movs	r1, #1
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff ff23 	bl	8004208 <SPI_WaitFlagStateUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0220 	orr.w	r2, r3, #32
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e000      	b.n	80043da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <SPI_EndRxTxTransaction+0x7c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <SPI_EndRxTxTransaction+0x80>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	0d5b      	lsrs	r3, r3, #21
 80043fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d112      	bne.n	8004436 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	2180      	movs	r1, #128	; 0x80
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff fef4 	bl	8004208 <SPI_WaitFlagStateUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e00f      	b.n	8004456 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3b01      	subs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d0f2      	beq.n	8004436 <SPI_EndRxTxTransaction+0x52>
 8004450:	e000      	b.n	8004454 <SPI_EndRxTxTransaction+0x70>
        break;
 8004452:	bf00      	nop
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000000 	.word	0x20000000
 8004464:	165e9f81 	.word	0x165e9f81

08004468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e03f      	b.n	80044fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fc fd9e 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f829 	bl	8004504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004508:	b0c0      	sub	sp, #256	; 0x100
 800450a:	af00      	add	r7, sp, #0
 800450c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	68d9      	ldr	r1, [r3, #12]
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	ea40 0301 	orr.w	r3, r0, r1
 800452c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	431a      	orrs	r2, r3
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	431a      	orrs	r2, r3
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800455c:	f021 010c 	bic.w	r1, r1, #12
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800456a:	430b      	orrs	r3, r1
 800456c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	6999      	ldr	r1, [r3, #24]
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	ea40 0301 	orr.w	r3, r0, r1
 800458a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b8f      	ldr	r3, [pc, #572]	; (80047d0 <UART_SetConfig+0x2cc>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d005      	beq.n	80045a4 <UART_SetConfig+0xa0>
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b8d      	ldr	r3, [pc, #564]	; (80047d4 <UART_SetConfig+0x2d0>)
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d104      	bne.n	80045ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7ff f9a4 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 80045a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045ac:	e003      	b.n	80045b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ae:	f7ff f98b 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 80045b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	f040 810c 	bne.w	80047dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	1891      	adds	r1, r2, r2
 80045dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80045de:	415b      	adcs	r3, r3
 80045e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045e6:	4621      	mov	r1, r4
 80045e8:	eb12 0801 	adds.w	r8, r2, r1
 80045ec:	4629      	mov	r1, r5
 80045ee:	eb43 0901 	adc.w	r9, r3, r1
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004606:	4690      	mov	r8, r2
 8004608:	4699      	mov	r9, r3
 800460a:	4623      	mov	r3, r4
 800460c:	eb18 0303 	adds.w	r3, r8, r3
 8004610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004614:	462b      	mov	r3, r5
 8004616:	eb49 0303 	adc.w	r3, r9, r3
 800461a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800462a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800462e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004632:	460b      	mov	r3, r1
 8004634:	18db      	adds	r3, r3, r3
 8004636:	653b      	str	r3, [r7, #80]	; 0x50
 8004638:	4613      	mov	r3, r2
 800463a:	eb42 0303 	adc.w	r3, r2, r3
 800463e:	657b      	str	r3, [r7, #84]	; 0x54
 8004640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004648:	f7fb fe1a 	bl	8000280 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <UART_SetConfig+0x2d4>)
 8004652:	fba3 2302 	umull	r2, r3, r3, r2
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	011c      	lsls	r4, r3, #4
 800465a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004664:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800466c:	4642      	mov	r2, r8
 800466e:	464b      	mov	r3, r9
 8004670:	1891      	adds	r1, r2, r2
 8004672:	64b9      	str	r1, [r7, #72]	; 0x48
 8004674:	415b      	adcs	r3, r3
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800467c:	4641      	mov	r1, r8
 800467e:	eb12 0a01 	adds.w	sl, r2, r1
 8004682:	4649      	mov	r1, r9
 8004684:	eb43 0b01 	adc.w	fp, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800469c:	4692      	mov	sl, r2
 800469e:	469b      	mov	fp, r3
 80046a0:	4643      	mov	r3, r8
 80046a2:	eb1a 0303 	adds.w	r3, sl, r3
 80046a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046aa:	464b      	mov	r3, r9
 80046ac:	eb4b 0303 	adc.w	r3, fp, r3
 80046b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046c8:	460b      	mov	r3, r1
 80046ca:	18db      	adds	r3, r3, r3
 80046cc:	643b      	str	r3, [r7, #64]	; 0x40
 80046ce:	4613      	mov	r3, r2
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
 80046d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046de:	f7fb fdcf 	bl	8000280 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <UART_SetConfig+0x2d4>)
 80046ea:	fba3 2301 	umull	r2, r3, r3, r1
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2264      	movs	r2, #100	; 0x64
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	1acb      	subs	r3, r1, r3
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <UART_SetConfig+0x2d4>)
 8004700:	fba3 2302 	umull	r2, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800470c:	441c      	add	r4, r3
 800470e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004718:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800471c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	1891      	adds	r1, r2, r2
 8004726:	63b9      	str	r1, [r7, #56]	; 0x38
 8004728:	415b      	adcs	r3, r3
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800472c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004730:	4641      	mov	r1, r8
 8004732:	1851      	adds	r1, r2, r1
 8004734:	6339      	str	r1, [r7, #48]	; 0x30
 8004736:	4649      	mov	r1, r9
 8004738:	414b      	adcs	r3, r1
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004748:	4659      	mov	r1, fp
 800474a:	00cb      	lsls	r3, r1, #3
 800474c:	4651      	mov	r1, sl
 800474e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004752:	4651      	mov	r1, sl
 8004754:	00ca      	lsls	r2, r1, #3
 8004756:	4610      	mov	r0, r2
 8004758:	4619      	mov	r1, r3
 800475a:	4603      	mov	r3, r0
 800475c:	4642      	mov	r2, r8
 800475e:	189b      	adds	r3, r3, r2
 8004760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004764:	464b      	mov	r3, r9
 8004766:	460a      	mov	r2, r1
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800477c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004784:	460b      	mov	r3, r1
 8004786:	18db      	adds	r3, r3, r3
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
 800478a:	4613      	mov	r3, r2
 800478c:	eb42 0303 	adc.w	r3, r2, r3
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800479a:	f7fb fd71 	bl	8000280 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <UART_SetConfig+0x2d4>)
 80047a4:	fba3 1302 	umull	r1, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2164      	movs	r1, #100	; 0x64
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <UART_SetConfig+0x2d4>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	f003 0207 	and.w	r2, r3, #7
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4422      	add	r2, r4
 80047ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047cc:	e105      	b.n	80049da <UART_SetConfig+0x4d6>
 80047ce:	bf00      	nop
 80047d0:	40011000 	.word	0x40011000
 80047d4:	40011400 	.word	0x40011400
 80047d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e0:	2200      	movs	r2, #0
 80047e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ee:	4642      	mov	r2, r8
 80047f0:	464b      	mov	r3, r9
 80047f2:	1891      	adds	r1, r2, r2
 80047f4:	6239      	str	r1, [r7, #32]
 80047f6:	415b      	adcs	r3, r3
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
 80047fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047fe:	4641      	mov	r1, r8
 8004800:	1854      	adds	r4, r2, r1
 8004802:	4649      	mov	r1, r9
 8004804:	eb43 0501 	adc.w	r5, r3, r1
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	00eb      	lsls	r3, r5, #3
 8004812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004816:	00e2      	lsls	r2, r4, #3
 8004818:	4614      	mov	r4, r2
 800481a:	461d      	mov	r5, r3
 800481c:	4643      	mov	r3, r8
 800481e:	18e3      	adds	r3, r4, r3
 8004820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004824:	464b      	mov	r3, r9
 8004826:	eb45 0303 	adc.w	r3, r5, r3
 800482a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800483a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800484a:	4629      	mov	r1, r5
 800484c:	008b      	lsls	r3, r1, #2
 800484e:	4621      	mov	r1, r4
 8004850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004854:	4621      	mov	r1, r4
 8004856:	008a      	lsls	r2, r1, #2
 8004858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800485c:	f7fb fd10 	bl	8000280 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b60      	ldr	r3, [pc, #384]	; (80049e8 <UART_SetConfig+0x4e4>)
 8004866:	fba3 2302 	umull	r2, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	011c      	lsls	r4, r3, #4
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004878:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800487c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	61b9      	str	r1, [r7, #24]
 8004888:	415b      	adcs	r3, r3
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004890:	4641      	mov	r1, r8
 8004892:	1851      	adds	r1, r2, r1
 8004894:	6139      	str	r1, [r7, #16]
 8004896:	4649      	mov	r1, r9
 8004898:	414b      	adcs	r3, r1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a8:	4659      	mov	r1, fp
 80048aa:	00cb      	lsls	r3, r1, #3
 80048ac:	4651      	mov	r1, sl
 80048ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b2:	4651      	mov	r1, sl
 80048b4:	00ca      	lsls	r2, r1, #3
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	4642      	mov	r2, r8
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048c4:	464b      	mov	r3, r9
 80048c6:	460a      	mov	r2, r1
 80048c8:	eb42 0303 	adc.w	r3, r2, r3
 80048cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048e8:	4649      	mov	r1, r9
 80048ea:	008b      	lsls	r3, r1, #2
 80048ec:	4641      	mov	r1, r8
 80048ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f2:	4641      	mov	r1, r8
 80048f4:	008a      	lsls	r2, r1, #2
 80048f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048fa:	f7fb fcc1 	bl	8000280 <__aeabi_uldivmod>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <UART_SetConfig+0x4e4>)
 8004904:	fba3 1302 	umull	r1, r3, r3, r2
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	2164      	movs	r1, #100	; 0x64
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	3332      	adds	r3, #50	; 0x32
 8004916:	4a34      	ldr	r2, [pc, #208]	; (80049e8 <UART_SetConfig+0x4e4>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004922:	441c      	add	r4, r3
 8004924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004928:	2200      	movs	r2, #0
 800492a:	673b      	str	r3, [r7, #112]	; 0x70
 800492c:	677a      	str	r2, [r7, #116]	; 0x74
 800492e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004932:	4642      	mov	r2, r8
 8004934:	464b      	mov	r3, r9
 8004936:	1891      	adds	r1, r2, r2
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	415b      	adcs	r3, r3
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004942:	4641      	mov	r1, r8
 8004944:	1851      	adds	r1, r2, r1
 8004946:	6039      	str	r1, [r7, #0]
 8004948:	4649      	mov	r1, r9
 800494a:	414b      	adcs	r3, r1
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800495a:	4659      	mov	r1, fp
 800495c:	00cb      	lsls	r3, r1, #3
 800495e:	4651      	mov	r1, sl
 8004960:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004964:	4651      	mov	r1, sl
 8004966:	00ca      	lsls	r2, r1, #3
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	4603      	mov	r3, r0
 800496e:	4642      	mov	r2, r8
 8004970:	189b      	adds	r3, r3, r2
 8004972:	66bb      	str	r3, [r7, #104]	; 0x68
 8004974:	464b      	mov	r3, r9
 8004976:	460a      	mov	r2, r1
 8004978:	eb42 0303 	adc.w	r3, r2, r3
 800497c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	663b      	str	r3, [r7, #96]	; 0x60
 8004988:	667a      	str	r2, [r7, #100]	; 0x64
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004996:	4649      	mov	r1, r9
 8004998:	008b      	lsls	r3, r1, #2
 800499a:	4641      	mov	r1, r8
 800499c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a0:	4641      	mov	r1, r8
 80049a2:	008a      	lsls	r2, r1, #2
 80049a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049a8:	f7fb fc6a 	bl	8000280 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <UART_SetConfig+0x4e4>)
 80049b2:	fba3 1302 	umull	r1, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2164      	movs	r1, #100	; 0x64
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	3332      	adds	r3, #50	; 0x32
 80049c4:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <UART_SetConfig+0x4e4>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4422      	add	r2, r4
 80049d8:	609a      	str	r2, [r3, #8]
}
 80049da:	bf00      	nop
 80049dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	51eb851f 	.word	0x51eb851f

080049ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ec:	b084      	sub	sp, #16
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	f107 001c 	add.w	r0, r7, #28
 80049fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d122      	bne.n	8004a4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d105      	bne.n	8004a3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f001 fbee 	bl	8006220 <USB_CoreReset>
 8004a44:	4603      	mov	r3, r0
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e01a      	b.n	8004a80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f001 fbe2 	bl	8006220 <USB_CoreReset>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
 8004a72:	e005      	b.n	8004a80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10b      	bne.n	8004a9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f043 0206 	orr.w	r2, r3, #6
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f043 0220 	orr.w	r2, r3, #32
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aaa:	b004      	add	sp, #16
 8004aac:	4770      	bx	lr
	...

08004ab0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d165      	bne.n	8004b90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a41      	ldr	r2, [pc, #260]	; (8004bcc <USB_SetTurnaroundTime+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d906      	bls.n	8004ada <USB_SetTurnaroundTime+0x2a>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <USB_SetTurnaroundTime+0x120>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d202      	bcs.n	8004ada <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ad4:	230f      	movs	r3, #15
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e062      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a3c      	ldr	r2, [pc, #240]	; (8004bd0 <USB_SetTurnaroundTime+0x120>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d306      	bcc.n	8004af0 <USB_SetTurnaroundTime+0x40>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a3b      	ldr	r2, [pc, #236]	; (8004bd4 <USB_SetTurnaroundTime+0x124>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d202      	bcs.n	8004af0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aea:	230e      	movs	r3, #14
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	e057      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a38      	ldr	r2, [pc, #224]	; (8004bd4 <USB_SetTurnaroundTime+0x124>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d306      	bcc.n	8004b06 <USB_SetTurnaroundTime+0x56>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a37      	ldr	r2, [pc, #220]	; (8004bd8 <USB_SetTurnaroundTime+0x128>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d202      	bcs.n	8004b06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b00:	230d      	movs	r3, #13
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e04c      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a33      	ldr	r2, [pc, #204]	; (8004bd8 <USB_SetTurnaroundTime+0x128>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d306      	bcc.n	8004b1c <USB_SetTurnaroundTime+0x6c>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4a32      	ldr	r2, [pc, #200]	; (8004bdc <USB_SetTurnaroundTime+0x12c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d802      	bhi.n	8004b1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b16:	230c      	movs	r3, #12
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e041      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <USB_SetTurnaroundTime+0x12c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d906      	bls.n	8004b32 <USB_SetTurnaroundTime+0x82>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4a2e      	ldr	r2, [pc, #184]	; (8004be0 <USB_SetTurnaroundTime+0x130>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d802      	bhi.n	8004b32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b2c:	230b      	movs	r3, #11
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e036      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4a2a      	ldr	r2, [pc, #168]	; (8004be0 <USB_SetTurnaroundTime+0x130>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d906      	bls.n	8004b48 <USB_SetTurnaroundTime+0x98>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4a29      	ldr	r2, [pc, #164]	; (8004be4 <USB_SetTurnaroundTime+0x134>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d802      	bhi.n	8004b48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b42:	230a      	movs	r3, #10
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e02b      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <USB_SetTurnaroundTime+0x134>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d906      	bls.n	8004b5e <USB_SetTurnaroundTime+0xae>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4a25      	ldr	r2, [pc, #148]	; (8004be8 <USB_SetTurnaroundTime+0x138>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d202      	bcs.n	8004b5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b58:	2309      	movs	r3, #9
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e020      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <USB_SetTurnaroundTime+0x138>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d306      	bcc.n	8004b74 <USB_SetTurnaroundTime+0xc4>
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4a20      	ldr	r2, [pc, #128]	; (8004bec <USB_SetTurnaroundTime+0x13c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d802      	bhi.n	8004b74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b6e:	2308      	movs	r3, #8
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	e015      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <USB_SetTurnaroundTime+0x13c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d906      	bls.n	8004b8a <USB_SetTurnaroundTime+0xda>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <USB_SetTurnaroundTime+0x140>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d202      	bcs.n	8004b8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b84:	2307      	movs	r3, #7
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e00a      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b8a:	2306      	movs	r3, #6
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e007      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b96:	2309      	movs	r3, #9
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e001      	b.n	8004ba0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b9c:	2309      	movs	r3, #9
 8004b9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	029b      	lsls	r3, r3, #10
 8004bb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	00d8acbf 	.word	0x00d8acbf
 8004bd0:	00e4e1c0 	.word	0x00e4e1c0
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	01067380 	.word	0x01067380
 8004bdc:	011a499f 	.word	0x011a499f
 8004be0:	01312cff 	.word	0x01312cff
 8004be4:	014ca43f 	.word	0x014ca43f
 8004be8:	016e3600 	.word	0x016e3600
 8004bec:	01a6ab1f 	.word	0x01a6ab1f
 8004bf0:	01e84800 	.word	0x01e84800

08004bf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f043 0201 	orr.w	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 0201 	bic.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d115      	bne.n	8004c86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c66:	2001      	movs	r0, #1
 8004c68:	f7fc fb12 	bl	8001290 <HAL_Delay>
      ms++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 fa45 	bl	8006102 <USB_GetMode>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d01e      	beq.n	8004cbc <USB_SetCurrentMode+0x84>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b31      	cmp	r3, #49	; 0x31
 8004c82:	d9f0      	bls.n	8004c66 <USB_SetCurrentMode+0x2e>
 8004c84:	e01a      	b.n	8004cbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d115      	bne.n	8004cb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c98:	2001      	movs	r0, #1
 8004c9a:	f7fc faf9 	bl	8001290 <HAL_Delay>
      ms++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 fa2c 	bl	8006102 <USB_GetMode>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <USB_SetCurrentMode+0x84>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b31      	cmp	r3, #49	; 0x31
 8004cb4:	d9f0      	bls.n	8004c98 <USB_SetCurrentMode+0x60>
 8004cb6:	e001      	b.n	8004cbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e005      	b.n	8004cc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b32      	cmp	r3, #50	; 0x32
 8004cc0:	d101      	bne.n	8004cc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	e009      	b.n	8004d04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3340      	adds	r3, #64	; 0x40
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3301      	adds	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b0e      	cmp	r3, #14
 8004d08:	d9f2      	bls.n	8004cf0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d11c      	bne.n	8004d4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1e:	f043 0302 	orr.w	r3, r3, #2
 8004d22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
 8004d48:	e00b      	b.n	8004d62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d68:	461a      	mov	r2, r3
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d74:	4619      	mov	r1, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	680b      	ldr	r3, [r1, #0]
 8004d80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10c      	bne.n	8004da2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f965 	bl	8005060 <USB_SetDevSpeed>
 8004d96:	e008      	b.n	8004daa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d98:	2101      	movs	r1, #1
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f960 	bl	8005060 <USB_SetDevSpeed>
 8004da0:	e003      	b.n	8004daa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004da2:	2103      	movs	r1, #3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f95b 	bl	8005060 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004daa:	2110      	movs	r1, #16
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f8f3 	bl	8004f98 <USB_FlushTxFifo>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f91f 	bl	8005000 <USB_FlushRxFifo>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	461a      	mov	r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	e043      	b.n	8004e7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e0c:	d118      	bne.n	8004e40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	461a      	mov	r2, r3
 8004e22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	e013      	b.n	8004e52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	461a      	mov	r2, r3
 8004e38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e008      	b.n	8004e52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2300      	movs	r3, #0
 8004e62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	461a      	mov	r2, r3
 8004e72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d3b7      	bcc.n	8004df6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	e043      	b.n	8004f14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea2:	d118      	bne.n	8004ed6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e013      	b.n	8004ee8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	e008      	b.n	8004ee8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	461a      	mov	r2, r3
 8004f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3301      	adds	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d3b7      	bcc.n	8004e8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d105      	bne.n	8004f50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f043 0210 	orr.w	r2, r3, #16
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <USB_DevInit+0x2c4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f043 0208 	orr.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d107      	bne.n	8004f84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f7c:	f043 0304 	orr.w	r3, r3, #4
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f90:	b004      	add	sp, #16
 8004f92:	4770      	bx	lr
 8004f94:	803c3800 	.word	0x803c3800

08004f98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <USB_FlushTxFifo+0x64>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e01b      	b.n	8004ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	daf2      	bge.n	8004fa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	019b      	lsls	r3, r3, #6
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <USB_FlushTxFifo+0x64>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e006      	b.n	8004ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d0f0      	beq.n	8004fd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	00030d40 	.word	0x00030d40

08005000 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4a11      	ldr	r2, [pc, #68]	; (800505c <USB_FlushRxFifo+0x5c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e018      	b.n	8005050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	daf2      	bge.n	800500c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2210      	movs	r2, #16
 800502e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <USB_FlushRxFifo+0x5c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e006      	b.n	8005050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b10      	cmp	r3, #16
 800504c:	d0f0      	beq.n	8005030 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	00030d40 	.word	0x00030d40

08005060 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005080:	4313      	orrs	r3, r2
 8005082:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0306 	and.w	r3, r3, #6
 80050aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]
 80050b6:	e00a      	b.n	80050ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d002      	beq.n	80050c4 <USB_GetDevSpeed+0x32>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b06      	cmp	r3, #6
 80050c2:	d102      	bne.n	80050ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050c4:	2302      	movs	r3, #2
 80050c6:	75fb      	strb	r3, [r7, #23]
 80050c8:	e001      	b.n	80050ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050ca:	230f      	movs	r3, #15
 80050cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d13a      	bne.n	800516e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	2101      	movs	r1, #1
 800510a:	fa01 f303 	lsl.w	r3, r1, r3
 800510e:	b29b      	uxth	r3, r3
 8005110:	68f9      	ldr	r1, [r7, #12]
 8005112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005116:	4313      	orrs	r3, r2
 8005118:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d155      	bne.n	80051dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	791b      	ldrb	r3, [r3, #4]
 800514a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800514c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	059b      	lsls	r3, r3, #22
 8005152:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005154:	4313      	orrs	r3, r2
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e036      	b.n	80051dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	2101      	movs	r1, #1
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	68f9      	ldr	r1, [r7, #12]
 8005188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518c:	4313      	orrs	r3, r2
 800518e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d11a      	bne.n	80051dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	791b      	ldrb	r3, [r3, #4]
 80051c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051c2:	430b      	orrs	r3, r1
 80051c4:	4313      	orrs	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d161      	bne.n	80052cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521e:	d11f      	bne.n	8005260 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800523e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800525e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	b29b      	uxth	r3, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005280:	4013      	ands	r3, r2
 8005282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	2101      	movs	r1, #1
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a4:	4013      	ands	r3, r2
 80052a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	0159      	lsls	r1, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	440b      	add	r3, r1
 80052be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c2:	4619      	mov	r1, r3
 80052c4:	4b35      	ldr	r3, [pc, #212]	; (800539c <USB_DeactivateEndpoint+0x1b0>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
 80052ca:	e060      	b.n	800538e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e2:	d11f      	bne.n	8005324 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005302:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	2101      	movs	r1, #1
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	43db      	mvns	r3, r3
 800533e:	68f9      	ldr	r1, [r7, #12]
 8005340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005344:	4013      	ands	r3, r2
 8005346:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	041b      	lsls	r3, r3, #16
 8005360:	43db      	mvns	r3, r3
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005368:	4013      	ands	r3, r2
 800536a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	0159      	lsls	r1, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	440b      	add	r3, r1
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	4619      	mov	r1, r3
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <USB_DeactivateEndpoint+0x1b4>)
 800538a:	4013      	ands	r3, r2
 800538c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	ec337800 	.word	0xec337800
 80053a0:	eff37800 	.word	0xeff37800

080053a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	f040 815c 	bne.w	800567e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d132      	bne.n	8005434 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005410:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	0cdb      	lsrs	r3, r3, #19
 800542e:	04db      	lsls	r3, r3, #19
 8005430:	6113      	str	r3, [r2, #16]
 8005432:	e074      	b.n	800551e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	0cdb      	lsrs	r3, r3, #19
 8005450:	04db      	lsls	r3, r3, #19
 8005452:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005472:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6999      	ldr	r1, [r3, #24]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	440b      	add	r3, r1
 8005490:	1e59      	subs	r1, r3, #1
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	fbb1 f3f3 	udiv	r3, r1, r3
 800549a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800549c:	4b9d      	ldr	r3, [pc, #628]	; (8005714 <USB_EPStartXfer+0x370>)
 800549e:	400b      	ands	r3, r1
 80054a0:	69b9      	ldr	r1, [r7, #24]
 80054a2:	0148      	lsls	r0, r1, #5
 80054a4:	69f9      	ldr	r1, [r7, #28]
 80054a6:	4401      	add	r1, r0
 80054a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054ac:	4313      	orrs	r3, r2
 80054ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c6:	69b9      	ldr	r1, [r7, #24]
 80054c8:	0148      	lsls	r0, r1, #5
 80054ca:	69f9      	ldr	r1, [r7, #28]
 80054cc:	4401      	add	r1, r0
 80054ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054d2:	4313      	orrs	r3, r2
 80054d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	791b      	ldrb	r3, [r3, #4]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d11f      	bne.n	800551e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005518:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800551c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d14b      	bne.n	80055bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d009      	beq.n	8005540 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	461a      	mov	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	791b      	ldrb	r3, [r3, #4]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d128      	bne.n	800559a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d110      	bne.n	800557a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	440a      	add	r2, r1
 800556e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	e00f      	b.n	800559a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005598:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e133      	b.n	8005824 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	791b      	ldrb	r3, [r3, #4]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d015      	beq.n	8005610 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 811b 	beq.w	8005824 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	2101      	movs	r1, #1
 8005600:	fa01 f303 	lsl.w	r3, r1, r3
 8005604:	69f9      	ldr	r1, [r7, #28]
 8005606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800560a:	4313      	orrs	r3, r2
 800560c:	634b      	str	r3, [r1, #52]	; 0x34
 800560e:	e109      	b.n	8005824 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d110      	bne.n	8005642 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	e00f      	b.n	8005662 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005660:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6919      	ldr	r1, [r3, #16]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	b298      	uxth	r0, r3
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	4603      	mov	r3, r0
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fade 	bl	8005c38 <USB_WritePacket>
 800567c:	e0d2      	b.n	8005824 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005698:	0cdb      	lsrs	r3, r3, #19
 800569a:	04db      	lsls	r3, r3, #19
 800569c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d126      	bne.n	8005718 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e0:	69b9      	ldr	r1, [r7, #24]
 80056e2:	0148      	lsls	r0, r1, #5
 80056e4:	69f9      	ldr	r1, [r7, #28]
 80056e6:	4401      	add	r1, r0
 80056e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056ec:	4313      	orrs	r3, r2
 80056ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800570e:	6113      	str	r3, [r2, #16]
 8005710:	e03a      	b.n	8005788 <USB_EPStartXfer+0x3e4>
 8005712:	bf00      	nop
 8005714:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4413      	add	r3, r2
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	8afa      	ldrh	r2, [r7, #22]
 8005734:	fb03 f202 	mul.w	r2, r3, r2
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	8afb      	ldrh	r3, [r7, #22]
 800574c:	04d9      	lsls	r1, r3, #19
 800574e:	4b38      	ldr	r3, [pc, #224]	; (8005830 <USB_EPStartXfer+0x48c>)
 8005750:	400b      	ands	r3, r1
 8005752:	69b9      	ldr	r1, [r7, #24]
 8005754:	0148      	lsls	r0, r1, #5
 8005756:	69f9      	ldr	r1, [r7, #28]
 8005758:	4401      	add	r1, r0
 800575a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800575e:	4313      	orrs	r3, r2
 8005760:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	0148      	lsls	r0, r1, #5
 800577c:	69f9      	ldr	r1, [r7, #28]
 800577e:	4401      	add	r1, r0
 8005780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10d      	bne.n	80057aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6919      	ldr	r1, [r3, #16]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	460a      	mov	r2, r1
 80057a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	791b      	ldrb	r3, [r3, #4]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d128      	bne.n	8005804 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d110      	bne.n	80057e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	e00f      	b.n	8005804 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	1ff80000 	.word	0x1ff80000

08005834 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2b01      	cmp	r3, #1
 8005852:	f040 80ce 	bne.w	80059f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d132      	bne.n	80058c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005878:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800587c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005880:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058bc:	0cdb      	lsrs	r3, r3, #19
 80058be:	04db      	lsls	r3, r3, #19
 80058c0:	6113      	str	r3, [r2, #16]
 80058c2:	e04e      	b.n	8005962 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058de:	0cdb      	lsrs	r3, r3, #19
 80058e0:	04db      	lsls	r3, r3, #19
 80058e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005902:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005906:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d903      	bls.n	800591c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	0151      	lsls	r1, r2, #5
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	440a      	add	r2, r1
 8005932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800593a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005948:	691a      	ldr	r2, [r3, #16]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005952:	6939      	ldr	r1, [r7, #16]
 8005954:	0148      	lsls	r0, r1, #5
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	4401      	add	r1, r0
 800595a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800595e:	4313      	orrs	r3, r2
 8005960:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d11e      	bne.n	80059a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d009      	beq.n	8005984 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	461a      	mov	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	e097      	b.n	8005ad6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 8083 	beq.w	8005ad6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	2101      	movs	r1, #1
 80059e2:	fa01 f303 	lsl.w	r3, r1, r3
 80059e6:	6979      	ldr	r1, [r7, #20]
 80059e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ec:	4313      	orrs	r3, r2
 80059ee:	634b      	str	r3, [r1, #52]	; 0x34
 80059f0:	e071      	b.n	8005ad6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0c:	0cdb      	lsrs	r3, r3, #19
 8005a0e:	04db      	lsls	r3, r3, #19
 8005a10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a84:	6939      	ldr	r1, [r7, #16]
 8005a86:	0148      	lsls	r0, r1, #5
 8005a88:	6979      	ldr	r1, [r7, #20]
 8005a8a:	4401      	add	r1, r0
 8005a8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a90:	4313      	orrs	r3, r2
 8005a92:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d10d      	bne.n	8005ab6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6919      	ldr	r1, [r3, #16]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	460a      	mov	r2, r1
 8005ab4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d14a      	bne.n	8005b98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b1a:	f040 8086 	bne.w	8005c2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	7812      	ldrb	r2, [r2, #0]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d902      	bls.n	8005b7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	75fb      	strb	r3, [r7, #23]
          break;
 8005b7a:	e056      	b.n	8005c2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b94:	d0e7      	beq.n	8005b66 <USB_EPStopXfer+0x82>
 8005b96:	e048      	b.n	8005c2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb0:	d13b      	bne.n	8005c2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d902      	bls.n	8005c10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c0e:	e00c      	b.n	8005c2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c28:	d0e7      	beq.n	8005bfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b089      	sub	sp, #36	; 0x24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4611      	mov	r1, r2
 8005c44:	461a      	mov	r2, r3
 8005c46:	460b      	mov	r3, r1
 8005c48:	71fb      	strb	r3, [r7, #7]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d123      	bne.n	8005ca6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c5e:	88bb      	ldrh	r3, [r7, #4]
 8005c60:	3303      	adds	r3, #3
 8005c62:	089b      	lsrs	r3, r3, #2
 8005c64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c66:	2300      	movs	r3, #0
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	e018      	b.n	8005c9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	031a      	lsls	r2, r3, #12
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c78:	461a      	mov	r2, r3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	3301      	adds	r3, #1
 8005c84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3301      	adds	r3, #1
 8005c96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d3e2      	bcc.n	8005c6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3724      	adds	r7, #36	; 0x24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b08b      	sub	sp, #44	; 0x2c
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cda:	2300      	movs	r3, #0
 8005cdc:	623b      	str	r3, [r7, #32]
 8005cde:	e014      	b.n	8005d0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	3301      	adds	r3, #1
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	3301      	adds	r3, #1
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	3301      	adds	r3, #1
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	6a3a      	ldr	r2, [r7, #32]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d3e6      	bcc.n	8005ce0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d12:	8bfb      	ldrh	r3, [r7, #30]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01e      	beq.n	8005d56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d22:	461a      	mov	r2, r3
 8005d24:	f107 0310 	add.w	r3, r7, #16
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	3301      	adds	r3, #1
 8005d42:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	3301      	adds	r3, #1
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d4a:	8bfb      	ldrh	r3, [r7, #30]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d50:	8bfb      	ldrh	r3, [r7, #30]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ea      	bne.n	8005d2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	372c      	adds	r7, #44	; 0x2c
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d12c      	bne.n	8005dda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	db12      	blt.n	8005db8 <USB_EPSetStall+0x54>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00f      	beq.n	8005db8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005db6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e02b      	b.n	8005e32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	db12      	blt.n	8005e12 <USB_EPSetStall+0xae>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00f      	beq.n	8005e12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d128      	bne.n	8005eae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	791b      	ldrb	r3, [r3, #4]
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d003      	beq.n	8005e8c <USB_EPClearStall+0x4c>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	791b      	ldrb	r3, [r3, #4]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d138      	bne.n	8005efe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e027      	b.n	8005efe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ecc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d003      	beq.n	8005ede <USB_EPClearStall+0x9e>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	791b      	ldrb	r3, [r3, #4]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d10f      	bne.n	8005efe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f40:	68f9      	ldr	r1, [r7, #12]
 8005f42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f46:	4313      	orrs	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f86:	f023 0302 	bic.w	r3, r3, #2
 8005f8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fb4:	f023 0303 	bic.w	r3, r3, #3
 8005fb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	4013      	ands	r3, r2
 8006024:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	0c1b      	lsrs	r3, r3, #16
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	4013      	ands	r3, r2
 8006058:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	b29b      	uxth	r3, r3
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006098:	68bb      	ldr	r3, [r7, #8]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b087      	sub	sp, #28
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	01db      	lsls	r3, r3, #7
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4013      	ands	r3, r2
 80060f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060f4:	68bb      	ldr	r3, [r7, #8]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 0301 	and.w	r3, r3, #1
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006138:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800613c:	f023 0307 	bic.w	r3, r3, #7
 8006140:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006154:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	460b      	mov	r3, r1
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	333c      	adds	r3, #60	; 0x3c
 800617a:	3304      	adds	r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4a26      	ldr	r2, [pc, #152]	; (800621c <USB_EP0_OutStart+0xb8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d90a      	bls.n	800619e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006198:	d101      	bne.n	800619e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e037      	b.n	800620e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	461a      	mov	r2, r3
 80061a6:	2300      	movs	r3, #0
 80061a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061cc:	f043 0318 	orr.w	r3, r3, #24
 80061d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061e6:	7afb      	ldrb	r3, [r7, #11]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d10f      	bne.n	800620c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006206:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800620a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	4f54300a 	.word	0x4f54300a

08006220 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4a13      	ldr	r2, [pc, #76]	; (8006284 <USB_CoreReset+0x64>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e01b      	b.n	8006276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	daf2      	bge.n	800622c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f043 0201 	orr.w	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a09      	ldr	r2, [pc, #36]	; (8006284 <USB_CoreReset+0x64>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d901      	bls.n	8006268 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e006      	b.n	8006276 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d0f0      	beq.n	8006256 <USB_CoreReset+0x36>

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	00030d40 	.word	0x00030d40

08006288 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006294:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006298:	f002 fc94 	bl	8008bc4 <USBD_static_malloc>
 800629c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	32b0      	adds	r2, #176	; 0xb0
 80062ae:	2100      	movs	r1, #0
 80062b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80062b4:	2302      	movs	r3, #2
 80062b6:	e0d4      	b.n	8006462 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80062b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80062bc:	2100      	movs	r1, #0
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f002 fcee 	bl	8008ca0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32b0      	adds	r2, #176	; 0xb0
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	32b0      	adds	r2, #176	; 0xb0
 80062de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7c1b      	ldrb	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d138      	bne.n	8006362 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062f0:	4b5e      	ldr	r3, [pc, #376]	; (800646c <USBD_CDC_Init+0x1e4>)
 80062f2:	7819      	ldrb	r1, [r3, #0]
 80062f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062f8:	2202      	movs	r2, #2
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f002 fb3f 	bl	800897e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006300:	4b5a      	ldr	r3, [pc, #360]	; (800646c <USBD_CDC_Init+0x1e4>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 020f 	and.w	r2, r3, #15
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3324      	adds	r3, #36	; 0x24
 8006316:	2201      	movs	r2, #1
 8006318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800631a:	4b55      	ldr	r3, [pc, #340]	; (8006470 <USBD_CDC_Init+0x1e8>)
 800631c:	7819      	ldrb	r1, [r3, #0]
 800631e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006322:	2202      	movs	r2, #2
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f002 fb2a 	bl	800897e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800632a:	4b51      	ldr	r3, [pc, #324]	; (8006470 <USBD_CDC_Init+0x1e8>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	f003 020f 	and.w	r2, r3, #15
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006342:	2201      	movs	r2, #1
 8006344:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006346:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <USBD_CDC_Init+0x1ec>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	3326      	adds	r3, #38	; 0x26
 800635c:	2210      	movs	r2, #16
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	e035      	b.n	80063ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006362:	4b42      	ldr	r3, [pc, #264]	; (800646c <USBD_CDC_Init+0x1e4>)
 8006364:	7819      	ldrb	r1, [r3, #0]
 8006366:	2340      	movs	r3, #64	; 0x40
 8006368:	2202      	movs	r2, #2
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f002 fb07 	bl	800897e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006370:	4b3e      	ldr	r3, [pc, #248]	; (800646c <USBD_CDC_Init+0x1e4>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	f003 020f 	and.w	r2, r3, #15
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	440b      	add	r3, r1
 8006384:	3324      	adds	r3, #36	; 0x24
 8006386:	2201      	movs	r2, #1
 8006388:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800638a:	4b39      	ldr	r3, [pc, #228]	; (8006470 <USBD_CDC_Init+0x1e8>)
 800638c:	7819      	ldrb	r1, [r3, #0]
 800638e:	2340      	movs	r3, #64	; 0x40
 8006390:	2202      	movs	r2, #2
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f002 faf3 	bl	800897e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006398:	4b35      	ldr	r3, [pc, #212]	; (8006470 <USBD_CDC_Init+0x1e8>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063b0:	2201      	movs	r2, #1
 80063b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063b4:	4b2f      	ldr	r3, [pc, #188]	; (8006474 <USBD_CDC_Init+0x1ec>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	3326      	adds	r3, #38	; 0x26
 80063ca:	2210      	movs	r2, #16
 80063cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063ce:	4b29      	ldr	r3, [pc, #164]	; (8006474 <USBD_CDC_Init+0x1ec>)
 80063d0:	7819      	ldrb	r1, [r3, #0]
 80063d2:	2308      	movs	r3, #8
 80063d4:	2203      	movs	r2, #3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f002 fad1 	bl	800897e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80063dc:	4b25      	ldr	r3, [pc, #148]	; (8006474 <USBD_CDC_Init+0x1ec>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f003 020f 	and.w	r2, r3, #15
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	3324      	adds	r3, #36	; 0x24
 80063f2:	2201      	movs	r2, #1
 80063f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	33b0      	adds	r3, #176	; 0xb0
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800642c:	2302      	movs	r3, #2
 800642e:	e018      	b.n	8006462 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7c1b      	ldrb	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006438:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <USBD_CDC_Init+0x1e8>)
 800643a:	7819      	ldrb	r1, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f002 fb88 	bl	8008b5c <USBD_LL_PrepareReceive>
 800644c:	e008      	b.n	8006460 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800644e:	4b08      	ldr	r3, [pc, #32]	; (8006470 <USBD_CDC_Init+0x1e8>)
 8006450:	7819      	ldrb	r1, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006458:	2340      	movs	r3, #64	; 0x40
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f002 fb7e 	bl	8008b5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000093 	.word	0x20000093
 8006470:	20000094 	.word	0x20000094
 8006474:	20000095 	.word	0x20000095

08006478 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006484:	4b3a      	ldr	r3, [pc, #232]	; (8006570 <USBD_CDC_DeInit+0xf8>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f002 fa9d 	bl	80089ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006490:	4b37      	ldr	r3, [pc, #220]	; (8006570 <USBD_CDC_DeInit+0xf8>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	3324      	adds	r3, #36	; 0x24
 80064a6:	2200      	movs	r2, #0
 80064a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80064aa:	4b32      	ldr	r3, [pc, #200]	; (8006574 <USBD_CDC_DeInit+0xfc>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f002 fa8a 	bl	80089ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80064b6:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <USBD_CDC_DeInit+0xfc>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f003 020f 	and.w	r2, r3, #15
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064ce:	2200      	movs	r2, #0
 80064d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80064d2:	4b29      	ldr	r3, [pc, #164]	; (8006578 <USBD_CDC_DeInit+0x100>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f002 fa76 	bl	80089ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <USBD_CDC_DeInit+0x100>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f003 020f 	and.w	r2, r3, #15
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	3324      	adds	r3, #36	; 0x24
 80064f4:	2200      	movs	r2, #0
 80064f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80064f8:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <USBD_CDC_DeInit+0x100>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 020f 	and.w	r2, r3, #15
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	440b      	add	r3, r1
 800650c:	3326      	adds	r3, #38	; 0x26
 800650e:	2200      	movs	r2, #0
 8006510:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	32b0      	adds	r2, #176	; 0xb0
 800651c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01f      	beq.n	8006564 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	33b0      	adds	r3, #176	; 0xb0
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	32b0      	adds	r2, #176	; 0xb0
 8006542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006546:	4618      	mov	r0, r3
 8006548:	f002 fb4a 	bl	8008be0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	32b0      	adds	r2, #176	; 0xb0
 8006556:	2100      	movs	r1, #0
 8006558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000093 	.word	0x20000093
 8006574:	20000094 	.word	0x20000094
 8006578:	20000095 	.word	0x20000095

0800657c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	32b0      	adds	r2, #176	; 0xb0
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e0bf      	b.n	800672c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d050      	beq.n	800665a <USBD_CDC_Setup+0xde>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	f040 80af 	bne.w	800671c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	88db      	ldrh	r3, [r3, #6]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d03a      	beq.n	800663c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b25b      	sxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da1b      	bge.n	8006608 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	33b0      	adds	r3, #176	; 0xb0
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80065e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	88d2      	ldrh	r2, [r2, #6]
 80065ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88db      	ldrh	r3, [r3, #6]
 80065f2:	2b07      	cmp	r3, #7
 80065f4:	bf28      	it	cs
 80065f6:	2307      	movcs	r3, #7
 80065f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	89fa      	ldrh	r2, [r7, #14]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fd89 	bl	8008118 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006606:	e090      	b.n	800672a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	785a      	ldrb	r2, [r3, #1]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	88db      	ldrh	r3, [r3, #6]
 8006616:	2b3f      	cmp	r3, #63	; 0x3f
 8006618:	d803      	bhi.n	8006622 <USBD_CDC_Setup+0xa6>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	b2da      	uxtb	r2, r3
 8006620:	e000      	b.n	8006624 <USBD_CDC_Setup+0xa8>
 8006622:	2240      	movs	r2, #64	; 0x40
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800662a:	6939      	ldr	r1, [r7, #16]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006632:	461a      	mov	r2, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fd9b 	bl	8008170 <USBD_CtlPrepareRx>
      break;
 800663a:	e076      	b.n	800672a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	33b0      	adds	r3, #176	; 0xb0
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	7850      	ldrb	r0, [r2, #1]
 8006652:	2200      	movs	r2, #0
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	4798      	blx	r3
      break;
 8006658:	e067      	b.n	800672a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b0b      	cmp	r3, #11
 8006660:	d851      	bhi.n	8006706 <USBD_CDC_Setup+0x18a>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <USBD_CDC_Setup+0xec>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	08006699 	.word	0x08006699
 800666c:	08006715 	.word	0x08006715
 8006670:	08006707 	.word	0x08006707
 8006674:	08006707 	.word	0x08006707
 8006678:	08006707 	.word	0x08006707
 800667c:	08006707 	.word	0x08006707
 8006680:	08006707 	.word	0x08006707
 8006684:	08006707 	.word	0x08006707
 8006688:	08006707 	.word	0x08006707
 800668c:	08006707 	.word	0x08006707
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066ed 	.word	0x080066ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d107      	bne.n	80066b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066a4:	f107 030a 	add.w	r3, r7, #10
 80066a8:	2202      	movs	r2, #2
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 fd33 	bl	8008118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066b2:	e032      	b.n	800671a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fcbd 	bl	8008036 <USBD_CtlError>
            ret = USBD_FAIL;
 80066bc:	2303      	movs	r3, #3
 80066be:	75fb      	strb	r3, [r7, #23]
          break;
 80066c0:	e02b      	b.n	800671a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d107      	bne.n	80066de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066ce:	f107 030d 	add.w	r3, r7, #13
 80066d2:	2201      	movs	r2, #1
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 fd1e 	bl	8008118 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066dc:	e01d      	b.n	800671a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fca8 	bl	8008036 <USBD_CtlError>
            ret = USBD_FAIL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	75fb      	strb	r3, [r7, #23]
          break;
 80066ea:	e016      	b.n	800671a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d00f      	beq.n	8006718 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fc9b 	bl	8008036 <USBD_CtlError>
            ret = USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006704:	e008      	b.n	8006718 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 fc94 	bl	8008036 <USBD_CtlError>
          ret = USBD_FAIL;
 800670e:	2303      	movs	r3, #3
 8006710:	75fb      	strb	r3, [r7, #23]
          break;
 8006712:	e002      	b.n	800671a <USBD_CDC_Setup+0x19e>
          break;
 8006714:	bf00      	nop
 8006716:	e008      	b.n	800672a <USBD_CDC_Setup+0x1ae>
          break;
 8006718:	bf00      	nop
      }
      break;
 800671a:	e006      	b.n	800672a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 fc89 	bl	8008036 <USBD_CtlError>
      ret = USBD_FAIL;
 8006724:	2303      	movs	r3, #3
 8006726:	75fb      	strb	r3, [r7, #23]
      break;
 8006728:	bf00      	nop
  }

  return (uint8_t)ret;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006746:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	32b0      	adds	r2, #176	; 0xb0
 8006752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	e065      	b.n	800682a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	32b0      	adds	r2, #176	; 0xb0
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	3318      	adds	r3, #24
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d02f      	beq.n	80067e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 020f 	and.w	r2, r3, #15
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	3318      	adds	r3, #24
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	f003 010f 	and.w	r1, r3, #15
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	460b      	mov	r3, r1
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	440b      	add	r3, r1
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4403      	add	r3, r0
 80067b0:	3348      	adds	r3, #72	; 0x48
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80067b8:	fb01 f303 	mul.w	r3, r1, r3
 80067bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d112      	bne.n	80067e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	f003 020f 	and.w	r2, r3, #15
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	440b      	add	r3, r1
 80067d4:	3318      	adds	r3, #24
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067da:	78f9      	ldrb	r1, [r7, #3]
 80067dc:	2300      	movs	r3, #0
 80067de:	2200      	movs	r2, #0
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f002 f99a 	bl	8008b1a <USBD_LL_Transmit>
 80067e6:	e01f      	b.n	8006828 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	33b0      	adds	r3, #176	; 0xb0
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d010      	beq.n	8006828 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	33b0      	adds	r3, #176	; 0xb0
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	32b0      	adds	r2, #176	; 0xb0
 8006848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	32b0      	adds	r2, #176	; 0xb0
 8006858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006860:	2303      	movs	r3, #3
 8006862:	e01a      	b.n	800689a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f002 f998 	bl	8008b9e <USBD_LL_GetRxDataSize>
 800686e:	4602      	mov	r2, r0
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	33b0      	adds	r3, #176	; 0xb0
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006894:	4611      	mov	r1, r2
 8006896:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	32b0      	adds	r2, #176	; 0xb0
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e025      	b.n	8006910 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	33b0      	adds	r3, #176	; 0xb0
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01a      	beq.n	800690e <USBD_CDC_EP0_RxReady+0x6c>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068de:	2bff      	cmp	r3, #255	; 0xff
 80068e0:	d015      	beq.n	800690e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	33b0      	adds	r3, #176	; 0xb0
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80068fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006902:	b292      	uxth	r2, r2
 8006904:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	22ff      	movs	r2, #255	; 0xff
 800690a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006920:	2182      	movs	r1, #130	; 0x82
 8006922:	4818      	ldr	r0, [pc, #96]	; (8006984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006924:	f000 fd4f 	bl	80073c6 <USBD_GetEpDesc>
 8006928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800692a:	2101      	movs	r1, #1
 800692c:	4815      	ldr	r0, [pc, #84]	; (8006984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800692e:	f000 fd4a 	bl	80073c6 <USBD_GetEpDesc>
 8006932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006934:	2181      	movs	r1, #129	; 0x81
 8006936:	4813      	ldr	r0, [pc, #76]	; (8006984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006938:	f000 fd45 	bl	80073c6 <USBD_GetEpDesc>
 800693c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2210      	movs	r2, #16
 8006948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2200      	movs	r2, #0
 8006954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006958:	711a      	strb	r2, [r3, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d006      	beq.n	8006972 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800696c:	711a      	strb	r2, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2243      	movs	r2, #67	; 0x43
 8006976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006978:	4b02      	ldr	r3, [pc, #8]	; (8006984 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000050 	.word	0x20000050

08006988 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006990:	2182      	movs	r1, #130	; 0x82
 8006992:	4818      	ldr	r0, [pc, #96]	; (80069f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006994:	f000 fd17 	bl	80073c6 <USBD_GetEpDesc>
 8006998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800699a:	2101      	movs	r1, #1
 800699c:	4815      	ldr	r0, [pc, #84]	; (80069f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800699e:	f000 fd12 	bl	80073c6 <USBD_GetEpDesc>
 80069a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069a4:	2181      	movs	r1, #129	; 0x81
 80069a6:	4813      	ldr	r0, [pc, #76]	; (80069f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069a8:	f000 fd0d 	bl	80073c6 <USBD_GetEpDesc>
 80069ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2210      	movs	r2, #16
 80069b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d006      	beq.n	80069ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2200      	movs	r2, #0
 80069c4:	711a      	strb	r2, [r3, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f042 0202 	orr.w	r2, r2, #2
 80069cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	711a      	strb	r2, [r3, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f042 0202 	orr.w	r2, r2, #2
 80069e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2243      	movs	r2, #67	; 0x43
 80069e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069e8:	4b02      	ldr	r3, [pc, #8]	; (80069f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000050 	.word	0x20000050

080069f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a00:	2182      	movs	r1, #130	; 0x82
 8006a02:	4818      	ldr	r0, [pc, #96]	; (8006a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a04:	f000 fcdf 	bl	80073c6 <USBD_GetEpDesc>
 8006a08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4815      	ldr	r0, [pc, #84]	; (8006a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a0e:	f000 fcda 	bl	80073c6 <USBD_GetEpDesc>
 8006a12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a14:	2181      	movs	r1, #129	; 0x81
 8006a16:	4813      	ldr	r0, [pc, #76]	; (8006a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a18:	f000 fcd5 	bl	80073c6 <USBD_GetEpDesc>
 8006a1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2210      	movs	r2, #16
 8006a28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d006      	beq.n	8006a3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a38:	711a      	strb	r2, [r3, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d006      	beq.n	8006a52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a4c:	711a      	strb	r2, [r3, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2243      	movs	r2, #67	; 0x43
 8006a56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000050 	.word	0x20000050

08006a68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	220a      	movs	r2, #10
 8006a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a76:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	2000000c 	.word	0x2000000c

08006a88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e009      	b.n	8006ab0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	33b0      	adds	r3, #176	; 0xb0
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	32b0      	adds	r2, #176	; 0xb0
 8006ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e008      	b.n	8006af4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	32b0      	adds	r2, #176	; 0xb0
 8006b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e004      	b.n	8006b2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32b0      	adds	r2, #176	; 0xb0
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	32b0      	adds	r2, #176	; 0xb0
 8006b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e025      	b.n	8006bba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11f      	bne.n	8006bb8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b80:	4b10      	ldr	r3, [pc, #64]	; (8006bc4 <USBD_CDC_TransmitPacket+0x88>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f003 020f 	and.w	r2, r3, #15
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4403      	add	r3, r0
 8006b9a:	3318      	adds	r3, #24
 8006b9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b9e:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <USBD_CDC_TransmitPacket+0x88>)
 8006ba0:	7819      	ldrb	r1, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 ffb3 	bl	8008b1a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000093 	.word	0x20000093

08006bc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	32b0      	adds	r2, #176	; 0xb0
 8006bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	32b0      	adds	r2, #176	; 0xb0
 8006bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e018      	b.n	8006c28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7c1b      	ldrb	r3, [r3, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <USBD_CDC_ReceivePacket+0x68>)
 8006c00:	7819      	ldrb	r1, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 ffa5 	bl	8008b5c <USBD_LL_PrepareReceive>
 8006c12:	e008      	b.n	8006c26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <USBD_CDC_ReceivePacket+0x68>)
 8006c16:	7819      	ldrb	r1, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c1e:	2340      	movs	r3, #64	; 0x40
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 ff9b 	bl	8008b5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000094 	.word	0x20000094

08006c34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e01f      	b.n	8006c8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	79fa      	ldrb	r2, [r7, #7]
 8006c7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f001 fe15 	bl	80088b0 <USBD_LL_Init>
 8006c86:	4603      	mov	r3, r0
 8006c88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e025      	b.n	8006cf8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	32ae      	adds	r2, #174	; 0xae
 8006cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00f      	beq.n	8006ce8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	32ae      	adds	r2, #174	; 0xae
 8006cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	f107 020e 	add.w	r2, r7, #14
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fe1d 	bl	8008948 <USBD_LL_Start>
 8006d0e:	4603      	mov	r3, r0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d009      	beq.n	8006d5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	4611      	mov	r1, r2
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4798      	blx	r3
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	78fa      	ldrb	r2, [r7, #3]
 8006d80:	4611      	mov	r1, r2
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f001 f908 	bl	8007fc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d01a      	beq.n	8006e0c <USBD_LL_SetupStage+0x72>
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d822      	bhi.n	8006e20 <USBD_LL_SetupStage+0x86>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <USBD_LL_SetupStage+0x4a>
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d00a      	beq.n	8006df8 <USBD_LL_SetupStage+0x5e>
 8006de2:	e01d      	b.n	8006e20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fb5f 	bl	80074b0 <USBD_StdDevReq>
 8006df2:	4603      	mov	r3, r0
 8006df4:	73fb      	strb	r3, [r7, #15]
      break;
 8006df6:	e020      	b.n	8006e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fbc7 	bl	8007594 <USBD_StdItfReq>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0a:	e016      	b.n	8006e3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fc29 	bl	800766c <USBD_StdEPReq>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1e:	e00c      	b.n	8006e3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 fdea 	bl	8008a08 <USBD_LL_StallEP>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
      break;
 8006e38:	bf00      	nop
  }

  return ret;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d16e      	bne.n	8006f3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	f040 8098 	bne.w	8006fa0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d913      	bls.n	8006ea4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	1ad2      	subs	r2, r2, r3
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	4293      	cmp	r3, r2
 8006e94:	bf28      	it	cs
 8006e96:	4613      	movcs	r3, r2
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f001 f984 	bl	80081aa <USBD_CtlContinueRx>
 8006ea2:	e07d      	b.n	8006fa0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d014      	beq.n	8006edc <USBD_LL_DataOutStage+0x98>
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d81d      	bhi.n	8006ef2 <USBD_LL_DataOutStage+0xae>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <USBD_LL_DataOutStage+0x7c>
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d003      	beq.n	8006ec6 <USBD_LL_DataOutStage+0x82>
 8006ebe:	e018      	b.n	8006ef2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ec4:	e018      	b.n	8006ef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	4619      	mov	r1, r3
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 fa5e 	bl	8007392 <USBD_CoreFindIF>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75bb      	strb	r3, [r7, #22]
            break;
 8006eda:	e00d      	b.n	8006ef8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 fa60 	bl	80073ac <USBD_CoreFindEP>
 8006eec:	4603      	mov	r3, r0
 8006eee:	75bb      	strb	r3, [r7, #22]
            break;
 8006ef0:	e002      	b.n	8006ef8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	75bb      	strb	r3, [r7, #22]
            break;
 8006ef6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ef8:	7dbb      	ldrb	r3, [r7, #22]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d119      	bne.n	8006f32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d113      	bne.n	8006f32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f0a:	7dba      	ldrb	r2, [r7, #22]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	32ae      	adds	r2, #174	; 0xae
 8006f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f1a:	7dba      	ldrb	r2, [r7, #22]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f22:	7dba      	ldrb	r2, [r7, #22]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	32ae      	adds	r2, #174	; 0xae
 8006f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f001 f94a 	bl	80081cc <USBD_CtlSendStatus>
 8006f38:	e032      	b.n	8006fa0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fa31 	bl	80073ac <USBD_CoreFindEP>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f4e:	7dbb      	ldrb	r3, [r7, #22]
 8006f50:	2bff      	cmp	r3, #255	; 0xff
 8006f52:	d025      	beq.n	8006fa0 <USBD_LL_DataOutStage+0x15c>
 8006f54:	7dbb      	ldrb	r3, [r7, #22]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d122      	bne.n	8006fa0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d117      	bne.n	8006f96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f66:	7dba      	ldrb	r2, [r7, #22]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	32ae      	adds	r2, #174	; 0xae
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00f      	beq.n	8006f96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f76:	7dba      	ldrb	r2, [r7, #22]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f7e:	7dba      	ldrb	r2, [r7, #22]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	32ae      	adds	r2, #174	; 0xae
 8006f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	7afa      	ldrb	r2, [r7, #11]
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	e000      	b.n	8006fa2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b086      	sub	sp, #24
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006fb8:	7afb      	ldrb	r3, [r7, #11]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d16f      	bne.n	800709e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3314      	adds	r3, #20
 8006fc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d15a      	bne.n	8007084 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d914      	bls.n	8007004 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	1ad2      	subs	r2, r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f001 f8ac 	bl	800814e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 fdad 	bl	8008b5c <USBD_LL_PrepareReceive>
 8007002:	e03f      	b.n	8007084 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	429a      	cmp	r2, r3
 800700e:	d11c      	bne.n	800704a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007018:	429a      	cmp	r2, r3
 800701a:	d316      	bcc.n	800704a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007026:	429a      	cmp	r2, r3
 8007028:	d20f      	bcs.n	800704a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800702a:	2200      	movs	r2, #0
 800702c:	2100      	movs	r1, #0
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f001 f88d 	bl	800814e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800703c:	2300      	movs	r3, #0
 800703e:	2200      	movs	r2, #0
 8007040:	2100      	movs	r1, #0
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f001 fd8a 	bl	8008b5c <USBD_LL_PrepareReceive>
 8007048:	e01c      	b.n	8007084 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b03      	cmp	r3, #3
 8007054:	d10f      	bne.n	8007076 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f001 fcc5 	bl	8008a08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f001 f8b7 	bl	80081f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d03a      	beq.n	8007104 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff fe42 	bl	8006d18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800709c:	e032      	b.n	8007104 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800709e:	7afb      	ldrb	r3, [r7, #11]
 80070a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	4619      	mov	r1, r3
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f97f 	bl	80073ac <USBD_CoreFindEP>
 80070ae:	4603      	mov	r3, r0
 80070b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	2bff      	cmp	r3, #255	; 0xff
 80070b6:	d025      	beq.n	8007104 <USBD_LL_DataInStage+0x15a>
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d122      	bne.n	8007104 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d11c      	bne.n	8007104 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070ca:	7dfa      	ldrb	r2, [r7, #23]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	32ae      	adds	r2, #174	; 0xae
 80070d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d014      	beq.n	8007104 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070da:	7dfa      	ldrb	r2, [r7, #23]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80070e2:	7dfa      	ldrb	r2, [r7, #23]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	32ae      	adds	r2, #174	; 0xae
 80070e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	7afa      	ldrb	r2, [r7, #11]
 80070f0:	4611      	mov	r1, r2
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	4798      	blx	r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070fa:	7dbb      	ldrb	r3, [r7, #22]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007100:	7dbb      	ldrb	r3, [r7, #22]
 8007102:	e000      	b.n	8007106 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d014      	beq.n	8007174 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00e      	beq.n	8007174 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6852      	ldr	r2, [r2, #4]
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	4611      	mov	r1, r2
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007174:	2340      	movs	r3, #64	; 0x40
 8007176:	2200      	movs	r2, #0
 8007178:	2100      	movs	r1, #0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fbff 	bl	800897e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2240      	movs	r2, #64	; 0x40
 800718c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	2200      	movs	r2, #0
 8007194:	2180      	movs	r1, #128	; 0x80
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fbf1 	bl	800897e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2240      	movs	r2, #64	; 0x40
 80071a6:	621a      	str	r2, [r3, #32]

  return ret;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	460b      	mov	r3, r1
 80071bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	78fa      	ldrb	r2, [r7, #3]
 80071c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2204      	movs	r2, #4
 80071ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b04      	cmp	r3, #4
 8007210:	d106      	bne.n	8007220 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d110      	bne.n	8007264 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	32ae      	adds	r2, #174	; 0xae
 8007284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800728c:	2303      	movs	r3, #3
 800728e:	e01c      	b.n	80072ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b03      	cmp	r3, #3
 800729a:	d115      	bne.n	80072c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	32ae      	adds	r2, #174	; 0xae
 80072a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32ae      	adds	r2, #174	; 0xae
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	4611      	mov	r1, r2
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	460b      	mov	r3, r1
 80072dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	32ae      	adds	r2, #174	; 0xae
 80072e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e01c      	b.n	800732e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d115      	bne.n	800732c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32ae      	adds	r2, #174	; 0xae
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	32ae      	adds	r2, #174	; 0xae
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	4611      	mov	r1, r2
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00e      	beq.n	8007388 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6852      	ldr	r2, [r2, #4]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	4611      	mov	r1, r2
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	460b      	mov	r3, r1
 800739c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800739e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b086      	sub	sp, #24
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d920      	bls.n	8007430 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073f6:	e013      	b.n	8007420 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073f8:	f107 030a 	add.w	r3, r7, #10
 80073fc:	4619      	mov	r1, r3
 80073fe:	6978      	ldr	r0, [r7, #20]
 8007400:	f000 f81b 	bl	800743a <USBD_GetNextDesc>
 8007404:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b05      	cmp	r3, #5
 800740c:	d108      	bne.n	8007420 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	789b      	ldrb	r3, [r3, #2]
 8007416:	78fa      	ldrb	r2, [r7, #3]
 8007418:	429a      	cmp	r2, r3
 800741a:	d008      	beq.n	800742e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	885b      	ldrh	r3, [r3, #2]
 8007424:	b29a      	uxth	r2, r3
 8007426:	897b      	ldrh	r3, [r7, #10]
 8007428:	429a      	cmp	r2, r3
 800742a:	d8e5      	bhi.n	80073f8 <USBD_GetEpDesc+0x32>
 800742c:	e000      	b.n	8007430 <USBD_GetEpDesc+0x6a>
          break;
 800742e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007430:	693b      	ldr	r3, [r7, #16]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	881a      	ldrh	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	4413      	add	r3, r2
 8007454:	b29a      	uxth	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4413      	add	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007466:	68fb      	ldr	r3, [r7, #12]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	3301      	adds	r3, #1
 800748a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007492:	8a3b      	ldrh	r3, [r7, #16]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	b21a      	sxth	r2, r3
 8007498:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800749c:	4313      	orrs	r3, r2
 800749e:	b21b      	sxth	r3, r3
 80074a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074a2:	89fb      	ldrh	r3, [r7, #14]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d005      	beq.n	80074d6 <USBD_StdDevReq+0x26>
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d857      	bhi.n	800757e <USBD_StdDevReq+0xce>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00f      	beq.n	80074f2 <USBD_StdDevReq+0x42>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d153      	bne.n	800757e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	32ae      	adds	r2, #174	; 0xae
 80074e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]
      break;
 80074f0:	e04a      	b.n	8007588 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b09      	cmp	r3, #9
 80074f8:	d83b      	bhi.n	8007572 <USBD_StdDevReq+0xc2>
 80074fa:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <USBD_StdDevReq+0x50>)
 80074fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007500:	08007555 	.word	0x08007555
 8007504:	08007569 	.word	0x08007569
 8007508:	08007573 	.word	0x08007573
 800750c:	0800755f 	.word	0x0800755f
 8007510:	08007573 	.word	0x08007573
 8007514:	08007533 	.word	0x08007533
 8007518:	08007529 	.word	0x08007529
 800751c:	08007573 	.word	0x08007573
 8007520:	0800754b 	.word	0x0800754b
 8007524:	0800753d 	.word	0x0800753d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa3c 	bl	80079a8 <USBD_GetDescriptor>
          break;
 8007530:	e024      	b.n	800757c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fba1 	bl	8007c7c <USBD_SetAddress>
          break;
 800753a:	e01f      	b.n	800757c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fbe0 	bl	8007d04 <USBD_SetConfig>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]
          break;
 8007548:	e018      	b.n	800757c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fc83 	bl	8007e58 <USBD_GetConfig>
          break;
 8007552:	e013      	b.n	800757c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fcb4 	bl	8007ec4 <USBD_GetStatus>
          break;
 800755c:	e00e      	b.n	800757c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fce3 	bl	8007f2c <USBD_SetFeature>
          break;
 8007566:	e009      	b.n	800757c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fd07 	bl	8007f7e <USBD_ClrFeature>
          break;
 8007570:	e004      	b.n	800757c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fd5e 	bl	8008036 <USBD_CtlError>
          break;
 800757a:	bf00      	nop
      }
      break;
 800757c:	e004      	b.n	8007588 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fd58 	bl	8008036 <USBD_CtlError>
      break;
 8007586:	bf00      	nop
  }

  return ret;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop

08007594 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d005      	beq.n	80075ba <USBD_StdItfReq+0x26>
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d852      	bhi.n	8007658 <USBD_StdItfReq+0xc4>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <USBD_StdItfReq+0x26>
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d14e      	bne.n	8007658 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d840      	bhi.n	800764a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	889b      	ldrh	r3, [r3, #4]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d836      	bhi.n	8007640 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	889b      	ldrh	r3, [r3, #4]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fed9 	bl	8007392 <USBD_CoreFindIF>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2bff      	cmp	r3, #255	; 0xff
 80075e8:	d01d      	beq.n	8007626 <USBD_StdItfReq+0x92>
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11a      	bne.n	8007626 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075f0:	7bba      	ldrb	r2, [r7, #14]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	32ae      	adds	r2, #174	; 0xae
 80075f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00f      	beq.n	8007620 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007600:	7bba      	ldrb	r2, [r7, #14]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007608:	7bba      	ldrb	r2, [r7, #14]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	32ae      	adds	r2, #174	; 0xae
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800761e:	e004      	b.n	800762a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007624:	e001      	b.n	800762a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007626:	2303      	movs	r3, #3
 8007628:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	88db      	ldrh	r3, [r3, #6]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d110      	bne.n	8007654 <USBD_StdItfReq+0xc0>
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10d      	bne.n	8007654 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fdc7 	bl	80081cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800763e:	e009      	b.n	8007654 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fcf7 	bl	8008036 <USBD_CtlError>
          break;
 8007648:	e004      	b.n	8007654 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fcf2 	bl	8008036 <USBD_CtlError>
          break;
 8007652:	e000      	b.n	8007656 <USBD_StdItfReq+0xc2>
          break;
 8007654:	bf00      	nop
      }
      break;
 8007656:	e004      	b.n	8007662 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fceb 	bl	8008036 <USBD_CtlError>
      break;
 8007660:	bf00      	nop
  }

  return ret;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	889b      	ldrh	r3, [r3, #4]
 800767e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d007      	beq.n	800769c <USBD_StdEPReq+0x30>
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	f200 817f 	bhi.w	8007990 <USBD_StdEPReq+0x324>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d02a      	beq.n	80076ec <USBD_StdEPReq+0x80>
 8007696:	2b20      	cmp	r3, #32
 8007698:	f040 817a 	bne.w	8007990 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff fe83 	bl	80073ac <USBD_CoreFindEP>
 80076a6:	4603      	mov	r3, r0
 80076a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076aa:	7b7b      	ldrb	r3, [r7, #13]
 80076ac:	2bff      	cmp	r3, #255	; 0xff
 80076ae:	f000 8174 	beq.w	800799a <USBD_StdEPReq+0x32e>
 80076b2:	7b7b      	ldrb	r3, [r7, #13]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 8170 	bne.w	800799a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80076ba:	7b7a      	ldrb	r2, [r7, #13]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80076c2:	7b7a      	ldrb	r2, [r7, #13]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	32ae      	adds	r2, #174	; 0xae
 80076c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8163 	beq.w	800799a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076d4:	7b7a      	ldrb	r2, [r7, #13]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32ae      	adds	r2, #174	; 0xae
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076ea:	e156      	b.n	800799a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d008      	beq.n	8007706 <USBD_StdEPReq+0x9a>
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	f300 8145 	bgt.w	8007984 <USBD_StdEPReq+0x318>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 809b 	beq.w	8007836 <USBD_StdEPReq+0x1ca>
 8007700:	2b01      	cmp	r3, #1
 8007702:	d03c      	beq.n	800777e <USBD_StdEPReq+0x112>
 8007704:	e13e      	b.n	8007984 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d002      	beq.n	8007718 <USBD_StdEPReq+0xac>
 8007712:	2b03      	cmp	r3, #3
 8007714:	d016      	beq.n	8007744 <USBD_StdEPReq+0xd8>
 8007716:	e02c      	b.n	8007772 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00d      	beq.n	800773a <USBD_StdEPReq+0xce>
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b80      	cmp	r3, #128	; 0x80
 8007722:	d00a      	beq.n	800773a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 f96d 	bl	8008a08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800772e:	2180      	movs	r1, #128	; 0x80
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f969 	bl	8008a08 <USBD_LL_StallEP>
 8007736:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007738:	e020      	b.n	800777c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fc7a 	bl	8008036 <USBD_CtlError>
              break;
 8007742:	e01b      	b.n	800777c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	885b      	ldrh	r3, [r3, #2]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10e      	bne.n	800776a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <USBD_StdEPReq+0xfe>
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2b80      	cmp	r3, #128	; 0x80
 8007756:	d008      	beq.n	800776a <USBD_StdEPReq+0xfe>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	88db      	ldrh	r3, [r3, #6]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 f94f 	bl	8008a08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fd2e 	bl	80081cc <USBD_CtlSendStatus>

              break;
 8007770:	e004      	b.n	800777c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fc5e 	bl	8008036 <USBD_CtlError>
              break;
 800777a:	bf00      	nop
          }
          break;
 800777c:	e107      	b.n	800798e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d002      	beq.n	8007790 <USBD_StdEPReq+0x124>
 800778a:	2b03      	cmp	r3, #3
 800778c:	d016      	beq.n	80077bc <USBD_StdEPReq+0x150>
 800778e:	e04b      	b.n	8007828 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00d      	beq.n	80077b2 <USBD_StdEPReq+0x146>
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d00a      	beq.n	80077b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f931 	bl	8008a08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077a6:	2180      	movs	r1, #128	; 0x80
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 f92d 	bl	8008a08 <USBD_LL_StallEP>
 80077ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077b0:	e040      	b.n	8007834 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fc3e 	bl	8008036 <USBD_CtlError>
              break;
 80077ba:	e03b      	b.n	8007834 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	885b      	ldrh	r3, [r3, #2]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d136      	bne.n	8007832 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d004      	beq.n	80077d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f937 	bl	8008a46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fcf7 	bl	80081cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fde2 	bl	80073ac <USBD_CoreFindEP>
 80077e8:	4603      	mov	r3, r0
 80077ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077ec:	7b7b      	ldrb	r3, [r7, #13]
 80077ee:	2bff      	cmp	r3, #255	; 0xff
 80077f0:	d01f      	beq.n	8007832 <USBD_StdEPReq+0x1c6>
 80077f2:	7b7b      	ldrb	r3, [r7, #13]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11c      	bne.n	8007832 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077f8:	7b7a      	ldrb	r2, [r7, #13]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007800:	7b7a      	ldrb	r2, [r7, #13]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	32ae      	adds	r2, #174	; 0xae
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d010      	beq.n	8007832 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007810:	7b7a      	ldrb	r2, [r7, #13]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	32ae      	adds	r2, #174	; 0xae
 8007816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	4798      	blx	r3
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007826:	e004      	b.n	8007832 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fc03 	bl	8008036 <USBD_CtlError>
              break;
 8007830:	e000      	b.n	8007834 <USBD_StdEPReq+0x1c8>
              break;
 8007832:	bf00      	nop
          }
          break;
 8007834:	e0ab      	b.n	800798e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d002      	beq.n	8007848 <USBD_StdEPReq+0x1dc>
 8007842:	2b03      	cmp	r3, #3
 8007844:	d032      	beq.n	80078ac <USBD_StdEPReq+0x240>
 8007846:	e097      	b.n	8007978 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d007      	beq.n	800785e <USBD_StdEPReq+0x1f2>
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d004      	beq.n	800785e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fbed 	bl	8008036 <USBD_CtlError>
                break;
 800785c:	e091      	b.n	8007982 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800785e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	da0b      	bge.n	800787e <USBD_StdEPReq+0x212>
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	3310      	adds	r3, #16
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	3304      	adds	r3, #4
 800787c:	e00b      	b.n	8007896 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	4413      	add	r3, r2
 8007894:	3304      	adds	r3, #4
 8007896:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2202      	movs	r2, #2
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fc37 	bl	8008118 <USBD_CtlSendData>
              break;
 80078aa:	e06a      	b.n	8007982 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	da11      	bge.n	80078d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	f003 020f 	and.w	r2, r3, #15
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	3324      	adds	r3, #36	; 0x24
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d117      	bne.n	80078fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fbb0 	bl	8008036 <USBD_CtlError>
                  break;
 80078d6:	e054      	b.n	8007982 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	f003 020f 	and.w	r2, r3, #15
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fb9d 	bl	8008036 <USBD_CtlError>
                  break;
 80078fc:	e041      	b.n	8007982 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007902:	2b00      	cmp	r3, #0
 8007904:	da0b      	bge.n	800791e <USBD_StdEPReq+0x2b2>
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800790c:	4613      	mov	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	3310      	adds	r3, #16
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	3304      	adds	r3, #4
 800791c:	e00b      	b.n	8007936 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	3304      	adds	r3, #4
 8007936:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <USBD_StdEPReq+0x2d8>
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b80      	cmp	r3, #128	; 0x80
 8007942:	d103      	bne.n	800794c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	e00e      	b.n	800796a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 f897 	bl	8008a84 <USBD_LL_IsStallEP>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e002      	b.n	800796a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2202      	movs	r2, #2
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fbd1 	bl	8008118 <USBD_CtlSendData>
              break;
 8007976:	e004      	b.n	8007982 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fb5b 	bl	8008036 <USBD_CtlError>
              break;
 8007980:	bf00      	nop
          }
          break;
 8007982:	e004      	b.n	800798e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb55 	bl	8008036 <USBD_CtlError>
          break;
 800798c:	bf00      	nop
      }
      break;
 800798e:	e005      	b.n	800799c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fb4f 	bl	8008036 <USBD_CtlError>
      break;
 8007998:	e000      	b.n	800799c <USBD_StdEPReq+0x330>
      break;
 800799a:	bf00      	nop
  }

  return ret;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	885b      	ldrh	r3, [r3, #2]
 80079c2:	0a1b      	lsrs	r3, r3, #8
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	2b06      	cmp	r3, #6
 80079ca:	f200 8128 	bhi.w	8007c1e <USBD_GetDescriptor+0x276>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <USBD_GetDescriptor+0x2c>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	080079f1 	.word	0x080079f1
 80079d8:	08007a09 	.word	0x08007a09
 80079dc:	08007a49 	.word	0x08007a49
 80079e0:	08007c1f 	.word	0x08007c1f
 80079e4:	08007c1f 	.word	0x08007c1f
 80079e8:	08007bbf 	.word	0x08007bbf
 80079ec:	08007beb 	.word	0x08007beb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	7c12      	ldrb	r2, [r2, #16]
 80079fc:	f107 0108 	add.w	r1, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
      break;
 8007a06:	e112      	b.n	8007c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	7c1b      	ldrb	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10d      	bne.n	8007a2c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	f107 0208 	add.w	r2, r7, #8
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4798      	blx	r3
 8007a20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3301      	adds	r3, #1
 8007a26:	2202      	movs	r2, #2
 8007a28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a2a:	e100      	b.n	8007c2e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	f107 0208 	add.w	r2, r7, #8
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4798      	blx	r3
 8007a3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3301      	adds	r3, #1
 8007a42:	2202      	movs	r2, #2
 8007a44:	701a      	strb	r2, [r3, #0]
      break;
 8007a46:	e0f2      	b.n	8007c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	885b      	ldrh	r3, [r3, #2]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b05      	cmp	r3, #5
 8007a50:	f200 80ac 	bhi.w	8007bac <USBD_GetDescriptor+0x204>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <USBD_GetDescriptor+0xb4>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a75 	.word	0x08007a75
 8007a60:	08007aa9 	.word	0x08007aa9
 8007a64:	08007add 	.word	0x08007add
 8007a68:	08007b11 	.word	0x08007b11
 8007a6c:	08007b45 	.word	0x08007b45
 8007a70:	08007b79 	.word	0x08007b79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7c12      	ldrb	r2, [r2, #16]
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a96:	e091      	b.n	8007bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 facb 	bl	8008036 <USBD_CtlError>
            err++;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa6:	e089      	b.n	8007bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7c12      	ldrb	r2, [r2, #16]
 8007ac0:	f107 0108 	add.w	r1, r7, #8
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
 8007ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aca:	e077      	b.n	8007bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fab1 	bl	8008036 <USBD_CtlError>
            err++;
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ada:	e06f      	b.n	8007bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7c12      	ldrb	r2, [r2, #16]
 8007af4:	f107 0108 	add.w	r1, r7, #8
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afe:	e05d      	b.n	8007bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa97 	bl	8008036 <USBD_CtlError>
            err++;
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0e:	e055      	b.n	8007bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b32:	e043      	b.n	8007bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa7d 	bl	8008036 <USBD_CtlError>
            err++;
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	72fb      	strb	r3, [r7, #11]
          break;
 8007b42:	e03b      	b.n	8007bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	7c12      	ldrb	r2, [r2, #16]
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b66:	e029      	b.n	8007bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa63 	bl	8008036 <USBD_CtlError>
            err++;
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	3301      	adds	r3, #1
 8007b74:	72fb      	strb	r3, [r7, #11]
          break;
 8007b76:	e021      	b.n	8007bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7c12      	ldrb	r2, [r2, #16]
 8007b90:	f107 0108 	add.w	r1, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b9a:	e00f      	b.n	8007bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa49 	bl	8008036 <USBD_CtlError>
            err++;
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8007baa:	e007      	b.n	8007bbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa41 	bl	8008036 <USBD_CtlError>
          err++;
 8007bb4:	7afb      	ldrb	r3, [r7, #11]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007bba:	bf00      	nop
      }
      break;
 8007bbc:	e037      	b.n	8007c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	7c1b      	ldrb	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bce:	f107 0208 	add.w	r2, r7, #8
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4798      	blx	r3
 8007bd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bd8:	e029      	b.n	8007c2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fa2a 	bl	8008036 <USBD_CtlError>
        err++;
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	3301      	adds	r3, #1
 8007be6:	72fb      	strb	r3, [r7, #11]
      break;
 8007be8:	e021      	b.n	8007c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	7c1b      	ldrb	r3, [r3, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10d      	bne.n	8007c0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	f107 0208 	add.w	r2, r7, #8
 8007bfe:	4610      	mov	r0, r2
 8007c00:	4798      	blx	r3
 8007c02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3301      	adds	r3, #1
 8007c08:	2207      	movs	r2, #7
 8007c0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c0c:	e00f      	b.n	8007c2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fa10 	bl	8008036 <USBD_CtlError>
        err++;
 8007c16:	7afb      	ldrb	r3, [r7, #11]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c1c:	e007      	b.n	8007c2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fa08 	bl	8008036 <USBD_CtlError>
      err++;
 8007c26:	7afb      	ldrb	r3, [r7, #11]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c2c:	bf00      	nop
  }

  if (err != 0U)
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d11e      	bne.n	8007c72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	88db      	ldrh	r3, [r3, #6]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d016      	beq.n	8007c6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c3c:	893b      	ldrh	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00e      	beq.n	8007c60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	88da      	ldrh	r2, [r3, #6]
 8007c46:	893b      	ldrh	r3, [r7, #8]
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	bf28      	it	cs
 8007c4c:	4613      	movcs	r3, r2
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c52:	893b      	ldrh	r3, [r7, #8]
 8007c54:	461a      	mov	r2, r3
 8007c56:	68f9      	ldr	r1, [r7, #12]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fa5d 	bl	8008118 <USBD_CtlSendData>
 8007c5e:	e009      	b.n	8007c74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f9e7 	bl	8008036 <USBD_CtlError>
 8007c68:	e004      	b.n	8007c74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 faae 	bl	80081cc <USBD_CtlSendStatus>
 8007c70:	e000      	b.n	8007c74 <USBD_GetDescriptor+0x2cc>
    return;
 8007c72:	bf00      	nop
  }
}
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop

08007c7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	889b      	ldrh	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d131      	bne.n	8007cf2 <USBD_SetAddress+0x76>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	88db      	ldrh	r3, [r3, #6]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d12d      	bne.n	8007cf2 <USBD_SetAddress+0x76>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	885b      	ldrh	r3, [r3, #2]
 8007c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c9c:	d829      	bhi.n	8007cf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	885b      	ldrh	r3, [r3, #2]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d104      	bne.n	8007cc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f9bc 	bl	8008036 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cbe:	e01d      	b.n	8007cfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	7bfa      	ldrb	r2, [r7, #15]
 8007cc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 ff05 	bl	8008adc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa7a 	bl	80081cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce6:	e009      	b.n	8007cfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf0:	e004      	b.n	8007cfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f99e 	bl	8008036 <USBD_CtlError>
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	4b4e      	ldr	r3, [pc, #312]	; (8007e54 <USBD_SetConfig+0x150>)
 8007d1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d1c:	4b4d      	ldr	r3, [pc, #308]	; (8007e54 <USBD_SetConfig+0x150>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d905      	bls.n	8007d30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f985 	bl	8008036 <USBD_CtlError>
    return USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e08c      	b.n	8007e4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d002      	beq.n	8007d42 <USBD_SetConfig+0x3e>
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d029      	beq.n	8007d94 <USBD_SetConfig+0x90>
 8007d40:	e075      	b.n	8007e2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d42:	4b44      	ldr	r3, [pc, #272]	; (8007e54 <USBD_SetConfig+0x150>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d020      	beq.n	8007d8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d4a:	4b42      	ldr	r3, [pc, #264]	; (8007e54 <USBD_SetConfig+0x150>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d54:	4b3f      	ldr	r3, [pc, #252]	; (8007e54 <USBD_SetConfig+0x150>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fe ffe7 	bl	8006d2e <USBD_SetClassConfig>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d008      	beq.n	8007d7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f962 	bl	8008036 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2202      	movs	r2, #2
 8007d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d7a:	e065      	b.n	8007e48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa25 	bl	80081cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2203      	movs	r2, #3
 8007d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d8a:	e05d      	b.n	8007e48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fa1d 	bl	80081cc <USBD_CtlSendStatus>
      break;
 8007d92:	e059      	b.n	8007e48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d94:	4b2f      	ldr	r3, [pc, #188]	; (8007e54 <USBD_SetConfig+0x150>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d112      	bne.n	8007dc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007da4:	4b2b      	ldr	r3, [pc, #172]	; (8007e54 <USBD_SetConfig+0x150>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dae:	4b29      	ldr	r3, [pc, #164]	; (8007e54 <USBD_SetConfig+0x150>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7fe ffd6 	bl	8006d66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa06 	bl	80081cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dc0:	e042      	b.n	8007e48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007dc2:	4b24      	ldr	r3, [pc, #144]	; (8007e54 <USBD_SetConfig+0x150>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d02a      	beq.n	8007e26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fe ffc4 	bl	8006d66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dde:	4b1d      	ldr	r3, [pc, #116]	; (8007e54 <USBD_SetConfig+0x150>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007de8:	4b1a      	ldr	r3, [pc, #104]	; (8007e54 <USBD_SetConfig+0x150>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fe ff9d 	bl	8006d2e <USBD_SetClassConfig>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00f      	beq.n	8007e1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f918 	bl	8008036 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe ffa9 	bl	8006d66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e1c:	e014      	b.n	8007e48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f9d4 	bl	80081cc <USBD_CtlSendStatus>
      break;
 8007e24:	e010      	b.n	8007e48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9d0 	bl	80081cc <USBD_CtlSendStatus>
      break;
 8007e2c:	e00c      	b.n	8007e48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f900 	bl	8008036 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e36:	4b07      	ldr	r3, [pc, #28]	; (8007e54 <USBD_SetConfig+0x150>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fe ff92 	bl	8006d66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e42:	2303      	movs	r3, #3
 8007e44:	73fb      	strb	r3, [r7, #15]
      break;
 8007e46:	bf00      	nop
  }

  return ret;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000294 	.word	0x20000294

08007e58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d004      	beq.n	8007e74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f8e2 	bl	8008036 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e72:	e023      	b.n	8007ebc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	dc02      	bgt.n	8007e86 <USBD_GetConfig+0x2e>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	dc03      	bgt.n	8007e8c <USBD_GetConfig+0x34>
 8007e84:	e015      	b.n	8007eb2 <USBD_GetConfig+0x5a>
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d00b      	beq.n	8007ea2 <USBD_GetConfig+0x4a>
 8007e8a:	e012      	b.n	8007eb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3308      	adds	r3, #8
 8007e96:	2201      	movs	r2, #1
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f93c 	bl	8008118 <USBD_CtlSendData>
        break;
 8007ea0:	e00c      	b.n	8007ebc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f934 	bl	8008118 <USBD_CtlSendData>
        break;
 8007eb0:	e004      	b.n	8007ebc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f8be 	bl	8008036 <USBD_CtlError>
        break;
 8007eba:	bf00      	nop
}
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d81e      	bhi.n	8007f1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	88db      	ldrh	r3, [r3, #6]
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d004      	beq.n	8007eee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f8a5 	bl	8008036 <USBD_CtlError>
        break;
 8007eec:	e01a      	b.n	8007f24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f043 0202 	orr.w	r2, r3, #2
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	330c      	adds	r3, #12
 8007f0e:	2202      	movs	r2, #2
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f900 	bl	8008118 <USBD_CtlSendData>
      break;
 8007f18:	e004      	b.n	8007f24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f88a 	bl	8008036 <USBD_CtlError>
      break;
 8007f22:	bf00      	nop
  }
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	885b      	ldrh	r3, [r3, #2]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d107      	bne.n	8007f4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f940 	bl	80081cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f4c:	e013      	b.n	8007f76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	885b      	ldrh	r3, [r3, #2]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d10b      	bne.n	8007f6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	889b      	ldrh	r3, [r3, #4]
 8007f5a:	0a1b      	lsrs	r3, r3, #8
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f930 	bl	80081cc <USBD_CtlSendStatus>
}
 8007f6c:	e003      	b.n	8007f76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f860 	bl	8008036 <USBD_CtlError>
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d80b      	bhi.n	8007fae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d10c      	bne.n	8007fb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f910 	bl	80081cc <USBD_CtlSendStatus>
      }
      break;
 8007fac:	e004      	b.n	8007fb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f840 	bl	8008036 <USBD_CtlError>
      break;
 8007fb6:	e000      	b.n	8007fba <USBD_ClrFeature+0x3c>
      break;
 8007fb8:	bf00      	nop
  }
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	781a      	ldrb	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	781a      	ldrb	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7ff fa41 	bl	8007474 <SWAPBYTE>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff fa34 	bl	8007474 <SWAPBYTE>
 800800c:	4603      	mov	r3, r0
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	3301      	adds	r3, #1
 8008018:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff fa27 	bl	8007474 <SWAPBYTE>
 8008026:	4603      	mov	r3, r0
 8008028:	461a      	mov	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	80da      	strh	r2, [r3, #6]
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008040:	2180      	movs	r1, #128	; 0x80
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fce0 	bl	8008a08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008048:	2100      	movs	r1, #0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fcdc 	bl	8008a08 <USBD_LL_StallEP>
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d036      	beq.n	80080dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008072:	6938      	ldr	r0, [r7, #16]
 8008074:	f000 f836 	bl	80080e4 <USBD_GetLen>
 8008078:	4603      	mov	r3, r0
 800807a:	3301      	adds	r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	4413      	add	r3, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	7812      	ldrb	r2, [r2, #0]
 8008090:	701a      	strb	r2, [r3, #0]
  idx++;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	3301      	adds	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4413      	add	r3, r2
 800809e:	2203      	movs	r2, #3
 80080a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	3301      	adds	r3, #1
 80080a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080a8:	e013      	b.n	80080d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	4413      	add	r3, r2
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	7812      	ldrb	r2, [r2, #0]
 80080b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	3301      	adds	r3, #1
 80080ba:	613b      	str	r3, [r7, #16]
    idx++;
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	3301      	adds	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	4413      	add	r3, r2
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	3301      	adds	r3, #1
 80080d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e7      	bne.n	80080aa <USBD_GetString+0x52>
 80080da:	e000      	b.n	80080de <USBD_GetString+0x86>
    return;
 80080dc:	bf00      	nop
  }
}
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080f4:	e005      	b.n	8008102 <USBD_GetLen+0x1e>
  {
    len++;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	3301      	adds	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	3301      	adds	r3, #1
 8008100:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f5      	bne.n	80080f6 <USBD_GetLen+0x12>
  }

  return len;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2202      	movs	r2, #2
 8008128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	2100      	movs	r1, #0
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fceb 	bl	8008b1a <USBD_LL_Transmit>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	2100      	movs	r1, #0
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fcda 	bl	8008b1a <USBD_LL_Transmit>

  return USBD_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2203      	movs	r2, #3
 8008180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	2100      	movs	r1, #0
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 fcde 	bl	8008b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	2100      	movs	r1, #0
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 fccd 	bl	8008b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2204      	movs	r2, #4
 80081d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081dc:	2300      	movs	r3, #0
 80081de:	2200      	movs	r2, #0
 80081e0:	2100      	movs	r1, #0
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fc99 	bl	8008b1a <USBD_LL_Transmit>

  return USBD_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2205      	movs	r2, #5
 80081fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008202:	2300      	movs	r3, #0
 8008204:	2200      	movs	r2, #0
 8008206:	2100      	movs	r1, #0
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fca7 	bl	8008b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800821c:	2200      	movs	r2, #0
 800821e:	4912      	ldr	r1, [pc, #72]	; (8008268 <MX_USB_DEVICE_Init+0x50>)
 8008220:	4812      	ldr	r0, [pc, #72]	; (800826c <MX_USB_DEVICE_Init+0x54>)
 8008222:	f7fe fd07 	bl	8006c34 <USBD_Init>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800822c:	f7f8 fe12 	bl	8000e54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008230:	490f      	ldr	r1, [pc, #60]	; (8008270 <MX_USB_DEVICE_Init+0x58>)
 8008232:	480e      	ldr	r0, [pc, #56]	; (800826c <MX_USB_DEVICE_Init+0x54>)
 8008234:	f7fe fd2e 	bl	8006c94 <USBD_RegisterClass>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800823e:	f7f8 fe09 	bl	8000e54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008242:	490c      	ldr	r1, [pc, #48]	; (8008274 <MX_USB_DEVICE_Init+0x5c>)
 8008244:	4809      	ldr	r0, [pc, #36]	; (800826c <MX_USB_DEVICE_Init+0x54>)
 8008246:	f7fe fc1f 	bl	8006a88 <USBD_CDC_RegisterInterface>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008250:	f7f8 fe00 	bl	8000e54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008254:	4805      	ldr	r0, [pc, #20]	; (800826c <MX_USB_DEVICE_Init+0x54>)
 8008256:	f7fe fd53 	bl	8006d00 <USBD_Start>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008260:	f7f8 fdf8 	bl	8000e54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008264:	bf00      	nop
 8008266:	bd80      	pop	{r7, pc}
 8008268:	200000ac 	.word	0x200000ac
 800826c:	20000298 	.word	0x20000298
 8008270:	20000018 	.word	0x20000018
 8008274:	20000098 	.word	0x20000098

08008278 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800827c:	2200      	movs	r2, #0
 800827e:	4905      	ldr	r1, [pc, #20]	; (8008294 <CDC_Init_FS+0x1c>)
 8008280:	4805      	ldr	r0, [pc, #20]	; (8008298 <CDC_Init_FS+0x20>)
 8008282:	f7fe fc1b 	bl	8006abc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008286:	4905      	ldr	r1, [pc, #20]	; (800829c <CDC_Init_FS+0x24>)
 8008288:	4803      	ldr	r0, [pc, #12]	; (8008298 <CDC_Init_FS+0x20>)
 800828a:	f7fe fc39 	bl	8006b00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800828e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008290:	4618      	mov	r0, r3
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000d74 	.word	0x20000d74
 8008298:	20000298 	.word	0x20000298
 800829c:	20000574 	.word	0x20000574

080082a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80082a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
 80082bc:	4613      	mov	r3, r2
 80082be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	2b23      	cmp	r3, #35	; 0x23
 80082c4:	d84a      	bhi.n	800835c <CDC_Control_FS+0xac>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <CDC_Control_FS+0x1c>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	0800835d 	.word	0x0800835d
 80082d0:	0800835d 	.word	0x0800835d
 80082d4:	0800835d 	.word	0x0800835d
 80082d8:	0800835d 	.word	0x0800835d
 80082dc:	0800835d 	.word	0x0800835d
 80082e0:	0800835d 	.word	0x0800835d
 80082e4:	0800835d 	.word	0x0800835d
 80082e8:	0800835d 	.word	0x0800835d
 80082ec:	0800835d 	.word	0x0800835d
 80082f0:	0800835d 	.word	0x0800835d
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	0800835d 	.word	0x0800835d
 80082fc:	0800835d 	.word	0x0800835d
 8008300:	0800835d 	.word	0x0800835d
 8008304:	0800835d 	.word	0x0800835d
 8008308:	0800835d 	.word	0x0800835d
 800830c:	0800835d 	.word	0x0800835d
 8008310:	0800835d 	.word	0x0800835d
 8008314:	0800835d 	.word	0x0800835d
 8008318:	0800835d 	.word	0x0800835d
 800831c:	0800835d 	.word	0x0800835d
 8008320:	0800835d 	.word	0x0800835d
 8008324:	0800835d 	.word	0x0800835d
 8008328:	0800835d 	.word	0x0800835d
 800832c:	0800835d 	.word	0x0800835d
 8008330:	0800835d 	.word	0x0800835d
 8008334:	0800835d 	.word	0x0800835d
 8008338:	0800835d 	.word	0x0800835d
 800833c:	0800835d 	.word	0x0800835d
 8008340:	0800835d 	.word	0x0800835d
 8008344:	0800835d 	.word	0x0800835d
 8008348:	0800835d 	.word	0x0800835d
 800834c:	0800835d 	.word	0x0800835d
 8008350:	0800835d 	.word	0x0800835d
 8008354:	0800835d 	.word	0x0800835d
 8008358:	0800835d 	.word	0x0800835d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800835c:	bf00      	nop
  }

  return (USBD_OK);
 800835e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4805      	ldr	r0, [pc, #20]	; (8008390 <CDC_Receive_FS+0x24>)
 800837a:	f7fe fbc1 	bl	8006b00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800837e:	4804      	ldr	r0, [pc, #16]	; (8008390 <CDC_Receive_FS+0x24>)
 8008380:	f7fe fc22 	bl	8006bc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008384:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000298 	.word	0x20000298

08008394 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80083a4:	4b0d      	ldr	r3, [pc, #52]	; (80083dc <CDC_Transmit_FS+0x48>)
 80083a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e00b      	b.n	80083d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80083ba:	887b      	ldrh	r3, [r7, #2]
 80083bc:	461a      	mov	r2, r3
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4806      	ldr	r0, [pc, #24]	; (80083dc <CDC_Transmit_FS+0x48>)
 80083c2:	f7fe fb7b 	bl	8006abc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80083c6:	4805      	ldr	r0, [pc, #20]	; (80083dc <CDC_Transmit_FS+0x48>)
 80083c8:	f7fe fbb8 	bl	8006b3c <USBD_CDC_TransmitPacket>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000298 	.word	0x20000298

080083e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2212      	movs	r2, #18
 8008414:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008416:	4b03      	ldr	r3, [pc, #12]	; (8008424 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	200000c8 	.word	0x200000c8

08008428 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2204      	movs	r2, #4
 8008438:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800843a:	4b03      	ldr	r3, [pc, #12]	; (8008448 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	200000dc 	.word	0x200000dc

0800844c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	6039      	str	r1, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4907      	ldr	r1, [pc, #28]	; (8008480 <USBD_FS_ProductStrDescriptor+0x34>)
 8008462:	4808      	ldr	r0, [pc, #32]	; (8008484 <USBD_FS_ProductStrDescriptor+0x38>)
 8008464:	f7ff fdf8 	bl	8008058 <USBD_GetString>
 8008468:	e004      	b.n	8008474 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4904      	ldr	r1, [pc, #16]	; (8008480 <USBD_FS_ProductStrDescriptor+0x34>)
 800846e:	4805      	ldr	r0, [pc, #20]	; (8008484 <USBD_FS_ProductStrDescriptor+0x38>)
 8008470:	f7ff fdf2 	bl	8008058 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20001574 	.word	0x20001574
 8008484:	080095e4 	.word	0x080095e4

08008488 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	4904      	ldr	r1, [pc, #16]	; (80084a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008498:	4804      	ldr	r0, [pc, #16]	; (80084ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800849a:	f7ff fddd 	bl	8008058 <USBD_GetString>
  return USBD_StrDesc;
 800849e:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20001574 	.word	0x20001574
 80084ac:	080095fc 	.word	0x080095fc

080084b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	221a      	movs	r2, #26
 80084c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084c2:	f000 f843 	bl	800854c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084c6:	4b02      	ldr	r3, [pc, #8]	; (80084d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	200000e0 	.word	0x200000e0

080084d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d105      	bne.n	80084f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	4907      	ldr	r1, [pc, #28]	; (8008508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084ea:	4808      	ldr	r0, [pc, #32]	; (800850c <USBD_FS_ConfigStrDescriptor+0x38>)
 80084ec:	f7ff fdb4 	bl	8008058 <USBD_GetString>
 80084f0:	e004      	b.n	80084fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	4904      	ldr	r1, [pc, #16]	; (8008508 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084f6:	4805      	ldr	r0, [pc, #20]	; (800850c <USBD_FS_ConfigStrDescriptor+0x38>)
 80084f8:	f7ff fdae 	bl	8008058 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084fc:	4b02      	ldr	r3, [pc, #8]	; (8008508 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20001574 	.word	0x20001574
 800850c:	08009610 	.word	0x08009610

08008510 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	6039      	str	r1, [r7, #0]
 800851a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d105      	bne.n	800852e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	4907      	ldr	r1, [pc, #28]	; (8008544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008526:	4808      	ldr	r0, [pc, #32]	; (8008548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008528:	f7ff fd96 	bl	8008058 <USBD_GetString>
 800852c:	e004      	b.n	8008538 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4904      	ldr	r1, [pc, #16]	; (8008544 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008532:	4805      	ldr	r0, [pc, #20]	; (8008548 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008534:	f7ff fd90 	bl	8008058 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008538:	4b02      	ldr	r3, [pc, #8]	; (8008544 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20001574 	.word	0x20001574
 8008548:	0800961c 	.word	0x0800961c

0800854c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008552:	4b0f      	ldr	r3, [pc, #60]	; (8008590 <Get_SerialNum+0x44>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008558:	4b0e      	ldr	r3, [pc, #56]	; (8008594 <Get_SerialNum+0x48>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800855e:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <Get_SerialNum+0x4c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4413      	add	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d009      	beq.n	8008586 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008572:	2208      	movs	r2, #8
 8008574:	4909      	ldr	r1, [pc, #36]	; (800859c <Get_SerialNum+0x50>)
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 f814 	bl	80085a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800857c:	2204      	movs	r2, #4
 800857e:	4908      	ldr	r1, [pc, #32]	; (80085a0 <Get_SerialNum+0x54>)
 8008580:	68b8      	ldr	r0, [r7, #8]
 8008582:	f000 f80f 	bl	80085a4 <IntToUnicode>
  }
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	1fff7a10 	.word	0x1fff7a10
 8008594:	1fff7a14 	.word	0x1fff7a14
 8008598:	1fff7a18 	.word	0x1fff7a18
 800859c:	200000e2 	.word	0x200000e2
 80085a0:	200000f2 	.word	0x200000f2

080085a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4613      	mov	r3, r2
 80085b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]
 80085ba:	e027      	b.n	800860c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	0f1b      	lsrs	r3, r3, #28
 80085c0:	2b09      	cmp	r3, #9
 80085c2:	d80b      	bhi.n	80085dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	0f1b      	lsrs	r3, r3, #28
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	4619      	mov	r1, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	440b      	add	r3, r1
 80085d4:	3230      	adds	r2, #48	; 0x30
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	e00a      	b.n	80085f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	0f1b      	lsrs	r3, r3, #28
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	4619      	mov	r1, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	440b      	add	r3, r1
 80085ec:	3237      	adds	r2, #55	; 0x37
 80085ee:	b2d2      	uxtb	r2, r2
 80085f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	3301      	adds	r3, #1
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	4413      	add	r3, r2
 8008602:	2200      	movs	r2, #0
 8008604:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	3301      	adds	r3, #1
 800860a:	75fb      	strb	r3, [r7, #23]
 800860c:	7dfa      	ldrb	r2, [r7, #23]
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	429a      	cmp	r2, r3
 8008612:	d3d3      	bcc.n	80085bc <IntToUnicode+0x18>
  }
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
	...

08008624 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	; 0x28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800862c:	f107 0314 	add.w	r3, r7, #20
 8008630:	2200      	movs	r2, #0
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	605a      	str	r2, [r3, #4]
 8008636:	609a      	str	r2, [r3, #8]
 8008638:	60da      	str	r2, [r3, #12]
 800863a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008644:	d13a      	bne.n	80086bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008646:	2300      	movs	r3, #0
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <HAL_PCD_MspInit+0xa0>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <HAL_PCD_MspInit+0xa0>)
 8008650:	f043 0301 	orr.w	r3, r3, #1
 8008654:	6313      	str	r3, [r2, #48]	; 0x30
 8008656:	4b1b      	ldr	r3, [pc, #108]	; (80086c4 <HAL_PCD_MspInit+0xa0>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008662:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008668:	2302      	movs	r3, #2
 800866a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800866c:	2300      	movs	r3, #0
 800866e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008670:	2303      	movs	r3, #3
 8008672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008674:	230a      	movs	r3, #10
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008678:	f107 0314 	add.w	r3, r7, #20
 800867c:	4619      	mov	r1, r3
 800867e:	4812      	ldr	r0, [pc, #72]	; (80086c8 <HAL_PCD_MspInit+0xa4>)
 8008680:	f7f8 ff3c 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008684:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <HAL_PCD_MspInit+0xa0>)
 8008686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008688:	4a0e      	ldr	r2, [pc, #56]	; (80086c4 <HAL_PCD_MspInit+0xa0>)
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868e:	6353      	str	r3, [r2, #52]	; 0x34
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <HAL_PCD_MspInit+0xa0>)
 8008696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008698:	4a0a      	ldr	r2, [pc, #40]	; (80086c4 <HAL_PCD_MspInit+0xa0>)
 800869a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800869e:	6453      	str	r3, [r2, #68]	; 0x44
 80086a0:	4b08      	ldr	r3, [pc, #32]	; (80086c4 <HAL_PCD_MspInit+0xa0>)
 80086a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086ac:	2200      	movs	r2, #0
 80086ae:	2100      	movs	r1, #0
 80086b0:	2043      	movs	r0, #67	; 0x43
 80086b2:	f7f8 feec 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80086b6:	2043      	movs	r0, #67	; 0x43
 80086b8:	f7f8 ff05 	bl	80014c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80086bc:	bf00      	nop
 80086be:	3728      	adds	r7, #40	; 0x28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40023800 	.word	0x40023800
 80086c8:	40020000 	.word	0x40020000

080086cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f7fe fb59 	bl	8006d9a <USBD_LL_SetupStage>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	440b      	add	r3, r1
 8008710:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	4619      	mov	r1, r3
 800871a:	f7fe fb93 	bl	8006e44 <USBD_LL_DataOutStage>
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4613      	mov	r3, r2
 800873e:	00db      	lsls	r3, r3, #3
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	334c      	adds	r3, #76	; 0x4c
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	4619      	mov	r1, r3
 800874e:	f7fe fc2c 	bl	8006faa <USBD_LL_DataInStage>
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b082      	sub	sp, #8
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe fd60 	bl	800722e <USBD_LL_SOF>
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800877e:	2301      	movs	r3, #1
 8008780:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
 800878e:	e008      	b.n	80087a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d102      	bne.n	800879e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
 800879c:	e001      	b.n	80087a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800879e:	f7f8 fb59 	bl	8000e54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087a8:	7bfa      	ldrb	r2, [r7, #15]
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fd00 	bl	80071b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fca8 	bl	800710e <USBD_LL_Reset>
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe fcfb 	bl	80071d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087ee:	f043 0301 	orr.w	r3, r3, #1
 80087f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087fc:	4b04      	ldr	r3, [pc, #16]	; (8008810 <HAL_PCD_SuspendCallback+0x48>)
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	4a03      	ldr	r2, [pc, #12]	; (8008810 <HAL_PCD_SuspendCallback+0x48>)
 8008802:	f043 0306 	orr.w	r3, r3, #6
 8008806:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	e000ed00 	.word	0xe000ed00

08008814 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe fceb 	bl	80071fe <USBD_LL_Resume>
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fd43 	bl	80072d2 <USBD_LL_IsoOUTIncomplete>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fcff 	bl	800726e <USBD_LL_IsoINIncomplete>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fd55 	bl	8007336 <USBD_LL_DevConnected>
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fd52 	bl	800734c <USBD_LL_DevDisconnected>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d13c      	bne.n	800893a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80088c0:	4a20      	ldr	r2, [pc, #128]	; (8008944 <USBD_LL_Init+0x94>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a1e      	ldr	r2, [pc, #120]	; (8008944 <USBD_LL_Init+0x94>)
 80088cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088d0:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <USBD_LL_Init+0x94>)
 80088d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088d8:	4b1a      	ldr	r3, [pc, #104]	; (8008944 <USBD_LL_Init+0x94>)
 80088da:	2204      	movs	r2, #4
 80088dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088de:	4b19      	ldr	r3, [pc, #100]	; (8008944 <USBD_LL_Init+0x94>)
 80088e0:	2202      	movs	r2, #2
 80088e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088e4:	4b17      	ldr	r3, [pc, #92]	; (8008944 <USBD_LL_Init+0x94>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088ea:	4b16      	ldr	r3, [pc, #88]	; (8008944 <USBD_LL_Init+0x94>)
 80088ec:	2202      	movs	r2, #2
 80088ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088f0:	4b14      	ldr	r3, [pc, #80]	; (8008944 <USBD_LL_Init+0x94>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088f6:	4b13      	ldr	r3, [pc, #76]	; (8008944 <USBD_LL_Init+0x94>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088fc:	4b11      	ldr	r3, [pc, #68]	; (8008944 <USBD_LL_Init+0x94>)
 80088fe:	2200      	movs	r2, #0
 8008900:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008902:	4b10      	ldr	r3, [pc, #64]	; (8008944 <USBD_LL_Init+0x94>)
 8008904:	2200      	movs	r2, #0
 8008906:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008908:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <USBD_LL_Init+0x94>)
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800890e:	480d      	ldr	r0, [pc, #52]	; (8008944 <USBD_LL_Init+0x94>)
 8008910:	f7f9 f8ee 	bl	8001af0 <HAL_PCD_Init>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800891a:	f7f8 fa9b 	bl	8000e54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800891e:	2180      	movs	r1, #128	; 0x80
 8008920:	4808      	ldr	r0, [pc, #32]	; (8008944 <USBD_LL_Init+0x94>)
 8008922:	f7fa fb46 	bl	8002fb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008926:	2240      	movs	r2, #64	; 0x40
 8008928:	2100      	movs	r1, #0
 800892a:	4806      	ldr	r0, [pc, #24]	; (8008944 <USBD_LL_Init+0x94>)
 800892c:	f7fa fafa 	bl	8002f24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008930:	2280      	movs	r2, #128	; 0x80
 8008932:	2101      	movs	r1, #1
 8008934:	4803      	ldr	r0, [pc, #12]	; (8008944 <USBD_LL_Init+0x94>)
 8008936:	f7fa faf5 	bl	8002f24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20001774 	.word	0x20001774

08008948 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800895e:	4618      	mov	r0, r3
 8008960:	f7f9 f9e3 	bl	8001d2a <HAL_PCD_Start>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f942 	bl	8008bf4 <USBD_Get_USB_Status>
 8008970:	4603      	mov	r3, r0
 8008972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008974:	7bbb      	ldrb	r3, [r7, #14]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	4608      	mov	r0, r1
 8008988:	4611      	mov	r1, r2
 800898a:	461a      	mov	r2, r3
 800898c:	4603      	mov	r3, r0
 800898e:	70fb      	strb	r3, [r7, #3]
 8008990:	460b      	mov	r3, r1
 8008992:	70bb      	strb	r3, [r7, #2]
 8008994:	4613      	mov	r3, r2
 8008996:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089a6:	78bb      	ldrb	r3, [r7, #2]
 80089a8:	883a      	ldrh	r2, [r7, #0]
 80089aa:	78f9      	ldrb	r1, [r7, #3]
 80089ac:	f7f9 feb4 	bl	8002718 <HAL_PCD_EP_Open>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f91c 	bl	8008bf4 <USBD_Get_USB_Status>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089e4:	78fa      	ldrb	r2, [r7, #3]
 80089e6:	4611      	mov	r1, r2
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7f9 fefd 	bl	80027e8 <HAL_PCD_EP_Close>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f8fd 	bl	8008bf4 <USBD_Get_USB_Status>
 80089fa:	4603      	mov	r3, r0
 80089fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f9 ffd5 	bl	80029d6 <HAL_PCD_EP_SetStall>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 f8de 	bl	8008bf4 <USBD_Get_USB_Status>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a60:	78fa      	ldrb	r2, [r7, #3]
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fa f81a 	bl	8002a9e <HAL_PCD_EP_ClrStall>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 f8bf 	bl	8008bf4 <USBD_Get_USB_Status>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da0b      	bge.n	8008ab8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aa6:	68f9      	ldr	r1, [r7, #12]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	440b      	add	r3, r1
 8008ab2:	333e      	adds	r3, #62	; 0x3e
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	e00b      	b.n	8008ad0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008abe:	68f9      	ldr	r1, [r7, #12]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	00db      	lsls	r3, r3, #3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	440b      	add	r3, r1
 8008aca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008ace:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008af6:	78fa      	ldrb	r2, [r7, #3]
 8008af8:	4611      	mov	r1, r2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f9 fde7 	bl	80026ce <HAL_PCD_SetAddress>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f874 	bl	8008bf4 <USBD_Get_USB_Status>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
 8008b26:	460b      	mov	r3, r1
 8008b28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b38:	7af9      	ldrb	r1, [r7, #11]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	f7f9 ff00 	bl	8002942 <HAL_PCD_EP_Transmit>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 f853 	bl	8008bf4 <USBD_Get_USB_Status>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b52:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b7a:	7af9      	ldrb	r1, [r7, #11]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	f7f9 fe7c 	bl	800287c <HAL_PCD_EP_Receive>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f832 	bl	8008bf4 <USBD_Get_USB_Status>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b94:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bb0:	78fa      	ldrb	r2, [r7, #3]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7f9 feac 	bl	8002912 <HAL_PCD_EP_GetRxCount>
 8008bba:	4603      	mov	r3, r0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <USBD_static_malloc+0x18>)
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	20001c80 	.word	0x20001c80

08008be0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]

}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d817      	bhi.n	8008c38 <USBD_Get_USB_Status+0x44>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <USBD_Get_USB_Status+0x1c>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c27 	.word	0x08008c27
 8008c18:	08008c2d 	.word	0x08008c2d
 8008c1c:	08008c33 	.word	0x08008c33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
    break;
 8008c24:	e00b      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2a:	e008      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c30:	e005      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c32:	2303      	movs	r3, #3
 8008c34:	73fb      	strb	r3, [r7, #15]
    break;
 8008c36:	e002      	b.n	8008c3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c3c:	bf00      	nop
  }
  return usb_status;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <__errno>:
 8008c4c:	4b01      	ldr	r3, [pc, #4]	; (8008c54 <__errno+0x8>)
 8008c4e:	6818      	ldr	r0, [r3, #0]
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	200000fc 	.word	0x200000fc

08008c58 <__libc_init_array>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	4d0d      	ldr	r5, [pc, #52]	; (8008c90 <__libc_init_array+0x38>)
 8008c5c:	4c0d      	ldr	r4, [pc, #52]	; (8008c94 <__libc_init_array+0x3c>)
 8008c5e:	1b64      	subs	r4, r4, r5
 8008c60:	10a4      	asrs	r4, r4, #2
 8008c62:	2600      	movs	r6, #0
 8008c64:	42a6      	cmp	r6, r4
 8008c66:	d109      	bne.n	8008c7c <__libc_init_array+0x24>
 8008c68:	4d0b      	ldr	r5, [pc, #44]	; (8008c98 <__libc_init_array+0x40>)
 8008c6a:	4c0c      	ldr	r4, [pc, #48]	; (8008c9c <__libc_init_array+0x44>)
 8008c6c:	f000 fc8e 	bl	800958c <_init>
 8008c70:	1b64      	subs	r4, r4, r5
 8008c72:	10a4      	asrs	r4, r4, #2
 8008c74:	2600      	movs	r6, #0
 8008c76:	42a6      	cmp	r6, r4
 8008c78:	d105      	bne.n	8008c86 <__libc_init_array+0x2e>
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}
 8008c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c80:	4798      	blx	r3
 8008c82:	3601      	adds	r6, #1
 8008c84:	e7ee      	b.n	8008c64 <__libc_init_array+0xc>
 8008c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c8a:	4798      	blx	r3
 8008c8c:	3601      	adds	r6, #1
 8008c8e:	e7f2      	b.n	8008c76 <__libc_init_array+0x1e>
 8008c90:	08009680 	.word	0x08009680
 8008c94:	08009680 	.word	0x08009680
 8008c98:	08009680 	.word	0x08009680
 8008c9c:	08009684 	.word	0x08009684

08008ca0 <memset>:
 8008ca0:	4402      	add	r2, r0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d100      	bne.n	8008caa <memset+0xa>
 8008ca8:	4770      	bx	lr
 8008caa:	f803 1b01 	strb.w	r1, [r3], #1
 8008cae:	e7f9      	b.n	8008ca4 <memset+0x4>

08008cb0 <siprintf>:
 8008cb0:	b40e      	push	{r1, r2, r3}
 8008cb2:	b500      	push	{lr}
 8008cb4:	b09c      	sub	sp, #112	; 0x70
 8008cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8008cb8:	9002      	str	r0, [sp, #8]
 8008cba:	9006      	str	r0, [sp, #24]
 8008cbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cc0:	4809      	ldr	r0, [pc, #36]	; (8008ce8 <siprintf+0x38>)
 8008cc2:	9107      	str	r1, [sp, #28]
 8008cc4:	9104      	str	r1, [sp, #16]
 8008cc6:	4909      	ldr	r1, [pc, #36]	; (8008cec <siprintf+0x3c>)
 8008cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ccc:	9105      	str	r1, [sp, #20]
 8008cce:	6800      	ldr	r0, [r0, #0]
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	a902      	add	r1, sp, #8
 8008cd4:	f000 f868 	bl	8008da8 <_svfiprintf_r>
 8008cd8:	9b02      	ldr	r3, [sp, #8]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	b01c      	add	sp, #112	; 0x70
 8008ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce4:	b003      	add	sp, #12
 8008ce6:	4770      	bx	lr
 8008ce8:	200000fc 	.word	0x200000fc
 8008cec:	ffff0208 	.word	0xffff0208

08008cf0 <__ssputs_r>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	688e      	ldr	r6, [r1, #8]
 8008cf6:	429e      	cmp	r6, r3
 8008cf8:	4682      	mov	sl, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	4690      	mov	r8, r2
 8008cfe:	461f      	mov	r7, r3
 8008d00:	d838      	bhi.n	8008d74 <__ssputs_r+0x84>
 8008d02:	898a      	ldrh	r2, [r1, #12]
 8008d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d08:	d032      	beq.n	8008d70 <__ssputs_r+0x80>
 8008d0a:	6825      	ldr	r5, [r4, #0]
 8008d0c:	6909      	ldr	r1, [r1, #16]
 8008d0e:	eba5 0901 	sub.w	r9, r5, r1
 8008d12:	6965      	ldr	r5, [r4, #20]
 8008d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	444b      	add	r3, r9
 8008d20:	106d      	asrs	r5, r5, #1
 8008d22:	429d      	cmp	r5, r3
 8008d24:	bf38      	it	cc
 8008d26:	461d      	movcc	r5, r3
 8008d28:	0553      	lsls	r3, r2, #21
 8008d2a:	d531      	bpl.n	8008d90 <__ssputs_r+0xa0>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f000 fb63 	bl	80093f8 <_malloc_r>
 8008d32:	4606      	mov	r6, r0
 8008d34:	b950      	cbnz	r0, 8008d4c <__ssputs_r+0x5c>
 8008d36:	230c      	movs	r3, #12
 8008d38:	f8ca 3000 	str.w	r3, [sl]
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4c:	6921      	ldr	r1, [r4, #16]
 8008d4e:	464a      	mov	r2, r9
 8008d50:	f000 fabe 	bl	80092d0 <memcpy>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	6126      	str	r6, [r4, #16]
 8008d62:	6165      	str	r5, [r4, #20]
 8008d64:	444e      	add	r6, r9
 8008d66:	eba5 0509 	sub.w	r5, r5, r9
 8008d6a:	6026      	str	r6, [r4, #0]
 8008d6c:	60a5      	str	r5, [r4, #8]
 8008d6e:	463e      	mov	r6, r7
 8008d70:	42be      	cmp	r6, r7
 8008d72:	d900      	bls.n	8008d76 <__ssputs_r+0x86>
 8008d74:	463e      	mov	r6, r7
 8008d76:	6820      	ldr	r0, [r4, #0]
 8008d78:	4632      	mov	r2, r6
 8008d7a:	4641      	mov	r1, r8
 8008d7c:	f000 fab6 	bl	80092ec <memmove>
 8008d80:	68a3      	ldr	r3, [r4, #8]
 8008d82:	1b9b      	subs	r3, r3, r6
 8008d84:	60a3      	str	r3, [r4, #8]
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	4433      	add	r3, r6
 8008d8a:	6023      	str	r3, [r4, #0]
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	e7db      	b.n	8008d48 <__ssputs_r+0x58>
 8008d90:	462a      	mov	r2, r5
 8008d92:	f000 fba5 	bl	80094e0 <_realloc_r>
 8008d96:	4606      	mov	r6, r0
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d1e1      	bne.n	8008d60 <__ssputs_r+0x70>
 8008d9c:	6921      	ldr	r1, [r4, #16]
 8008d9e:	4650      	mov	r0, sl
 8008da0:	f000 fabe 	bl	8009320 <_free_r>
 8008da4:	e7c7      	b.n	8008d36 <__ssputs_r+0x46>
	...

08008da8 <_svfiprintf_r>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4698      	mov	r8, r3
 8008dae:	898b      	ldrh	r3, [r1, #12]
 8008db0:	061b      	lsls	r3, r3, #24
 8008db2:	b09d      	sub	sp, #116	; 0x74
 8008db4:	4607      	mov	r7, r0
 8008db6:	460d      	mov	r5, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	d50e      	bpl.n	8008dda <_svfiprintf_r+0x32>
 8008dbc:	690b      	ldr	r3, [r1, #16]
 8008dbe:	b963      	cbnz	r3, 8008dda <_svfiprintf_r+0x32>
 8008dc0:	2140      	movs	r1, #64	; 0x40
 8008dc2:	f000 fb19 	bl	80093f8 <_malloc_r>
 8008dc6:	6028      	str	r0, [r5, #0]
 8008dc8:	6128      	str	r0, [r5, #16]
 8008dca:	b920      	cbnz	r0, 8008dd6 <_svfiprintf_r+0x2e>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	e0d1      	b.n	8008f7a <_svfiprintf_r+0x1d2>
 8008dd6:	2340      	movs	r3, #64	; 0x40
 8008dd8:	616b      	str	r3, [r5, #20]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dde:	2320      	movs	r3, #32
 8008de0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de8:	2330      	movs	r3, #48	; 0x30
 8008dea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f94 <_svfiprintf_r+0x1ec>
 8008dee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008df2:	f04f 0901 	mov.w	r9, #1
 8008df6:	4623      	mov	r3, r4
 8008df8:	469a      	mov	sl, r3
 8008dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dfe:	b10a      	cbz	r2, 8008e04 <_svfiprintf_r+0x5c>
 8008e00:	2a25      	cmp	r2, #37	; 0x25
 8008e02:	d1f9      	bne.n	8008df8 <_svfiprintf_r+0x50>
 8008e04:	ebba 0b04 	subs.w	fp, sl, r4
 8008e08:	d00b      	beq.n	8008e22 <_svfiprintf_r+0x7a>
 8008e0a:	465b      	mov	r3, fp
 8008e0c:	4622      	mov	r2, r4
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7ff ff6d 	bl	8008cf0 <__ssputs_r>
 8008e16:	3001      	adds	r0, #1
 8008e18:	f000 80aa 	beq.w	8008f70 <_svfiprintf_r+0x1c8>
 8008e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e1e:	445a      	add	r2, fp
 8008e20:	9209      	str	r2, [sp, #36]	; 0x24
 8008e22:	f89a 3000 	ldrb.w	r3, [sl]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 80a2 	beq.w	8008f70 <_svfiprintf_r+0x1c8>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e36:	f10a 0a01 	add.w	sl, sl, #1
 8008e3a:	9304      	str	r3, [sp, #16]
 8008e3c:	9307      	str	r3, [sp, #28]
 8008e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e42:	931a      	str	r3, [sp, #104]	; 0x68
 8008e44:	4654      	mov	r4, sl
 8008e46:	2205      	movs	r2, #5
 8008e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4c:	4851      	ldr	r0, [pc, #324]	; (8008f94 <_svfiprintf_r+0x1ec>)
 8008e4e:	f7f7 f9c7 	bl	80001e0 <memchr>
 8008e52:	9a04      	ldr	r2, [sp, #16]
 8008e54:	b9d8      	cbnz	r0, 8008e8e <_svfiprintf_r+0xe6>
 8008e56:	06d0      	lsls	r0, r2, #27
 8008e58:	bf44      	itt	mi
 8008e5a:	2320      	movmi	r3, #32
 8008e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e60:	0711      	lsls	r1, r2, #28
 8008e62:	bf44      	itt	mi
 8008e64:	232b      	movmi	r3, #43	; 0x2b
 8008e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e70:	d015      	beq.n	8008e9e <_svfiprintf_r+0xf6>
 8008e72:	9a07      	ldr	r2, [sp, #28]
 8008e74:	4654      	mov	r4, sl
 8008e76:	2000      	movs	r0, #0
 8008e78:	f04f 0c0a 	mov.w	ip, #10
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e82:	3b30      	subs	r3, #48	; 0x30
 8008e84:	2b09      	cmp	r3, #9
 8008e86:	d94e      	bls.n	8008f26 <_svfiprintf_r+0x17e>
 8008e88:	b1b0      	cbz	r0, 8008eb8 <_svfiprintf_r+0x110>
 8008e8a:	9207      	str	r2, [sp, #28]
 8008e8c:	e014      	b.n	8008eb8 <_svfiprintf_r+0x110>
 8008e8e:	eba0 0308 	sub.w	r3, r0, r8
 8008e92:	fa09 f303 	lsl.w	r3, r9, r3
 8008e96:	4313      	orrs	r3, r2
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	46a2      	mov	sl, r4
 8008e9c:	e7d2      	b.n	8008e44 <_svfiprintf_r+0x9c>
 8008e9e:	9b03      	ldr	r3, [sp, #12]
 8008ea0:	1d19      	adds	r1, r3, #4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	9103      	str	r1, [sp, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	bfbb      	ittet	lt
 8008eaa:	425b      	neglt	r3, r3
 8008eac:	f042 0202 	orrlt.w	r2, r2, #2
 8008eb0:	9307      	strge	r3, [sp, #28]
 8008eb2:	9307      	strlt	r3, [sp, #28]
 8008eb4:	bfb8      	it	lt
 8008eb6:	9204      	strlt	r2, [sp, #16]
 8008eb8:	7823      	ldrb	r3, [r4, #0]
 8008eba:	2b2e      	cmp	r3, #46	; 0x2e
 8008ebc:	d10c      	bne.n	8008ed8 <_svfiprintf_r+0x130>
 8008ebe:	7863      	ldrb	r3, [r4, #1]
 8008ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec2:	d135      	bne.n	8008f30 <_svfiprintf_r+0x188>
 8008ec4:	9b03      	ldr	r3, [sp, #12]
 8008ec6:	1d1a      	adds	r2, r3, #4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	9203      	str	r2, [sp, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	bfb8      	it	lt
 8008ed0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ed4:	3402      	adds	r4, #2
 8008ed6:	9305      	str	r3, [sp, #20]
 8008ed8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fa4 <_svfiprintf_r+0x1fc>
 8008edc:	7821      	ldrb	r1, [r4, #0]
 8008ede:	2203      	movs	r2, #3
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	f7f7 f97d 	bl	80001e0 <memchr>
 8008ee6:	b140      	cbz	r0, 8008efa <_svfiprintf_r+0x152>
 8008ee8:	2340      	movs	r3, #64	; 0x40
 8008eea:	eba0 000a 	sub.w	r0, r0, sl
 8008eee:	fa03 f000 	lsl.w	r0, r3, r0
 8008ef2:	9b04      	ldr	r3, [sp, #16]
 8008ef4:	4303      	orrs	r3, r0
 8008ef6:	3401      	adds	r4, #1
 8008ef8:	9304      	str	r3, [sp, #16]
 8008efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efe:	4826      	ldr	r0, [pc, #152]	; (8008f98 <_svfiprintf_r+0x1f0>)
 8008f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f04:	2206      	movs	r2, #6
 8008f06:	f7f7 f96b 	bl	80001e0 <memchr>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d038      	beq.n	8008f80 <_svfiprintf_r+0x1d8>
 8008f0e:	4b23      	ldr	r3, [pc, #140]	; (8008f9c <_svfiprintf_r+0x1f4>)
 8008f10:	bb1b      	cbnz	r3, 8008f5a <_svfiprintf_r+0x1b2>
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	3307      	adds	r3, #7
 8008f16:	f023 0307 	bic.w	r3, r3, #7
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	9303      	str	r3, [sp, #12]
 8008f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f20:	4433      	add	r3, r6
 8008f22:	9309      	str	r3, [sp, #36]	; 0x24
 8008f24:	e767      	b.n	8008df6 <_svfiprintf_r+0x4e>
 8008f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	e7a5      	b.n	8008e7c <_svfiprintf_r+0xd4>
 8008f30:	2300      	movs	r3, #0
 8008f32:	3401      	adds	r4, #1
 8008f34:	9305      	str	r3, [sp, #20]
 8008f36:	4619      	mov	r1, r3
 8008f38:	f04f 0c0a 	mov.w	ip, #10
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f42:	3a30      	subs	r2, #48	; 0x30
 8008f44:	2a09      	cmp	r2, #9
 8008f46:	d903      	bls.n	8008f50 <_svfiprintf_r+0x1a8>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0c5      	beq.n	8008ed8 <_svfiprintf_r+0x130>
 8008f4c:	9105      	str	r1, [sp, #20]
 8008f4e:	e7c3      	b.n	8008ed8 <_svfiprintf_r+0x130>
 8008f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f54:	4604      	mov	r4, r0
 8008f56:	2301      	movs	r3, #1
 8008f58:	e7f0      	b.n	8008f3c <_svfiprintf_r+0x194>
 8008f5a:	ab03      	add	r3, sp, #12
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <_svfiprintf_r+0x1f8>)
 8008f62:	a904      	add	r1, sp, #16
 8008f64:	4638      	mov	r0, r7
 8008f66:	f3af 8000 	nop.w
 8008f6a:	1c42      	adds	r2, r0, #1
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	d1d6      	bne.n	8008f1e <_svfiprintf_r+0x176>
 8008f70:	89ab      	ldrh	r3, [r5, #12]
 8008f72:	065b      	lsls	r3, r3, #25
 8008f74:	f53f af2c 	bmi.w	8008dd0 <_svfiprintf_r+0x28>
 8008f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f7a:	b01d      	add	sp, #116	; 0x74
 8008f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f80:	ab03      	add	r3, sp, #12
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	462a      	mov	r2, r5
 8008f86:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <_svfiprintf_r+0x1f8>)
 8008f88:	a904      	add	r1, sp, #16
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f000 f87a 	bl	8009084 <_printf_i>
 8008f90:	e7eb      	b.n	8008f6a <_svfiprintf_r+0x1c2>
 8008f92:	bf00      	nop
 8008f94:	08009644 	.word	0x08009644
 8008f98:	0800964e 	.word	0x0800964e
 8008f9c:	00000000 	.word	0x00000000
 8008fa0:	08008cf1 	.word	0x08008cf1
 8008fa4:	0800964a 	.word	0x0800964a

08008fa8 <_printf_common>:
 8008fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fac:	4616      	mov	r6, r2
 8008fae:	4699      	mov	r9, r3
 8008fb0:	688a      	ldr	r2, [r1, #8]
 8008fb2:	690b      	ldr	r3, [r1, #16]
 8008fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	bfb8      	it	lt
 8008fbc:	4613      	movlt	r3, r2
 8008fbe:	6033      	str	r3, [r6, #0]
 8008fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	b10a      	cbz	r2, 8008fce <_printf_common+0x26>
 8008fca:	3301      	adds	r3, #1
 8008fcc:	6033      	str	r3, [r6, #0]
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	0699      	lsls	r1, r3, #26
 8008fd2:	bf42      	ittt	mi
 8008fd4:	6833      	ldrmi	r3, [r6, #0]
 8008fd6:	3302      	addmi	r3, #2
 8008fd8:	6033      	strmi	r3, [r6, #0]
 8008fda:	6825      	ldr	r5, [r4, #0]
 8008fdc:	f015 0506 	ands.w	r5, r5, #6
 8008fe0:	d106      	bne.n	8008ff0 <_printf_common+0x48>
 8008fe2:	f104 0a19 	add.w	sl, r4, #25
 8008fe6:	68e3      	ldr	r3, [r4, #12]
 8008fe8:	6832      	ldr	r2, [r6, #0]
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	42ab      	cmp	r3, r5
 8008fee:	dc26      	bgt.n	800903e <_printf_common+0x96>
 8008ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ff4:	1e13      	subs	r3, r2, #0
 8008ff6:	6822      	ldr	r2, [r4, #0]
 8008ff8:	bf18      	it	ne
 8008ffa:	2301      	movne	r3, #1
 8008ffc:	0692      	lsls	r2, r2, #26
 8008ffe:	d42b      	bmi.n	8009058 <_printf_common+0xb0>
 8009000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009004:	4649      	mov	r1, r9
 8009006:	4638      	mov	r0, r7
 8009008:	47c0      	blx	r8
 800900a:	3001      	adds	r0, #1
 800900c:	d01e      	beq.n	800904c <_printf_common+0xa4>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	68e5      	ldr	r5, [r4, #12]
 8009012:	6832      	ldr	r2, [r6, #0]
 8009014:	f003 0306 	and.w	r3, r3, #6
 8009018:	2b04      	cmp	r3, #4
 800901a:	bf08      	it	eq
 800901c:	1aad      	subeq	r5, r5, r2
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	6922      	ldr	r2, [r4, #16]
 8009022:	bf0c      	ite	eq
 8009024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009028:	2500      	movne	r5, #0
 800902a:	4293      	cmp	r3, r2
 800902c:	bfc4      	itt	gt
 800902e:	1a9b      	subgt	r3, r3, r2
 8009030:	18ed      	addgt	r5, r5, r3
 8009032:	2600      	movs	r6, #0
 8009034:	341a      	adds	r4, #26
 8009036:	42b5      	cmp	r5, r6
 8009038:	d11a      	bne.n	8009070 <_printf_common+0xc8>
 800903a:	2000      	movs	r0, #0
 800903c:	e008      	b.n	8009050 <_printf_common+0xa8>
 800903e:	2301      	movs	r3, #1
 8009040:	4652      	mov	r2, sl
 8009042:	4649      	mov	r1, r9
 8009044:	4638      	mov	r0, r7
 8009046:	47c0      	blx	r8
 8009048:	3001      	adds	r0, #1
 800904a:	d103      	bne.n	8009054 <_printf_common+0xac>
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009054:	3501      	adds	r5, #1
 8009056:	e7c6      	b.n	8008fe6 <_printf_common+0x3e>
 8009058:	18e1      	adds	r1, r4, r3
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	2030      	movs	r0, #48	; 0x30
 800905e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009062:	4422      	add	r2, r4
 8009064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800906c:	3302      	adds	r3, #2
 800906e:	e7c7      	b.n	8009000 <_printf_common+0x58>
 8009070:	2301      	movs	r3, #1
 8009072:	4622      	mov	r2, r4
 8009074:	4649      	mov	r1, r9
 8009076:	4638      	mov	r0, r7
 8009078:	47c0      	blx	r8
 800907a:	3001      	adds	r0, #1
 800907c:	d0e6      	beq.n	800904c <_printf_common+0xa4>
 800907e:	3601      	adds	r6, #1
 8009080:	e7d9      	b.n	8009036 <_printf_common+0x8e>
	...

08009084 <_printf_i>:
 8009084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	7e0f      	ldrb	r7, [r1, #24]
 800908a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800908c:	2f78      	cmp	r7, #120	; 0x78
 800908e:	4691      	mov	r9, r2
 8009090:	4680      	mov	r8, r0
 8009092:	460c      	mov	r4, r1
 8009094:	469a      	mov	sl, r3
 8009096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800909a:	d807      	bhi.n	80090ac <_printf_i+0x28>
 800909c:	2f62      	cmp	r7, #98	; 0x62
 800909e:	d80a      	bhi.n	80090b6 <_printf_i+0x32>
 80090a0:	2f00      	cmp	r7, #0
 80090a2:	f000 80d8 	beq.w	8009256 <_printf_i+0x1d2>
 80090a6:	2f58      	cmp	r7, #88	; 0x58
 80090a8:	f000 80a3 	beq.w	80091f2 <_printf_i+0x16e>
 80090ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090b4:	e03a      	b.n	800912c <_printf_i+0xa8>
 80090b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ba:	2b15      	cmp	r3, #21
 80090bc:	d8f6      	bhi.n	80090ac <_printf_i+0x28>
 80090be:	a101      	add	r1, pc, #4	; (adr r1, 80090c4 <_printf_i+0x40>)
 80090c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090c4:	0800911d 	.word	0x0800911d
 80090c8:	08009131 	.word	0x08009131
 80090cc:	080090ad 	.word	0x080090ad
 80090d0:	080090ad 	.word	0x080090ad
 80090d4:	080090ad 	.word	0x080090ad
 80090d8:	080090ad 	.word	0x080090ad
 80090dc:	08009131 	.word	0x08009131
 80090e0:	080090ad 	.word	0x080090ad
 80090e4:	080090ad 	.word	0x080090ad
 80090e8:	080090ad 	.word	0x080090ad
 80090ec:	080090ad 	.word	0x080090ad
 80090f0:	0800923d 	.word	0x0800923d
 80090f4:	08009161 	.word	0x08009161
 80090f8:	0800921f 	.word	0x0800921f
 80090fc:	080090ad 	.word	0x080090ad
 8009100:	080090ad 	.word	0x080090ad
 8009104:	0800925f 	.word	0x0800925f
 8009108:	080090ad 	.word	0x080090ad
 800910c:	08009161 	.word	0x08009161
 8009110:	080090ad 	.word	0x080090ad
 8009114:	080090ad 	.word	0x080090ad
 8009118:	08009227 	.word	0x08009227
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	1d1a      	adds	r2, r3, #4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	602a      	str	r2, [r5, #0]
 8009124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800912c:	2301      	movs	r3, #1
 800912e:	e0a3      	b.n	8009278 <_printf_i+0x1f4>
 8009130:	6820      	ldr	r0, [r4, #0]
 8009132:	6829      	ldr	r1, [r5, #0]
 8009134:	0606      	lsls	r6, r0, #24
 8009136:	f101 0304 	add.w	r3, r1, #4
 800913a:	d50a      	bpl.n	8009152 <_printf_i+0xce>
 800913c:	680e      	ldr	r6, [r1, #0]
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	2e00      	cmp	r6, #0
 8009142:	da03      	bge.n	800914c <_printf_i+0xc8>
 8009144:	232d      	movs	r3, #45	; 0x2d
 8009146:	4276      	negs	r6, r6
 8009148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800914c:	485e      	ldr	r0, [pc, #376]	; (80092c8 <_printf_i+0x244>)
 800914e:	230a      	movs	r3, #10
 8009150:	e019      	b.n	8009186 <_printf_i+0x102>
 8009152:	680e      	ldr	r6, [r1, #0]
 8009154:	602b      	str	r3, [r5, #0]
 8009156:	f010 0f40 	tst.w	r0, #64	; 0x40
 800915a:	bf18      	it	ne
 800915c:	b236      	sxthne	r6, r6
 800915e:	e7ef      	b.n	8009140 <_printf_i+0xbc>
 8009160:	682b      	ldr	r3, [r5, #0]
 8009162:	6820      	ldr	r0, [r4, #0]
 8009164:	1d19      	adds	r1, r3, #4
 8009166:	6029      	str	r1, [r5, #0]
 8009168:	0601      	lsls	r1, r0, #24
 800916a:	d501      	bpl.n	8009170 <_printf_i+0xec>
 800916c:	681e      	ldr	r6, [r3, #0]
 800916e:	e002      	b.n	8009176 <_printf_i+0xf2>
 8009170:	0646      	lsls	r6, r0, #25
 8009172:	d5fb      	bpl.n	800916c <_printf_i+0xe8>
 8009174:	881e      	ldrh	r6, [r3, #0]
 8009176:	4854      	ldr	r0, [pc, #336]	; (80092c8 <_printf_i+0x244>)
 8009178:	2f6f      	cmp	r7, #111	; 0x6f
 800917a:	bf0c      	ite	eq
 800917c:	2308      	moveq	r3, #8
 800917e:	230a      	movne	r3, #10
 8009180:	2100      	movs	r1, #0
 8009182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009186:	6865      	ldr	r5, [r4, #4]
 8009188:	60a5      	str	r5, [r4, #8]
 800918a:	2d00      	cmp	r5, #0
 800918c:	bfa2      	ittt	ge
 800918e:	6821      	ldrge	r1, [r4, #0]
 8009190:	f021 0104 	bicge.w	r1, r1, #4
 8009194:	6021      	strge	r1, [r4, #0]
 8009196:	b90e      	cbnz	r6, 800919c <_printf_i+0x118>
 8009198:	2d00      	cmp	r5, #0
 800919a:	d04d      	beq.n	8009238 <_printf_i+0x1b4>
 800919c:	4615      	mov	r5, r2
 800919e:	fbb6 f1f3 	udiv	r1, r6, r3
 80091a2:	fb03 6711 	mls	r7, r3, r1, r6
 80091a6:	5dc7      	ldrb	r7, [r0, r7]
 80091a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091ac:	4637      	mov	r7, r6
 80091ae:	42bb      	cmp	r3, r7
 80091b0:	460e      	mov	r6, r1
 80091b2:	d9f4      	bls.n	800919e <_printf_i+0x11a>
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d10b      	bne.n	80091d0 <_printf_i+0x14c>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	07de      	lsls	r6, r3, #31
 80091bc:	d508      	bpl.n	80091d0 <_printf_i+0x14c>
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	6861      	ldr	r1, [r4, #4]
 80091c2:	4299      	cmp	r1, r3
 80091c4:	bfde      	ittt	le
 80091c6:	2330      	movle	r3, #48	; 0x30
 80091c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091d0:	1b52      	subs	r2, r2, r5
 80091d2:	6122      	str	r2, [r4, #16]
 80091d4:	f8cd a000 	str.w	sl, [sp]
 80091d8:	464b      	mov	r3, r9
 80091da:	aa03      	add	r2, sp, #12
 80091dc:	4621      	mov	r1, r4
 80091de:	4640      	mov	r0, r8
 80091e0:	f7ff fee2 	bl	8008fa8 <_printf_common>
 80091e4:	3001      	adds	r0, #1
 80091e6:	d14c      	bne.n	8009282 <_printf_i+0x1fe>
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	b004      	add	sp, #16
 80091ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f2:	4835      	ldr	r0, [pc, #212]	; (80092c8 <_printf_i+0x244>)
 80091f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091f8:	6829      	ldr	r1, [r5, #0]
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009200:	6029      	str	r1, [r5, #0]
 8009202:	061d      	lsls	r5, r3, #24
 8009204:	d514      	bpl.n	8009230 <_printf_i+0x1ac>
 8009206:	07df      	lsls	r7, r3, #31
 8009208:	bf44      	itt	mi
 800920a:	f043 0320 	orrmi.w	r3, r3, #32
 800920e:	6023      	strmi	r3, [r4, #0]
 8009210:	b91e      	cbnz	r6, 800921a <_printf_i+0x196>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	f023 0320 	bic.w	r3, r3, #32
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	2310      	movs	r3, #16
 800921c:	e7b0      	b.n	8009180 <_printf_i+0xfc>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	f043 0320 	orr.w	r3, r3, #32
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	2378      	movs	r3, #120	; 0x78
 8009228:	4828      	ldr	r0, [pc, #160]	; (80092cc <_printf_i+0x248>)
 800922a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800922e:	e7e3      	b.n	80091f8 <_printf_i+0x174>
 8009230:	0659      	lsls	r1, r3, #25
 8009232:	bf48      	it	mi
 8009234:	b2b6      	uxthmi	r6, r6
 8009236:	e7e6      	b.n	8009206 <_printf_i+0x182>
 8009238:	4615      	mov	r5, r2
 800923a:	e7bb      	b.n	80091b4 <_printf_i+0x130>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	6826      	ldr	r6, [r4, #0]
 8009240:	6961      	ldr	r1, [r4, #20]
 8009242:	1d18      	adds	r0, r3, #4
 8009244:	6028      	str	r0, [r5, #0]
 8009246:	0635      	lsls	r5, r6, #24
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	d501      	bpl.n	8009250 <_printf_i+0x1cc>
 800924c:	6019      	str	r1, [r3, #0]
 800924e:	e002      	b.n	8009256 <_printf_i+0x1d2>
 8009250:	0670      	lsls	r0, r6, #25
 8009252:	d5fb      	bpl.n	800924c <_printf_i+0x1c8>
 8009254:	8019      	strh	r1, [r3, #0]
 8009256:	2300      	movs	r3, #0
 8009258:	6123      	str	r3, [r4, #16]
 800925a:	4615      	mov	r5, r2
 800925c:	e7ba      	b.n	80091d4 <_printf_i+0x150>
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	1d1a      	adds	r2, r3, #4
 8009262:	602a      	str	r2, [r5, #0]
 8009264:	681d      	ldr	r5, [r3, #0]
 8009266:	6862      	ldr	r2, [r4, #4]
 8009268:	2100      	movs	r1, #0
 800926a:	4628      	mov	r0, r5
 800926c:	f7f6 ffb8 	bl	80001e0 <memchr>
 8009270:	b108      	cbz	r0, 8009276 <_printf_i+0x1f2>
 8009272:	1b40      	subs	r0, r0, r5
 8009274:	6060      	str	r0, [r4, #4]
 8009276:	6863      	ldr	r3, [r4, #4]
 8009278:	6123      	str	r3, [r4, #16]
 800927a:	2300      	movs	r3, #0
 800927c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009280:	e7a8      	b.n	80091d4 <_printf_i+0x150>
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	462a      	mov	r2, r5
 8009286:	4649      	mov	r1, r9
 8009288:	4640      	mov	r0, r8
 800928a:	47d0      	blx	sl
 800928c:	3001      	adds	r0, #1
 800928e:	d0ab      	beq.n	80091e8 <_printf_i+0x164>
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	079b      	lsls	r3, r3, #30
 8009294:	d413      	bmi.n	80092be <_printf_i+0x23a>
 8009296:	68e0      	ldr	r0, [r4, #12]
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	4298      	cmp	r0, r3
 800929c:	bfb8      	it	lt
 800929e:	4618      	movlt	r0, r3
 80092a0:	e7a4      	b.n	80091ec <_printf_i+0x168>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4632      	mov	r2, r6
 80092a6:	4649      	mov	r1, r9
 80092a8:	4640      	mov	r0, r8
 80092aa:	47d0      	blx	sl
 80092ac:	3001      	adds	r0, #1
 80092ae:	d09b      	beq.n	80091e8 <_printf_i+0x164>
 80092b0:	3501      	adds	r5, #1
 80092b2:	68e3      	ldr	r3, [r4, #12]
 80092b4:	9903      	ldr	r1, [sp, #12]
 80092b6:	1a5b      	subs	r3, r3, r1
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	dcf2      	bgt.n	80092a2 <_printf_i+0x21e>
 80092bc:	e7eb      	b.n	8009296 <_printf_i+0x212>
 80092be:	2500      	movs	r5, #0
 80092c0:	f104 0619 	add.w	r6, r4, #25
 80092c4:	e7f5      	b.n	80092b2 <_printf_i+0x22e>
 80092c6:	bf00      	nop
 80092c8:	08009655 	.word	0x08009655
 80092cc:	08009666 	.word	0x08009666

080092d0 <memcpy>:
 80092d0:	440a      	add	r2, r1
 80092d2:	4291      	cmp	r1, r2
 80092d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092d8:	d100      	bne.n	80092dc <memcpy+0xc>
 80092da:	4770      	bx	lr
 80092dc:	b510      	push	{r4, lr}
 80092de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092e6:	4291      	cmp	r1, r2
 80092e8:	d1f9      	bne.n	80092de <memcpy+0xe>
 80092ea:	bd10      	pop	{r4, pc}

080092ec <memmove>:
 80092ec:	4288      	cmp	r0, r1
 80092ee:	b510      	push	{r4, lr}
 80092f0:	eb01 0402 	add.w	r4, r1, r2
 80092f4:	d902      	bls.n	80092fc <memmove+0x10>
 80092f6:	4284      	cmp	r4, r0
 80092f8:	4623      	mov	r3, r4
 80092fa:	d807      	bhi.n	800930c <memmove+0x20>
 80092fc:	1e43      	subs	r3, r0, #1
 80092fe:	42a1      	cmp	r1, r4
 8009300:	d008      	beq.n	8009314 <memmove+0x28>
 8009302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800930a:	e7f8      	b.n	80092fe <memmove+0x12>
 800930c:	4402      	add	r2, r0
 800930e:	4601      	mov	r1, r0
 8009310:	428a      	cmp	r2, r1
 8009312:	d100      	bne.n	8009316 <memmove+0x2a>
 8009314:	bd10      	pop	{r4, pc}
 8009316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800931a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800931e:	e7f7      	b.n	8009310 <memmove+0x24>

08009320 <_free_r>:
 8009320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009322:	2900      	cmp	r1, #0
 8009324:	d044      	beq.n	80093b0 <_free_r+0x90>
 8009326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800932a:	9001      	str	r0, [sp, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f1a1 0404 	sub.w	r4, r1, #4
 8009332:	bfb8      	it	lt
 8009334:	18e4      	addlt	r4, r4, r3
 8009336:	f000 f913 	bl	8009560 <__malloc_lock>
 800933a:	4a1e      	ldr	r2, [pc, #120]	; (80093b4 <_free_r+0x94>)
 800933c:	9801      	ldr	r0, [sp, #4]
 800933e:	6813      	ldr	r3, [r2, #0]
 8009340:	b933      	cbnz	r3, 8009350 <_free_r+0x30>
 8009342:	6063      	str	r3, [r4, #4]
 8009344:	6014      	str	r4, [r2, #0]
 8009346:	b003      	add	sp, #12
 8009348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800934c:	f000 b90e 	b.w	800956c <__malloc_unlock>
 8009350:	42a3      	cmp	r3, r4
 8009352:	d908      	bls.n	8009366 <_free_r+0x46>
 8009354:	6825      	ldr	r5, [r4, #0]
 8009356:	1961      	adds	r1, r4, r5
 8009358:	428b      	cmp	r3, r1
 800935a:	bf01      	itttt	eq
 800935c:	6819      	ldreq	r1, [r3, #0]
 800935e:	685b      	ldreq	r3, [r3, #4]
 8009360:	1949      	addeq	r1, r1, r5
 8009362:	6021      	streq	r1, [r4, #0]
 8009364:	e7ed      	b.n	8009342 <_free_r+0x22>
 8009366:	461a      	mov	r2, r3
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	b10b      	cbz	r3, 8009370 <_free_r+0x50>
 800936c:	42a3      	cmp	r3, r4
 800936e:	d9fa      	bls.n	8009366 <_free_r+0x46>
 8009370:	6811      	ldr	r1, [r2, #0]
 8009372:	1855      	adds	r5, r2, r1
 8009374:	42a5      	cmp	r5, r4
 8009376:	d10b      	bne.n	8009390 <_free_r+0x70>
 8009378:	6824      	ldr	r4, [r4, #0]
 800937a:	4421      	add	r1, r4
 800937c:	1854      	adds	r4, r2, r1
 800937e:	42a3      	cmp	r3, r4
 8009380:	6011      	str	r1, [r2, #0]
 8009382:	d1e0      	bne.n	8009346 <_free_r+0x26>
 8009384:	681c      	ldr	r4, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	6053      	str	r3, [r2, #4]
 800938a:	4421      	add	r1, r4
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	e7da      	b.n	8009346 <_free_r+0x26>
 8009390:	d902      	bls.n	8009398 <_free_r+0x78>
 8009392:	230c      	movs	r3, #12
 8009394:	6003      	str	r3, [r0, #0]
 8009396:	e7d6      	b.n	8009346 <_free_r+0x26>
 8009398:	6825      	ldr	r5, [r4, #0]
 800939a:	1961      	adds	r1, r4, r5
 800939c:	428b      	cmp	r3, r1
 800939e:	bf04      	itt	eq
 80093a0:	6819      	ldreq	r1, [r3, #0]
 80093a2:	685b      	ldreq	r3, [r3, #4]
 80093a4:	6063      	str	r3, [r4, #4]
 80093a6:	bf04      	itt	eq
 80093a8:	1949      	addeq	r1, r1, r5
 80093aa:	6021      	streq	r1, [r4, #0]
 80093ac:	6054      	str	r4, [r2, #4]
 80093ae:	e7ca      	b.n	8009346 <_free_r+0x26>
 80093b0:	b003      	add	sp, #12
 80093b2:	bd30      	pop	{r4, r5, pc}
 80093b4:	20001ea0 	.word	0x20001ea0

080093b8 <sbrk_aligned>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	4e0e      	ldr	r6, [pc, #56]	; (80093f4 <sbrk_aligned+0x3c>)
 80093bc:	460c      	mov	r4, r1
 80093be:	6831      	ldr	r1, [r6, #0]
 80093c0:	4605      	mov	r5, r0
 80093c2:	b911      	cbnz	r1, 80093ca <sbrk_aligned+0x12>
 80093c4:	f000 f8bc 	bl	8009540 <_sbrk_r>
 80093c8:	6030      	str	r0, [r6, #0]
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f8b7 	bl	8009540 <_sbrk_r>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	d00a      	beq.n	80093ec <sbrk_aligned+0x34>
 80093d6:	1cc4      	adds	r4, r0, #3
 80093d8:	f024 0403 	bic.w	r4, r4, #3
 80093dc:	42a0      	cmp	r0, r4
 80093de:	d007      	beq.n	80093f0 <sbrk_aligned+0x38>
 80093e0:	1a21      	subs	r1, r4, r0
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 f8ac 	bl	8009540 <_sbrk_r>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d101      	bne.n	80093f0 <sbrk_aligned+0x38>
 80093ec:	f04f 34ff 	mov.w	r4, #4294967295
 80093f0:	4620      	mov	r0, r4
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
 80093f4:	20001ea4 	.word	0x20001ea4

080093f8 <_malloc_r>:
 80093f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093fc:	1ccd      	adds	r5, r1, #3
 80093fe:	f025 0503 	bic.w	r5, r5, #3
 8009402:	3508      	adds	r5, #8
 8009404:	2d0c      	cmp	r5, #12
 8009406:	bf38      	it	cc
 8009408:	250c      	movcc	r5, #12
 800940a:	2d00      	cmp	r5, #0
 800940c:	4607      	mov	r7, r0
 800940e:	db01      	blt.n	8009414 <_malloc_r+0x1c>
 8009410:	42a9      	cmp	r1, r5
 8009412:	d905      	bls.n	8009420 <_malloc_r+0x28>
 8009414:	230c      	movs	r3, #12
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	2600      	movs	r6, #0
 800941a:	4630      	mov	r0, r6
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	4e2e      	ldr	r6, [pc, #184]	; (80094dc <_malloc_r+0xe4>)
 8009422:	f000 f89d 	bl	8009560 <__malloc_lock>
 8009426:	6833      	ldr	r3, [r6, #0]
 8009428:	461c      	mov	r4, r3
 800942a:	bb34      	cbnz	r4, 800947a <_malloc_r+0x82>
 800942c:	4629      	mov	r1, r5
 800942e:	4638      	mov	r0, r7
 8009430:	f7ff ffc2 	bl	80093b8 <sbrk_aligned>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	4604      	mov	r4, r0
 8009438:	d14d      	bne.n	80094d6 <_malloc_r+0xde>
 800943a:	6834      	ldr	r4, [r6, #0]
 800943c:	4626      	mov	r6, r4
 800943e:	2e00      	cmp	r6, #0
 8009440:	d140      	bne.n	80094c4 <_malloc_r+0xcc>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	4631      	mov	r1, r6
 8009446:	4638      	mov	r0, r7
 8009448:	eb04 0803 	add.w	r8, r4, r3
 800944c:	f000 f878 	bl	8009540 <_sbrk_r>
 8009450:	4580      	cmp	r8, r0
 8009452:	d13a      	bne.n	80094ca <_malloc_r+0xd2>
 8009454:	6821      	ldr	r1, [r4, #0]
 8009456:	3503      	adds	r5, #3
 8009458:	1a6d      	subs	r5, r5, r1
 800945a:	f025 0503 	bic.w	r5, r5, #3
 800945e:	3508      	adds	r5, #8
 8009460:	2d0c      	cmp	r5, #12
 8009462:	bf38      	it	cc
 8009464:	250c      	movcc	r5, #12
 8009466:	4629      	mov	r1, r5
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff ffa5 	bl	80093b8 <sbrk_aligned>
 800946e:	3001      	adds	r0, #1
 8009470:	d02b      	beq.n	80094ca <_malloc_r+0xd2>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	442b      	add	r3, r5
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	e00e      	b.n	8009498 <_malloc_r+0xa0>
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	1b52      	subs	r2, r2, r5
 800947e:	d41e      	bmi.n	80094be <_malloc_r+0xc6>
 8009480:	2a0b      	cmp	r2, #11
 8009482:	d916      	bls.n	80094b2 <_malloc_r+0xba>
 8009484:	1961      	adds	r1, r4, r5
 8009486:	42a3      	cmp	r3, r4
 8009488:	6025      	str	r5, [r4, #0]
 800948a:	bf18      	it	ne
 800948c:	6059      	strne	r1, [r3, #4]
 800948e:	6863      	ldr	r3, [r4, #4]
 8009490:	bf08      	it	eq
 8009492:	6031      	streq	r1, [r6, #0]
 8009494:	5162      	str	r2, [r4, r5]
 8009496:	604b      	str	r3, [r1, #4]
 8009498:	4638      	mov	r0, r7
 800949a:	f104 060b 	add.w	r6, r4, #11
 800949e:	f000 f865 	bl	800956c <__malloc_unlock>
 80094a2:	f026 0607 	bic.w	r6, r6, #7
 80094a6:	1d23      	adds	r3, r4, #4
 80094a8:	1af2      	subs	r2, r6, r3
 80094aa:	d0b6      	beq.n	800941a <_malloc_r+0x22>
 80094ac:	1b9b      	subs	r3, r3, r6
 80094ae:	50a3      	str	r3, [r4, r2]
 80094b0:	e7b3      	b.n	800941a <_malloc_r+0x22>
 80094b2:	6862      	ldr	r2, [r4, #4]
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	bf0c      	ite	eq
 80094b8:	6032      	streq	r2, [r6, #0]
 80094ba:	605a      	strne	r2, [r3, #4]
 80094bc:	e7ec      	b.n	8009498 <_malloc_r+0xa0>
 80094be:	4623      	mov	r3, r4
 80094c0:	6864      	ldr	r4, [r4, #4]
 80094c2:	e7b2      	b.n	800942a <_malloc_r+0x32>
 80094c4:	4634      	mov	r4, r6
 80094c6:	6876      	ldr	r6, [r6, #4]
 80094c8:	e7b9      	b.n	800943e <_malloc_r+0x46>
 80094ca:	230c      	movs	r3, #12
 80094cc:	603b      	str	r3, [r7, #0]
 80094ce:	4638      	mov	r0, r7
 80094d0:	f000 f84c 	bl	800956c <__malloc_unlock>
 80094d4:	e7a1      	b.n	800941a <_malloc_r+0x22>
 80094d6:	6025      	str	r5, [r4, #0]
 80094d8:	e7de      	b.n	8009498 <_malloc_r+0xa0>
 80094da:	bf00      	nop
 80094dc:	20001ea0 	.word	0x20001ea0

080094e0 <_realloc_r>:
 80094e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e4:	4680      	mov	r8, r0
 80094e6:	4614      	mov	r4, r2
 80094e8:	460e      	mov	r6, r1
 80094ea:	b921      	cbnz	r1, 80094f6 <_realloc_r+0x16>
 80094ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	4611      	mov	r1, r2
 80094f2:	f7ff bf81 	b.w	80093f8 <_malloc_r>
 80094f6:	b92a      	cbnz	r2, 8009504 <_realloc_r+0x24>
 80094f8:	f7ff ff12 	bl	8009320 <_free_r>
 80094fc:	4625      	mov	r5, r4
 80094fe:	4628      	mov	r0, r5
 8009500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009504:	f000 f838 	bl	8009578 <_malloc_usable_size_r>
 8009508:	4284      	cmp	r4, r0
 800950a:	4607      	mov	r7, r0
 800950c:	d802      	bhi.n	8009514 <_realloc_r+0x34>
 800950e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009512:	d812      	bhi.n	800953a <_realloc_r+0x5a>
 8009514:	4621      	mov	r1, r4
 8009516:	4640      	mov	r0, r8
 8009518:	f7ff ff6e 	bl	80093f8 <_malloc_r>
 800951c:	4605      	mov	r5, r0
 800951e:	2800      	cmp	r0, #0
 8009520:	d0ed      	beq.n	80094fe <_realloc_r+0x1e>
 8009522:	42bc      	cmp	r4, r7
 8009524:	4622      	mov	r2, r4
 8009526:	4631      	mov	r1, r6
 8009528:	bf28      	it	cs
 800952a:	463a      	movcs	r2, r7
 800952c:	f7ff fed0 	bl	80092d0 <memcpy>
 8009530:	4631      	mov	r1, r6
 8009532:	4640      	mov	r0, r8
 8009534:	f7ff fef4 	bl	8009320 <_free_r>
 8009538:	e7e1      	b.n	80094fe <_realloc_r+0x1e>
 800953a:	4635      	mov	r5, r6
 800953c:	e7df      	b.n	80094fe <_realloc_r+0x1e>
	...

08009540 <_sbrk_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d06      	ldr	r5, [pc, #24]	; (800955c <_sbrk_r+0x1c>)
 8009544:	2300      	movs	r3, #0
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	602b      	str	r3, [r5, #0]
 800954c:	f7f7 fdbc 	bl	80010c8 <_sbrk>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d102      	bne.n	800955a <_sbrk_r+0x1a>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	b103      	cbz	r3, 800955a <_sbrk_r+0x1a>
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	20001ea8 	.word	0x20001ea8

08009560 <__malloc_lock>:
 8009560:	4801      	ldr	r0, [pc, #4]	; (8009568 <__malloc_lock+0x8>)
 8009562:	f000 b811 	b.w	8009588 <__retarget_lock_acquire_recursive>
 8009566:	bf00      	nop
 8009568:	20001eac 	.word	0x20001eac

0800956c <__malloc_unlock>:
 800956c:	4801      	ldr	r0, [pc, #4]	; (8009574 <__malloc_unlock+0x8>)
 800956e:	f000 b80c 	b.w	800958a <__retarget_lock_release_recursive>
 8009572:	bf00      	nop
 8009574:	20001eac 	.word	0x20001eac

08009578 <_malloc_usable_size_r>:
 8009578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957c:	1f18      	subs	r0, r3, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfbc      	itt	lt
 8009582:	580b      	ldrlt	r3, [r1, r0]
 8009584:	18c0      	addlt	r0, r0, r3
 8009586:	4770      	bx	lr

08009588 <__retarget_lock_acquire_recursive>:
 8009588:	4770      	bx	lr

0800958a <__retarget_lock_release_recursive>:
 800958a:	4770      	bx	lr

0800958c <_init>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	bf00      	nop
 8009590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009592:	bc08      	pop	{r3}
 8009594:	469e      	mov	lr, r3
 8009596:	4770      	bx	lr

08009598 <_fini>:
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959a:	bf00      	nop
 800959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959e:	bc08      	pop	{r3}
 80095a0:	469e      	mov	lr, r3
 80095a2:	4770      	bx	lr
