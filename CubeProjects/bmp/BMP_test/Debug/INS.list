
INS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800ac08  0800ac08  0001ac08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace8  0800ace8  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf0  0800acf0  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800acf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00001d48  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb0  20001eb0  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172b6  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000356a  00000000  00000000  0003744e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  0003a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001148  00000000  00000000  0003bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227e0  00000000  00000000  0003cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185c7  00000000  00000000  0005f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0baf  00000000  00000000  00077b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001386de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005608  00000000  00000000  00138730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abec 	.word	0x0800abec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0800abec 	.word	0x0800abec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <ms5611_init>:
static uint32_t ms5611_readRawTemp();
static uint32_t ms5611_readRawPressure();


static void ms5611_init()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	MS5611_DIS
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	481b      	ldr	r0, [pc, #108]	; (8000f74 <ms5611_init+0x78>)
 8000f06:	f001 fa1f 	bl	8002348 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f000 ff4a 	bl	8001da4 <HAL_Delay>

	ms5611_write(CMD_RESET);
 8000f10:	201e      	movs	r0, #30
 8000f12:	f000 f833 	bl	8000f7c <ms5611_write>
	HAL_Delay(10);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f000 ff44 	bl	8001da4 <HAL_Delay>

	prom[0] = ms5611_read16bits(CMD_PROM_C1);
 8000f1c:	20a2      	movs	r0, #162	; 0xa2
 8000f1e:	f000 f84b 	bl	8000fb8 <ms5611_read16bits>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <ms5611_init+0x7c>)
 8000f28:	801a      	strh	r2, [r3, #0]
	prom[1] = ms5611_read16bits(CMD_PROM_C2);
 8000f2a:	20a4      	movs	r0, #164	; 0xa4
 8000f2c:	f000 f844 	bl	8000fb8 <ms5611_read16bits>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <ms5611_init+0x7c>)
 8000f36:	805a      	strh	r2, [r3, #2]
	prom[2] = ms5611_read16bits(CMD_PROM_C3);
 8000f38:	20a6      	movs	r0, #166	; 0xa6
 8000f3a:	f000 f83d 	bl	8000fb8 <ms5611_read16bits>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <ms5611_init+0x7c>)
 8000f44:	809a      	strh	r2, [r3, #4]
	prom[3] = ms5611_read16bits(CMD_PROM_C4);
 8000f46:	20a8      	movs	r0, #168	; 0xa8
 8000f48:	f000 f836 	bl	8000fb8 <ms5611_read16bits>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <ms5611_init+0x7c>)
 8000f52:	80da      	strh	r2, [r3, #6]
	prom[4] = ms5611_read16bits(CMD_PROM_C5);
 8000f54:	20aa      	movs	r0, #170	; 0xaa
 8000f56:	f000 f82f 	bl	8000fb8 <ms5611_read16bits>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <ms5611_init+0x7c>)
 8000f60:	811a      	strh	r2, [r3, #8]
	prom[5] = ms5611_read16bits(CMD_PROM_C6);
 8000f62:	20ac      	movs	r0, #172	; 0xac
 8000f64:	f000 f828 	bl	8000fb8 <ms5611_read16bits>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <ms5611_init+0x7c>)
 8000f6e:	815a      	strh	r2, [r3, #10]
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40020800 	.word	0x40020800
 8000f78:	20000184 	.word	0x20000184

08000f7c <ms5611_write>:

static void ms5611_write(uint8_t data)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	MS5611_EN
 8000f86:	2200      	movs	r2, #0
 8000f88:	2110      	movs	r1, #16
 8000f8a:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <ms5611_write+0x34>)
 8000f8c:	f001 f9dc 	bl	8002348 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000f90:	1df9      	adds	r1, r7, #7
 8000f92:	2332      	movs	r3, #50	; 0x32
 8000f94:	2201      	movs	r2, #1
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <ms5611_write+0x38>)
 8000f98:	f003 fad1 	bl	800453e <HAL_SPI_Transmit>
	MS5611_DIS
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ms5611_write+0x34>)
 8000fa2:	f001 f9d1 	bl	8002348 <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	200001f0 	.word	0x200001f0

08000fb8 <ms5611_read16bits>:

static uint16_t ms5611_read16bits(uint8_t reg)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t byte[3];
	uint16_t return_value;
	MS5611_EN
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	480f      	ldr	r0, [pc, #60]	; (8001004 <ms5611_read16bits+0x4c>)
 8000fc8:	f001 f9be 	bl	8002348 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &reg, byte, 3, SPI_TIMEOUT);
 8000fcc:	f107 0208 	add.w	r2, r7, #8
 8000fd0:	1df9      	adds	r1, r7, #7
 8000fd2:	2332      	movs	r3, #50	; 0x32
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <ms5611_read16bits+0x50>)
 8000fda:	f003 fbec 	bl	80047b6 <HAL_SPI_TransmitReceive>
	MS5611_DIS
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <ms5611_read16bits+0x4c>)
 8000fe4:	f001 f9b0 	bl	8002348 <HAL_GPIO_WritePin>
	 * We dont care about byte[0] because that is what was recorded while
	 * we were sending the first byte of the cmd. Since the baro wasn't sending
	 * actual data at that time (it was listening for command), data[0] will
	 * contain garbage data (probably all 0's).
	 */
	return_value = ((uint16_t)byte[1]<<8) | (byte[2]);
 8000fe8:	7a7b      	ldrb	r3, [r7, #9]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	7abb      	ldrb	r3, [r7, #10]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	81fb      	strh	r3, [r7, #14]
	return return_value;
 8000ff8:	89fb      	ldrh	r3, [r7, #14]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40020800 	.word	0x40020800
 8001008:	200001f0 	.word	0x200001f0

0800100c <ms5611_read24bits>:

static uint32_t ms5611_read24bits(uint8_t reg)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	uint8_t byte[4];
	uint32_t return_value;
	MS5611_EN
 8001016:	2200      	movs	r2, #0
 8001018:	2110      	movs	r1, #16
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <ms5611_read24bits+0x4c>)
 800101c:	f001 f994 	bl	8002348 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &reg, byte, 4, SPI_TIMEOUT);
 8001020:	f107 0208 	add.w	r2, r7, #8
 8001024:	1df9      	adds	r1, r7, #7
 8001026:	2332      	movs	r3, #50	; 0x32
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2304      	movs	r3, #4
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <ms5611_read24bits+0x50>)
 800102e:	f003 fbc2 	bl	80047b6 <HAL_SPI_TransmitReceive>
	MS5611_DIS
 8001032:	2201      	movs	r2, #1
 8001034:	2110      	movs	r1, #16
 8001036:	4808      	ldr	r0, [pc, #32]	; (8001058 <ms5611_read24bits+0x4c>)
 8001038:	f001 f986 	bl	8002348 <HAL_GPIO_WritePin>
	return_value = ((uint32_t)byte[1]<<16) | ((uint32_t)(byte[2]<<8)) | (byte[3]);
 800103c:	7a7b      	ldrb	r3, [r7, #9]
 800103e:	041b      	lsls	r3, r3, #16
 8001040:	7aba      	ldrb	r2, [r7, #10]
 8001042:	0212      	lsls	r2, r2, #8
 8001044:	4313      	orrs	r3, r2
 8001046:	7afa      	ldrb	r2, [r7, #11]
 8001048:	4313      	orrs	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
	return return_value;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40020800 	.word	0x40020800
 800105c:	200001f0 	.word	0x200001f0

08001060 <ms5611_readRawTemp>:

static uint32_t ms5611_readRawTemp()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	uint32_t D2;
	//Convert temp
	ms5611_write(tempAddr);
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <ms5611_readRawTemp+0x2c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff86 	bl	8000f7c <ms5611_write>
	//Conversion Time
	HAL_Delay(convDelay);
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <ms5611_readRawTemp+0x30>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fe95 	bl	8001da4 <HAL_Delay>
	//Read ADC
	D2 = ms5611_read24bits(0x00);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff ffc6 	bl	800100c <ms5611_read24bits>
 8001080:	6078      	str	r0, [r7, #4]

	return D2;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000001 	.word	0x20000001
 8001090:	20000004 	.word	0x20000004

08001094 <ms5611_readRawPressure>:

static uint32_t ms5611_readRawPressure()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	uint32_t D1;
	//Convert pressure
	ms5611_write(pressAddr);
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <ms5611_readRawPressure+0x2c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff6c 	bl	8000f7c <ms5611_write>
	//Conversion time
	HAL_Delay(convDelay);
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <ms5611_readRawPressure+0x30>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fe7b 	bl	8001da4 <HAL_Delay>
	//Read ADC
	D1 = ms5611_read24bits(0x00);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff ffac 	bl	800100c <ms5611_read24bits>
 80010b4:	6078      	str	r0, [r7, #4]

	return D1;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000004 	.word	0x20000004

080010c8 <Barometer_init>:

void Barometer_init()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	ms5611_init();
 80010cc:	f7ff ff16 	bl	8000efc <ms5611_init>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <Barometer_getTemp>:
			break;
	}
}

int32_t Barometer_getTemp(bool calculate)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if (calculate)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <Barometer_getTemp+0x14>
	{
		Barometer_calculate();
 80010e4:	f000 f81c 	bl	8001120 <Barometer_calculate>
	}
	return temperature;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <Barometer_getTemp+0x20>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000190 	.word	0x20000190

080010f8 <Barometer_getPressure>:

int32_t Barometer_getPressure(bool calculate)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	if (calculate)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <Barometer_getPressure+0x14>
	{
		Barometer_calculate();
 8001108:	f000 f80a 	bl	8001120 <Barometer_calculate>
	}
	return pressure;
 800110c:	4b02      	ldr	r3, [pc, #8]	; (8001118 <Barometer_getPressure+0x20>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000194 	.word	0x20000194
 800111c:	00000000 	.word	0x00000000

08001120 <Barometer_calculate>:
	}
	return altitude;
}

void Barometer_calculate()
{
 8001120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001124:	b0d4      	sub	sp, #336	; 0x150
 8001126:	af00      	add	r7, sp, #0
	int32_t dT;
	int64_t TEMP, OFF, SENS, P;
	uint32_t D1, D2;
	float press, r, c;

	D1 = ms5611_readRawPressure();
 8001128:	f7ff ffb4 	bl	8001094 <ms5611_readRawPressure>
 800112c:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
	D2 = ms5611_readRawTemp();
 8001130:	f7ff ff96 	bl	8001060 <ms5611_readRawTemp>
 8001134:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

	dT = D2-((long)prom[4]*256);
 8001138:	4b73      	ldr	r3, [pc, #460]	; (8001308 <Barometer_calculate+0x1e8>)
 800113a:	891b      	ldrh	r3, [r3, #8]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	461a      	mov	r2, r3
 8001140:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	TEMP = 2000 + ((int64_t)dT * prom[5])/8388608;
 800114a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800114e:	17da      	asrs	r2, r3, #31
 8001150:	469a      	mov	sl, r3
 8001152:	4693      	mov	fp, r2
 8001154:	4b6c      	ldr	r3, [pc, #432]	; (8001308 <Barometer_calculate+0x1e8>)
 8001156:	895b      	ldrh	r3, [r3, #10]
 8001158:	b29b      	uxth	r3, r3
 800115a:	2200      	movs	r2, #0
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	fb04 f20b 	mul.w	r2, r4, fp
 8001164:	fb0a f305 	mul.w	r3, sl, r5
 8001168:	4413      	add	r3, r2
 800116a:	fbaa 8904 	umull	r8, r9, sl, r4
 800116e:	444b      	add	r3, r9
 8001170:	4699      	mov	r9, r3
 8001172:	4642      	mov	r2, r8
 8001174:	464b      	mov	r3, r9
 8001176:	2b00      	cmp	r3, #0
 8001178:	da07      	bge.n	800118a <Barometer_calculate+0x6a>
 800117a:	4964      	ldr	r1, [pc, #400]	; (800130c <Barometer_calculate+0x1ec>)
 800117c:	1851      	adds	r1, r2, r1
 800117e:	6539      	str	r1, [r7, #80]	; 0x50
 8001180:	f143 0300 	adc.w	r3, r3, #0
 8001184:	657b      	str	r3, [r7, #84]	; 0x54
 8001186:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800118a:	f04f 0000 	mov.w	r0, #0
 800118e:	f04f 0100 	mov.w	r1, #0
 8001192:	0dd0      	lsrs	r0, r2, #23
 8001194:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001198:	15d9      	asrs	r1, r3, #23
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 80011a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80011a4:	f143 0300 	adc.w	r3, r3, #0
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011aa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80011ae:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	OFF = (int64_t)prom[1] * 65536 + ((int64_t)prom[3] * dT ) / 128;
 80011b2:	4b55      	ldr	r3, [pc, #340]	; (8001308 <Barometer_calculate+0x1e8>)
 80011b4:	885b      	ldrh	r3, [r3, #2]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	2200      	movs	r2, #0
 80011ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80011be:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80011c2:	f04f 0400 	mov.w	r4, #0
 80011c6:	f04f 0500 	mov.w	r5, #0
 80011ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80011ce:	4613      	mov	r3, r2
 80011d0:	041d      	lsls	r5, r3, #16
 80011d2:	460b      	mov	r3, r1
 80011d4:	ea45 4513 	orr.w	r5, r5, r3, lsr #16
 80011d8:	460b      	mov	r3, r1
 80011da:	041c      	lsls	r4, r3, #16
 80011dc:	4b4a      	ldr	r3, [pc, #296]	; (8001308 <Barometer_calculate+0x1e8>)
 80011de:	88db      	ldrh	r3, [r3, #6]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2200      	movs	r2, #0
 80011e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80011e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80011ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011f0:	17da      	asrs	r2, r3, #31
 80011f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80011f6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80011fa:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80011fe:	464b      	mov	r3, r9
 8001200:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8001204:	4652      	mov	r2, sl
 8001206:	fb02 f203 	mul.w	r2, r2, r3
 800120a:	465b      	mov	r3, fp
 800120c:	4641      	mov	r1, r8
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	4642      	mov	r2, r8
 8001216:	4651      	mov	r1, sl
 8001218:	fba2 1201 	umull	r1, r2, r2, r1
 800121c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001220:	460a      	mov	r2, r1
 8001222:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001226:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800122a:	4413      	add	r3, r2
 800122c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001230:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001234:	2b00      	cmp	r3, #0
 8001236:	da07      	bge.n	8001248 <Barometer_calculate+0x128>
 8001238:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 800123c:	6439      	str	r1, [r7, #64]	; 0x40
 800123e:	f143 0300 	adc.w	r3, r3, #0
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
 8001244:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001248:	f04f 0000 	mov.w	r0, #0
 800124c:	f04f 0100 	mov.w	r1, #0
 8001250:	09d0      	lsrs	r0, r2, #7
 8001252:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001256:	11d9      	asrs	r1, r3, #7
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	18a1      	adds	r1, r4, r2
 800125e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001260:	eb45 0303 	adc.w	r3, r5, r3
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001266:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800126a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	SENS = (int64_t)prom[0] * 32768 + ((int64_t)prom[2] * dT) / 256;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <Barometer_calculate+0x1e8>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	2200      	movs	r2, #0
 8001276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800127a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800127e:	f04f 0400 	mov.w	r4, #0
 8001282:	f04f 0500 	mov.w	r5, #0
 8001286:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800128a:	4613      	mov	r3, r2
 800128c:	03dd      	lsls	r5, r3, #15
 800128e:	460b      	mov	r3, r1
 8001290:	ea45 4553 	orr.w	r5, r5, r3, lsr #17
 8001294:	460b      	mov	r3, r1
 8001296:	03dc      	lsls	r4, r3, #15
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <Barometer_calculate+0x1e8>)
 800129a:	889b      	ldrh	r3, [r3, #4]
 800129c:	b29b      	uxth	r3, r3
 800129e:	2200      	movs	r2, #0
 80012a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80012a4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80012a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012ac:	17da      	asrs	r2, r3, #31
 80012ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012b2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80012b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80012ba:	464b      	mov	r3, r9
 80012bc:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80012c0:	4652      	mov	r2, sl
 80012c2:	fb02 f203 	mul.w	r2, r2, r3
 80012c6:	465b      	mov	r3, fp
 80012c8:	4641      	mov	r1, r8
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	4642      	mov	r2, r8
 80012d2:	4651      	mov	r1, sl
 80012d4:	fba2 1201 	umull	r1, r2, r2, r1
 80012d8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80012dc:	460a      	mov	r2, r1
 80012de:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80012e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80012e6:	4413      	add	r3, r2
 80012e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80012ec:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da0d      	bge.n	8001310 <Barometer_calculate+0x1f0>
 80012f4:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 80012f8:	6339      	str	r1, [r7, #48]	; 0x30
 80012fa:	f143 0300 	adc.w	r3, r3, #0
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001300:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001304:	e004      	b.n	8001310 <Barometer_calculate+0x1f0>
 8001306:	bf00      	nop
 8001308:	20000184 	.word	0x20000184
 800130c:	007fffff 	.word	0x007fffff
 8001310:	f04f 0000 	mov.w	r0, #0
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	0a10      	lsrs	r0, r2, #8
 800131a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800131e:	1219      	asrs	r1, r3, #8
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	18a1      	adds	r1, r4, r2
 8001326:	62b9      	str	r1, [r7, #40]	; 0x28
 8001328:	eb45 0303 	adc.w	r3, r5, r3
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800132e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001332:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

	if (TEMP < 2000){   // second order temperature compensation
 8001336:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800133a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800133e:	f173 0300 	sbcs.w	r3, r3, #0
 8001342:	f280 80d4 	bge.w	80014ee <Barometer_calculate+0x3ce>
		int64_t T2 = (((int64_t)dT)*dT) >> 31;
 8001346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800134a:	17da      	asrs	r2, r3, #31
 800134c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001350:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001358:	17da      	asrs	r2, r3, #31
 800135a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800135e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001366:	462b      	mov	r3, r5
 8001368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800136c:	4642      	mov	r2, r8
 800136e:	fb02 f203 	mul.w	r2, r2, r3
 8001372:	464b      	mov	r3, r9
 8001374:	4621      	mov	r1, r4
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	4622      	mov	r2, r4
 800137e:	4641      	mov	r1, r8
 8001380:	fba2 1201 	umull	r1, r2, r2, r1
 8001384:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001388:	460a      	mov	r2, r1
 800138a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800138e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001392:	4413      	add	r3, r2
 8001394:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80013a4:	4621      	mov	r1, r4
 80013a6:	0fca      	lsrs	r2, r1, #31
 80013a8:	4629      	mov	r1, r5
 80013aa:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80013ae:	4629      	mov	r1, r5
 80013b0:	17cb      	asrs	r3, r1, #31
 80013b2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		int64_t Aux_64 = (TEMP-2000)*(TEMP-2000);
 80013b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80013ba:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80013be:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80013c2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80013c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013ca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80013ce:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 80013d2:	67b9      	str	r1, [r7, #120]	; 0x78
 80013d4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80013d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80013da:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80013de:	462b      	mov	r3, r5
 80013e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80013e4:	4642      	mov	r2, r8
 80013e6:	fb02 f203 	mul.w	r2, r2, r3
 80013ea:	464b      	mov	r3, r9
 80013ec:	4621      	mov	r1, r4
 80013ee:	fb01 f303 	mul.w	r3, r1, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	4622      	mov	r2, r4
 80013f6:	4641      	mov	r1, r8
 80013f8:	fba2 1201 	umull	r1, r2, r2, r1
 80013fc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001400:	460a      	mov	r2, r1
 8001402:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001406:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800140a:	4413      	add	r3, r2
 800140c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001410:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8001414:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001418:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		int64_t OFF2 = (5*Aux_64)>>1;
 800141c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001420:	4622      	mov	r2, r4
 8001422:	462b      	mov	r3, r5
 8001424:	f04f 0000 	mov.w	r0, #0
 8001428:	f04f 0100 	mov.w	r1, #0
 800142c:	0099      	lsls	r1, r3, #2
 800142e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001432:	0090      	lsls	r0, r2, #2
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	1911      	adds	r1, r2, r4
 800143a:	6739      	str	r1, [r7, #112]	; 0x70
 800143c:	416b      	adcs	r3, r5
 800143e:	677b      	str	r3, [r7, #116]	; 0x74
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800144c:	4621      	mov	r1, r4
 800144e:	084a      	lsrs	r2, r1, #1
 8001450:	4629      	mov	r1, r5
 8001452:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001456:	4629      	mov	r1, r5
 8001458:	104b      	asrs	r3, r1, #1
 800145a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		int64_t SENS2 = (5*Aux_64)>>2;
 800145e:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001462:	4622      	mov	r2, r4
 8001464:	462b      	mov	r3, r5
 8001466:	f04f 0000 	mov.w	r0, #0
 800146a:	f04f 0100 	mov.w	r1, #0
 800146e:	0099      	lsls	r1, r3, #2
 8001470:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001474:	0090      	lsls	r0, r2, #2
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	1911      	adds	r1, r2, r4
 800147c:	66b9      	str	r1, [r7, #104]	; 0x68
 800147e:	416b      	adcs	r3, r5
 8001480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800148e:	4621      	mov	r1, r4
 8001490:	088a      	lsrs	r2, r1, #2
 8001492:	4629      	mov	r1, r5
 8001494:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8001498:	4629      	mov	r1, r5
 800149a:	108b      	asrs	r3, r1, #2
 800149c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
		TEMP = TEMP - T2;
 80014a0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80014a4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014a8:	1a84      	subs	r4, r0, r2
 80014aa:	623c      	str	r4, [r7, #32]
 80014ac:	eb61 0303 	sbc.w	r3, r1, r3
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80014b6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
		OFF = OFF - OFF2;
 80014ba:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80014be:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80014c2:	1a84      	subs	r4, r0, r2
 80014c4:	61bc      	str	r4, [r7, #24]
 80014c6:	eb61 0303 	sbc.w	r3, r1, r3
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014d0:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
		SENS = SENS - SENS2;
 80014d4:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80014d8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80014dc:	1a84      	subs	r4, r0, r2
 80014de:	613c      	str	r4, [r7, #16]
 80014e0:	eb61 0303 	sbc.w	r3, r1, r3
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80014ea:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	}

	P = (D1*SENS/2097152 - OFF)/32768;
 80014ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80014f2:	2200      	movs	r2, #0
 80014f4:	663b      	str	r3, [r7, #96]	; 0x60
 80014f6:	667a      	str	r2, [r7, #100]	; 0x64
 80014f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001500:	462a      	mov	r2, r5
 8001502:	fb02 f203 	mul.w	r2, r2, r3
 8001506:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800150a:	4621      	mov	r1, r4
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001516:	4621      	mov	r1, r4
 8001518:	fba2 1201 	umull	r1, r2, r2, r1
 800151c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001520:	460a      	mov	r2, r1
 8001522:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001526:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800152a:	4413      	add	r3, r2
 800152c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001530:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001534:	2b00      	cmp	r3, #0
 8001536:	da07      	bge.n	8001548 <Barometer_calculate+0x428>
 8001538:	493f      	ldr	r1, [pc, #252]	; (8001638 <Barometer_calculate+0x518>)
 800153a:	1851      	adds	r1, r2, r1
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	f143 0300 	adc.w	r3, r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001548:	f04f 0000 	mov.w	r0, #0
 800154c:	f04f 0100 	mov.w	r1, #0
 8001550:	0d50      	lsrs	r0, r2, #21
 8001552:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001556:	1559      	asrs	r1, r3, #21
 8001558:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800155c:	1a84      	subs	r4, r0, r2
 800155e:	65bc      	str	r4, [r7, #88]	; 0x58
 8001560:	eb61 0303 	sbc.w	r3, r1, r3
 8001564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001566:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800156a:	2b00      	cmp	r3, #0
 800156c:	da08      	bge.n	8001580 <Barometer_calculate+0x460>
 800156e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001572:	1851      	adds	r1, r2, r1
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	f143 0300 	adc.w	r3, r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001580:	f04f 0000 	mov.w	r0, #0
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	0bd0      	lsrs	r0, r2, #15
 800158a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800158e:	13d9      	asrs	r1, r3, #15
 8001590:	e9c7 0140 	strd	r0, r1, [r7, #256]	; 0x100
	temperature = TEMP;
 8001594:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001598:	4a28      	ldr	r2, [pc, #160]	; (800163c <Barometer_calculate+0x51c>)
 800159a:	6013      	str	r3, [r2, #0]
	pressure = P;
 800159c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80015a0:	4a27      	ldr	r2, [pc, #156]	; (8001640 <Barometer_calculate+0x520>)
 80015a2:	6013      	str	r3, [r2, #0]

	press = (float)pressure;
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <Barometer_calculate+0x520>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b0:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
	r= press/101325.0;
 80015b4:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 80015b8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001644 <Barometer_calculate+0x524>
 80015bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c0:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
	c = 1.0/5.255;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <Barometer_calculate+0x528>)
 80015c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	altitude = (1 - pow(r,c))*44330.77;
 80015ca:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80015ce:	f7fe ffbb 	bl	8000548 <__aeabi_f2d>
 80015d2:	4604      	mov	r4, r0
 80015d4:	460d      	mov	r5, r1
 80015d6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80015da:	f7fe ffb5 	bl	8000548 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	ec43 2b11 	vmov	d1, r2, r3
 80015e6:	ec45 4b10 	vmov	d0, r4, r5
 80015ea:	f008 fbe3 	bl	8009db4 <pow>
 80015ee:	ec53 2b10 	vmov	r2, r3, d0
 80015f2:	f04f 0000 	mov.w	r0, #0
 80015f6:	4915      	ldr	r1, [pc, #84]	; (800164c <Barometer_calculate+0x52c>)
 80015f8:	f7fe fe46 	bl	8000288 <__aeabi_dsub>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	a30a      	add	r3, pc, #40	; (adr r3, 8001630 <Barometer_calculate+0x510>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7fe fff5 	bl	80005f8 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fa9f 	bl	8000b58 <__aeabi_d2f>
 800161a:	4603      	mov	r3, r0
 800161c:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <Barometer_calculate+0x530>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8001626:	46bd      	mov	sp, r7
 8001628:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800162c:	f3af 8000 	nop.w
 8001630:	a3d70a3d 	.word	0xa3d70a3d
 8001634:	40e5a558 	.word	0x40e5a558
 8001638:	001fffff 	.word	0x001fffff
 800163c:	20000190 	.word	0x20000190
 8001640:	20000194 	.word	0x20000194
 8001644:	47c5e680 	.word	0x47c5e680
 8001648:	3e42dcae 	.word	0x3e42dcae
 800164c:	3ff00000 	.word	0x3ff00000
 8001650:	20000198 	.word	0x20000198

08001654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b0c1      	sub	sp, #260	; 0x104
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165a:	f000 fb31 	bl	8001cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165e:	f000 f82b 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001662:	f000 f921 	bl	80018a8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001666:	f007 f9eb 	bl	8008a40 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800166a:	f000 f88f 	bl	800178c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800166e:	f000 f8f1 	bl	8001854 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001672:	f000 f8b9 	bl	80017e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // >>>> BMP start
  Barometer_init();
 8001676:	f7ff fd27 	bl	80010c8 <Barometer_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 sprintf(buf, "temp: %d Preassure: %d\n", Barometer_getTemp(1), Barometer_getPressure(1));
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff fd2a 	bl	80010d4 <Barometer_getTemp>
 8001680:	4604      	mov	r4, r0
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff fd38 	bl	80010f8 <Barometer_getPressure>
 8001688:	4603      	mov	r3, r0
 800168a:	4638      	mov	r0, r7
 800168c:	4622      	mov	r2, r4
 800168e:	4909      	ldr	r1, [pc, #36]	; (80016b4 <main+0x60>)
 8001690:	f007 ff22 	bl	80094d8 <siprintf>
	 CDC_Transmit_FS((uint8_t *)buf,strlen(buf));
 8001694:	463b      	mov	r3, r7
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fd9a 	bl	80001d0 <strlen>
 800169c:	4602      	mov	r2, r0
 800169e:	463b      	mov	r3, r7
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f007 fa8a 	bl	8008bbc <CDC_Transmit_FS>
	 HAL_Delay(1000);
 80016a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ac:	f000 fb7a 	bl	8001da4 <HAL_Delay>
  {
 80016b0:	e7e3      	b.n	800167a <main+0x26>
 80016b2:	bf00      	nop
 80016b4:	0800ac08 	.word	0x0800ac08

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	; 0x50
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	2230      	movs	r2, #48	; 0x30
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f007 fefe 	bl	80094c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <SystemClock_Config+0xcc>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <SystemClock_Config+0xcc>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <SystemClock_Config+0xcc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <SystemClock_Config+0xd0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a21      	ldr	r2, [pc, #132]	; (8001788 <SystemClock_Config+0xd0>)
 8001702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <SystemClock_Config+0xd0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001714:	2301      	movs	r3, #1
 8001716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171e:	2302      	movs	r3, #2
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001728:	2308      	movs	r3, #8
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800172c:	23a8      	movs	r3, #168	; 0xa8
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001730:	2302      	movs	r3, #2
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001734:	2307      	movs	r3, #7
 8001736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4618      	mov	r0, r3
 800173e:	f002 f9df 	bl	8003b00 <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001748:	f000 f90e 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174c:	230f      	movs	r3, #15
 800174e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001750:	2302      	movs	r3, #2
 8001752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800175c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2105      	movs	r1, #5
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fc40 	bl	8003ff0 <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001776:	f000 f8f7 	bl	8001968 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	3750      	adds	r7, #80	; 0x50
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000

0800178c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2C1_Init+0x50>)
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <MX_I2C1_Init+0x54>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_I2C1_Init+0x50>)
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_I2C1_Init+0x58>)
 800179a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_I2C1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_I2C1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_I2C1_Init+0x50>)
 80017aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_I2C1_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_I2C1_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <MX_I2C1_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_I2C1_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <MX_I2C1_Init+0x50>)
 80017ca:	f000 fdd7 	bl	800237c <HAL_I2C_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d4:	f000 f8c8 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000019c 	.word	0x2000019c
 80017e0:	40005400 	.word	0x40005400
 80017e4:	000186a0 	.word	0x000186a0

080017e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_SPI1_Init+0x64>)
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <MX_SPI1_Init+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_SPI1_Init+0x64>)
 8001814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_SPI1_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_SPI1_Init+0x64>)
 8001834:	220a      	movs	r2, #10
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_SPI1_Init+0x64>)
 800183a:	f002 fdf7 	bl	800442c <HAL_SPI_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001844:	f000 f890 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001f0 	.word	0x200001f0
 8001850:	40013000 	.word	0x40013000

08001854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_USART1_UART_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800188c:	f003 fa00 	bl	8004c90 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001896:	f000 f867 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000248 	.word	0x20000248
 80018a4:	40011000 	.word	0x40011000

080018a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <MX_GPIO_Init+0xb8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a26      	ldr	r2, [pc, #152]	; (8001960 <MX_GPIO_Init+0xb8>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <MX_GPIO_Init+0xb8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MX_GPIO_Init+0xb8>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <MX_GPIO_Init+0xb8>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_GPIO_Init+0xb8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <MX_GPIO_Init+0xb8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a18      	ldr	r2, [pc, #96]	; (8001960 <MX_GPIO_Init+0xb8>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <MX_GPIO_Init+0xb8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_GPIO_Init+0xb8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <MX_GPIO_Init+0xb8>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_GPIO_Init+0xb8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800192e:	2200      	movs	r2, #0
 8001930:	f24e 0130 	movw	r1, #57392	; 0xe030
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <MX_GPIO_Init+0xbc>)
 8001936:	f000 fd07 	bl	8002348 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800193a:	f24e 0330 	movw	r3, #57392	; 0xe030
 800193e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001940:	2301      	movs	r3, #1
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4804      	ldr	r0, [pc, #16]	; (8001964 <MX_GPIO_Init+0xbc>)
 8001954:	f000 fb5c 	bl	8002010 <HAL_GPIO_Init>

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40020800 	.word	0x40020800

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	e7fe      	b.n	8001970 <Error_Handler+0x8>
	...

08001974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_MspInit+0x4c>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_MspInit+0x4c>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_MspInit+0x4c>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_MspInit+0x4c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_I2C_MspInit+0x84>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12b      	bne.n	8001a3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_I2C_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_I2C_MspInit+0x88>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_I2C_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a02:	23c0      	movs	r3, #192	; 0xc0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a06:	2312      	movs	r3, #18
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a12:	2304      	movs	r3, #4
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <HAL_I2C_MspInit+0x8c>)
 8001a1e:	f000 faf7 	bl	8002010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_I2C_MspInit+0x88>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020400 	.word	0x40020400

08001a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_SPI_MspInit+0x84>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12b      	bne.n	8001ace <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_SPI_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aae:	23e0      	movs	r3, #224	; 0xe0
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001abe:	2305      	movs	r3, #5
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_SPI_MspInit+0x8c>)
 8001aca:	f000 faa1 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40013000 	.word	0x40013000
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_UART_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12c      	bne.n	8001b60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b10:	f043 0310 	orr.w	r3, r3, #16
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b50:	2307      	movs	r3, #7
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_UART_MspInit+0x8c>)
 8001b5c:	f000 fa58 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc0:	f000 f8d0 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <OTG_FS_IRQHandler+0x10>)
 8001bce:	f000 fe69 	bl	80028a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20001774 	.word	0x20001774

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f007 fc32 	bl	8009474 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20020000 	.word	0x20020000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	2000028c 	.word	0x2000028c
 8001c44:	20001eb0 	.word	0x20001eb0

08001c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <SystemInit+0x20>)
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <SystemInit+0x20>)
 8001c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c70:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c72:	490e      	ldr	r1, [pc, #56]	; (8001cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c88:	4c0b      	ldr	r4, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c96:	f7ff ffd7 	bl	8001c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f007 fbf1 	bl	8009480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9e:	f7ff fcd9 	bl	8001654 <main>
  bx  lr    
 8001ca2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cac:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001cb0:	0800acf8 	.word	0x0800acf8
  ldr r2, =_sbss
 8001cb4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001cb8:	20001eb0 	.word	0x20001eb0

08001cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC_IRQHandler>
	...

08001cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <HAL_Init+0x40>)
 8001cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_Init+0x40>)
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <HAL_Init+0x40>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 f94f 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff fe3e 	bl	8001974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f967 	bl	8001ff6 <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 f92f 	bl	8001fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	2000000c 	.word	0x2000000c

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000010 	.word	0x20000010
 8001d88:	20000290 	.word	0x20000290

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000290 	.word	0x20000290

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000010 	.word	0x20000010

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4907      	ldr	r1, [pc, #28]	; (8001e88 <__NVIC_EnableIRQ+0x38>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e100 	.word	0xe000e100

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	; (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff29 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff3e 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff8e 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff31 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffa2 	bl	8001f48 <SysTick_Config>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e16b      	b.n	8002304 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	f040 815a 	bne.w	80022fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d005      	beq.n	8002062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205e:	2b02      	cmp	r3, #2
 8002060:	d130      	bne.n	80020c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002098:	2201      	movs	r2, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 0201 	and.w	r2, r3, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d017      	beq.n	8002100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d123      	bne.n	8002154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	69b9      	ldr	r1, [r7, #24]
 8002150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0203 	and.w	r2, r3, #3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80b4 	beq.w	80022fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b60      	ldr	r3, [pc, #384]	; (800231c <HAL_GPIO_Init+0x30c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a5f      	ldr	r2, [pc, #380]	; (800231c <HAL_GPIO_Init+0x30c>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_GPIO_Init+0x30c>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b2:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <HAL_GPIO_Init+0x310>)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_GPIO_Init+0x314>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02b      	beq.n	8002236 <HAL_GPIO_Init+0x226>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a51      	ldr	r2, [pc, #324]	; (8002328 <HAL_GPIO_Init+0x318>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d025      	beq.n	8002232 <HAL_GPIO_Init+0x222>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a50      	ldr	r2, [pc, #320]	; (800232c <HAL_GPIO_Init+0x31c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01f      	beq.n	800222e <HAL_GPIO_Init+0x21e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4f      	ldr	r2, [pc, #316]	; (8002330 <HAL_GPIO_Init+0x320>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x21a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4e      	ldr	r2, [pc, #312]	; (8002334 <HAL_GPIO_Init+0x324>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x216>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4d      	ldr	r2, [pc, #308]	; (8002338 <HAL_GPIO_Init+0x328>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x212>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4c      	ldr	r2, [pc, #304]	; (800233c <HAL_GPIO_Init+0x32c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x20e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4b      	ldr	r2, [pc, #300]	; (8002340 <HAL_GPIO_Init+0x330>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x20a>
 8002216:	2307      	movs	r3, #7
 8002218:	e00e      	b.n	8002238 <HAL_GPIO_Init+0x228>
 800221a:	2308      	movs	r3, #8
 800221c:	e00c      	b.n	8002238 <HAL_GPIO_Init+0x228>
 800221e:	2306      	movs	r3, #6
 8002220:	e00a      	b.n	8002238 <HAL_GPIO_Init+0x228>
 8002222:	2305      	movs	r3, #5
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x228>
 8002226:	2304      	movs	r3, #4
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x228>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x228>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x228>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x228>
 8002236:	2300      	movs	r3, #0
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002248:	4935      	ldr	r1, [pc, #212]	; (8002320 <HAL_GPIO_Init+0x310>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_GPIO_Init+0x334>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227a:	4a32      	ldr	r2, [pc, #200]	; (8002344 <HAL_GPIO_Init+0x334>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002280:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_GPIO_Init+0x334>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_GPIO_Init+0x334>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <HAL_GPIO_Init+0x334>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_GPIO_Init+0x334>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_GPIO_Init+0x334>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f8:	4a12      	ldr	r2, [pc, #72]	; (8002344 <HAL_GPIO_Init+0x334>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	f67f ae90 	bls.w	800202c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40013800 	.word	0x40013800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400
 800232c:	40020800 	.word	0x40020800
 8002330:	40020c00 	.word	0x40020c00
 8002334:	40021000 	.word	0x40021000
 8002338:	40021400 	.word	0x40021400
 800233c:	40021800 	.word	0x40021800
 8002340:	40021c00 	.word	0x40021c00
 8002344:	40013c00 	.word	0x40013c00

08002348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
 8002354:	4613      	mov	r3, r2
 8002356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002358:	787b      	ldrb	r3, [r7, #1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002364:	e003      	b.n	800236e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002366:	887b      	ldrh	r3, [r7, #2]
 8002368:	041a      	lsls	r2, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	619a      	str	r2, [r3, #24]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e12b      	b.n	80025e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fb0e 	bl	80019c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023e0:	f001 fffc 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 80023e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a81      	ldr	r2, [pc, #516]	; (80025f0 <HAL_I2C_Init+0x274>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d807      	bhi.n	8002400 <HAL_I2C_Init+0x84>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a80      	ldr	r2, [pc, #512]	; (80025f4 <HAL_I2C_Init+0x278>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bf94      	ite	ls
 80023f8:	2301      	movls	r3, #1
 80023fa:	2300      	movhi	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e006      	b.n	800240e <HAL_I2C_Init+0x92>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a7d      	ldr	r2, [pc, #500]	; (80025f8 <HAL_I2C_Init+0x27c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	bf94      	ite	ls
 8002408:	2301      	movls	r3, #1
 800240a:	2300      	movhi	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0e7      	b.n	80025e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a78      	ldr	r2, [pc, #480]	; (80025fc <HAL_I2C_Init+0x280>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a6a      	ldr	r2, [pc, #424]	; (80025f0 <HAL_I2C_Init+0x274>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d802      	bhi.n	8002450 <HAL_I2C_Init+0xd4>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3301      	adds	r3, #1
 800244e:	e009      	b.n	8002464 <HAL_I2C_Init+0xe8>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	4a69      	ldr	r2, [pc, #420]	; (8002600 <HAL_I2C_Init+0x284>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	3301      	adds	r3, #1
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	430b      	orrs	r3, r1
 800246a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	495c      	ldr	r1, [pc, #368]	; (80025f0 <HAL_I2C_Init+0x274>)
 8002480:	428b      	cmp	r3, r1
 8002482:	d819      	bhi.n	80024b8 <HAL_I2C_Init+0x13c>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e59      	subs	r1, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002492:	1c59      	adds	r1, r3, #1
 8002494:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002498:	400b      	ands	r3, r1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_I2C_Init+0x138>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1e59      	subs	r1, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b2:	e051      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e04f      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d111      	bne.n	80024e4 <HAL_I2C_Init+0x168>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1e58      	subs	r0, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	e012      	b.n	800250a <HAL_I2C_Init+0x18e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Init+0x196>
 800250e:	2301      	movs	r3, #1
 8002510:	e022      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10e      	bne.n	8002538 <HAL_I2C_Init+0x1bc>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e58      	subs	r0, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	440b      	add	r3, r1
 8002528:	fbb0 f3f3 	udiv	r3, r0, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002536:	e00f      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e58      	subs	r0, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	0099      	lsls	r1, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	fbb0 f3f3 	udiv	r3, r0, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	6809      	ldr	r1, [r1, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6911      	ldr	r1, [r2, #16]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430b      	orrs	r3, r1
 800259a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	000186a0 	.word	0x000186a0
 80025f4:	001e847f 	.word	0x001e847f
 80025f8:	003d08ff 	.word	0x003d08ff
 80025fc:	431bde83 	.word	0x431bde83
 8002600:	10624dd3 	.word	0x10624dd3

08002604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002606:	b08f      	sub	sp, #60	; 0x3c
 8002608:	af0a      	add	r7, sp, #40	; 0x28
 800260a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e10f      	b.n	8002836 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f006 fc0b 	bl	8008e4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fef2 	bl	800543e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	687e      	ldr	r6, [r7, #4]
 8002662:	466d      	mov	r5, sp
 8002664:	f106 0410 	add.w	r4, r6, #16
 8002668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800266a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800266c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800266e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002674:	e885 0003 	stmia.w	r5, {r0, r1}
 8002678:	1d33      	adds	r3, r6, #4
 800267a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f002 fdc9 	bl	8005214 <USB_CoreInit>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0d0      	b.n	8002836 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fee0 	bl	8005460 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e04a      	b.n	800273c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	333d      	adds	r3, #61	; 0x3d
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	333c      	adds	r3, #60	; 0x3c
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	b298      	uxth	r0, r3
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	3344      	adds	r3, #68	; 0x44
 80026e2:	4602      	mov	r2, r0
 80026e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3340      	adds	r3, #64	; 0x40
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3348      	adds	r3, #72	; 0x48
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	334c      	adds	r3, #76	; 0x4c
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3354      	adds	r3, #84	; 0x54
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3301      	adds	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	d3af      	bcc.n	80026a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e044      	b.n	80027d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d3b5      	bcc.n	800274c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	687e      	ldr	r6, [r7, #4]
 80027e8:	466d      	mov	r5, sp
 80027ea:	f106 0410 	add.w	r4, r6, #16
 80027ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80027fe:	1d33      	adds	r3, r6, #4
 8002800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f002 fe78 	bl	80054f8 <USB_DevInit>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00d      	b.n	8002836 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 ffc7 	bl	80067c2 <USB_DevDisconnect>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800283e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_PCD_Start+0x1c>
 8002856:	2302      	movs	r3, #2
 8002858:	e020      	b.n	800289c <HAL_PCD_Start+0x5e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	2b01      	cmp	r3, #1
 8002868:	d109      	bne.n	800287e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fdca 	bl	800541c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f003 ff77 	bl	8006780 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b08d      	sub	sp, #52	; 0x34
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 f835 	bl	800692a <USB_GetMode>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 848a 	bne.w	80031dc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 ff99 	bl	8006804 <USB_ReadInterrupts>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8480 	beq.w	80031da <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 ff86 	bl	8006804 <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d107      	bne.n	8002912 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f002 0202 	and.w	r2, r2, #2
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 ff74 	bl	8006804 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b10      	cmp	r3, #16
 8002924:	d161      	bne.n	80029ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0210 	bic.w	r2, r2, #16
 8002934:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	3304      	adds	r3, #4
 8002954:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	0c5b      	lsrs	r3, r3, #17
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	2b02      	cmp	r3, #2
 8002960:	d124      	bne.n	80029ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d035      	beq.n	80029da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297c:	b29b      	uxth	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	6a38      	ldr	r0, [r7, #32]
 8002982:	f003 fdab 	bl	80064dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002992:	441a      	add	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	6a1a      	ldr	r2, [r3, #32]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a4:	441a      	add	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	621a      	str	r2, [r3, #32]
 80029aa:	e016      	b.n	80029da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	0c5b      	lsrs	r3, r3, #17
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d110      	bne.n	80029da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029be:	2208      	movs	r2, #8
 80029c0:	4619      	mov	r1, r3
 80029c2:	6a38      	ldr	r0, [r7, #32]
 80029c4:	f003 fd8a 	bl	80064dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d4:	441a      	add	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0210 	orr.w	r2, r2, #16
 80029e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 ff08 	bl	8006804 <USB_ReadInterrupts>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029fe:	f040 80a7 	bne.w	8002b50 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 ff0d 	bl	800682a <USB_ReadDevAllOutEpInterrupt>
 8002a10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a12:	e099      	b.n	8002b48 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 808e 	beq.w	8002b3c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 ff31 	bl	8006892 <USB_ReadDevOutEPInterrupt>
 8002a30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00c      	beq.n	8002a56 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fec3 	bl	80037dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00c      	beq.n	8002a7a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2308      	movs	r3, #8
 8002a70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 ff99 	bl	80039ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a90:	461a      	mov	r2, r3
 8002a92:	2310      	movs	r3, #16
 8002a94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d030      	beq.n	8002b02 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d109      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002abe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	78db      	ldrb	r3, [r3, #3]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f006 fab4 	bl	8009058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afc:	461a      	mov	r2, r3
 8002afe:	2302      	movs	r3, #2
 8002b00:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b34:	461a      	mov	r2, r3
 8002b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b3a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	3301      	adds	r3, #1
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f47f af62 	bne.w	8002a14 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 fe55 	bl	8006804 <USB_ReadInterrupts>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b64:	f040 80db 	bne.w	8002d1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 fe76 	bl	800685e <USB_ReadDevAllInEpInterrupt>
 8002b72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b78:	e0cd      	b.n	8002d16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80c2 	beq.w	8002d0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f003 fe9c 	bl	80068ce <USB_ReadDevInEPInterrupt>
 8002b96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d057      	beq.n	8002c52 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	2201      	movs	r2, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69f9      	ldr	r1, [r7, #28]
 8002bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d132      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	334c      	adds	r3, #76	; 0x4c
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4403      	add	r3, r0
 8002c00:	3348      	adds	r3, #72	; 0x48
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4419      	add	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4403      	add	r3, r0
 8002c14:	334c      	adds	r3, #76	; 0x4c
 8002c16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d113      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x3a2>
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3354      	adds	r3, #84	; 0x54
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d108      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2101      	movs	r1, #1
 8002c42:	f003 fea3 	bl	800698c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f006 f97e 	bl	8008f4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c84:	461a      	mov	r2, r3
 8002c86:	2310      	movs	r3, #16
 8002c88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2340      	movs	r3, #64	; 0x40
 8002ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d023      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb2:	6a38      	ldr	r0, [r7, #32]
 8002cb4:	f002 fd84 	bl	80057c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	3338      	adds	r3, #56	; 0x38
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3304      	adds	r3, #4
 8002cca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	78db      	ldrb	r3, [r3, #3]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f006 f9cb 	bl	800907c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fcdb 	bl	80036c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f47f af2e 	bne.w	8002b7a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fd6e 	bl	8006804 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d32:	d122      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d108      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fec3 	bl	8003ae8 <HAL_PCDEx_LPM_Callback>
 8002d62:	e002      	b.n	8002d6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f006 f969 	bl	800903c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fd40 	bl	8006804 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d8e:	d112      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f006 f925 	bl	8008ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002db4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 fd22 	bl	8006804 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dca:	f040 80b7 	bne.w	8002f3c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2110      	movs	r1, #16
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fce9 	bl	80057c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df2:	e046      	b.n	8002e82 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e00:	461a      	mov	r2, r3
 8002e02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e18:	0151      	lsls	r1, r2, #5
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e4c:	0151      	lsls	r1, r2, #5
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	440a      	add	r2, r1
 8002e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e6c:	0151      	lsls	r1, r2, #5
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	440a      	add	r2, r1
 8002e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	3301      	adds	r3, #1
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d3b3      	bcc.n	8002df4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d016      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb8:	f043 030b 	orr.w	r3, r3, #11
 8002ebc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ece:	f043 030b 	orr.w	r3, r3, #11
 8002ed2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed4:	e015      	b.n	8002f02 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ee8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002eec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002efc:	f043 030b 	orr.w	r3, r3, #11
 8002f00:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f14:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f26:	461a      	mov	r2, r3
 8002f28:	f003 fd30 	bl	800698c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fc5f 	bl	8006804 <USB_ReadInterrupts>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f50:	d124      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fcf5 	bl	8006946 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 fcaa 	bl	80058ba <USB_GetDevSpeed>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681c      	ldr	r4, [r3, #0]
 8002f72:	f001 fa27 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 8002f76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4620      	mov	r0, r4
 8002f82:	f002 f9a9 	bl	80052d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f006 f809 	bl	8008f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fc2f 	bl	8006804 <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d10a      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f005 ffe6 	bl	8008f82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f002 0208 	and.w	r2, r2, #8
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fc1a 	bl	8006804 <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d122      	bne.n	8003020 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	e014      	b.n	8003016 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	b2db      	uxtb	r3, r3
 8003008:	4619      	mov	r1, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fb27 	bl	800365e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	3301      	adds	r3, #1
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	429a      	cmp	r2, r3
 800301e:	d3e5      	bcc.n	8002fec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f003 fbed 	bl	8006804 <USB_ReadInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003034:	d13b      	bne.n	80030ae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003036:	2301      	movs	r3, #1
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	e02b      	b.n	8003094 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3340      	adds	r3, #64	; 0x40
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d115      	bne.n	800308e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003062:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003064:	2b00      	cmp	r3, #0
 8003066:	da12      	bge.n	800308e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	333f      	adds	r3, #63	; 0x3f
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fae8 	bl	800365e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	3301      	adds	r3, #1
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309a:	429a      	cmp	r2, r3
 800309c:	d3ce      	bcc.n	800303c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fba6 	bl	8006804 <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030c2:	d155      	bne.n	8003170 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c4:	2301      	movs	r3, #1
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
 80030c8:	e045      	b.n	8003156 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d12e      	bne.n	8003150 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da2b      	bge.n	8003150 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003104:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003108:	429a      	cmp	r2, r3
 800310a:	d121      	bne.n	8003150 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800314c:	6053      	str	r3, [r2, #4]
            break;
 800314e:	e007      	b.n	8003160 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	3301      	adds	r3, #1
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	429a      	cmp	r2, r3
 800315e:	d3b4      	bcc.n	80030ca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800316e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fb45 	bl	8006804 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d10a      	bne.n	800319c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f005 ff8a 	bl	80090a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800319a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fb2f 	bl	8006804 <USB_ReadInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d115      	bne.n	80031dc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f005 ff7a 	bl	80090bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	e000      	b.n	80031dc <HAL_PCD_IRQHandler+0x938>
      return;
 80031da:	bf00      	nop
    }
  }
}
 80031dc:	3734      	adds	r7, #52	; 0x34
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}

080031e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_PCD_SetAddress+0x1a>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e013      	b.n	8003224 <HAL_PCD_SetAddress+0x42>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fa8d 	bl	8006734 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	461a      	mov	r2, r3
 800323a:	4603      	mov	r3, r0
 800323c:	70fb      	strb	r3, [r7, #3]
 800323e:	460b      	mov	r3, r1
 8003240:	803b      	strh	r3, [r7, #0]
 8003242:	4613      	mov	r3, r2
 8003244:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800324a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324e:	2b00      	cmp	r3, #0
 8003250:	da0f      	bge.n	8003272 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	f003 020f 	and.w	r2, r3, #15
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	3338      	adds	r3, #56	; 0x38
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	705a      	strb	r2, [r3, #1]
 8003270:	e00f      	b.n	8003292 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	3304      	adds	r3, #4
 800328a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	b2da      	uxtb	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800329e:	883a      	ldrh	r2, [r7, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	78ba      	ldrb	r2, [r7, #2]
 80032a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032bc:	78bb      	ldrb	r3, [r7, #2]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d102      	bne.n	80032c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_PCD_EP_Open+0xaa>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e00e      	b.n	80032f4 <HAL_PCD_EP_Open+0xc8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f002 fb0d 	bl	8005904 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80032f2:	7afb      	ldrb	r3, [r7, #11]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800330c:	2b00      	cmp	r3, #0
 800330e:	da0f      	bge.n	8003330 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	3338      	adds	r3, #56	; 0x38
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	705a      	strb	r2, [r3, #1]
 800332e:	e00f      	b.n	8003350 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_PCD_EP_Close+0x6e>
 8003366:	2302      	movs	r3, #2
 8003368:	e00e      	b.n	8003388 <HAL_PCD_EP_Close+0x8c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	4618      	mov	r0, r3
 800337a:	f002 fb4b 	bl	8005a14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	460b      	mov	r3, r1
 800339e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	7afb      	ldrb	r3, [r7, #11]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2200      	movs	r2, #0
 80033ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2200      	movs	r2, #0
 80033d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d2:	7afb      	ldrb	r3, [r7, #11]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	6979      	ldr	r1, [r7, #20]
 8003404:	f002 fe2a 	bl	800605c <USB_EP0StartXfer>
 8003408:	e008      	b.n	800341c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	6979      	ldr	r1, [r7, #20]
 8003418:	f002 fbd8 	bl	8005bcc <USB_EPStartXfer>
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003448:	681b      	ldr	r3, [r3, #0]
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	460b      	mov	r3, r1
 8003464:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	3338      	adds	r3, #56	; 0x38
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2201      	movs	r2, #1
 8003494:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003496:	7afb      	ldrb	r3, [r7, #11]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	b2da      	uxtb	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b0:	7afb      	ldrb	r3, [r7, #11]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	6979      	ldr	r1, [r7, #20]
 80034c8:	f002 fdc8 	bl	800605c <USB_EP0StartXfer>
 80034cc:	e008      	b.n	80034e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	6979      	ldr	r1, [r7, #20]
 80034dc:	f002 fb76 	bl	8005bcc <USB_EPStartXfer>
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	d901      	bls.n	8003508 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e050      	b.n	80035aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800350c:	2b00      	cmp	r3, #0
 800350e:	da0f      	bge.n	8003530 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	f003 020f 	and.w	r2, r3, #15
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	3338      	adds	r3, #56	; 0x38
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	4413      	add	r3, r2
 8003524:	3304      	adds	r3, #4
 8003526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	705a      	strb	r2, [r3, #1]
 800352e:	e00d      	b.n	800354c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	3304      	adds	r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_PCD_EP_SetStall+0x82>
 8003568:	2302      	movs	r3, #2
 800356a:	e01e      	b.n	80035aa <HAL_PCD_EP_SetStall+0xc0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68f9      	ldr	r1, [r7, #12]
 800357a:	4618      	mov	r0, r3
 800357c:	f003 f806 	bl	800658c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	b2d9      	uxtb	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800359a:	461a      	mov	r2, r3
 800359c:	f003 f9f6 	bl	800698c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 020f 	and.w	r2, r3, #15
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d901      	bls.n	80035d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e042      	b.n	8003656 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da0f      	bge.n	80035f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	f003 020f 	and.w	r2, r3, #15
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3338      	adds	r3, #56	; 0x38
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	705a      	strb	r2, [r3, #1]
 80035f6:	e00f      	b.n	8003618 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 020f 	and.w	r2, r3, #15
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_PCD_EP_ClrStall+0x86>
 8003634:	2302      	movs	r3, #2
 8003636:	e00e      	b.n	8003656 <HAL_PCD_EP_ClrStall+0xa4>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4618      	mov	r0, r3
 8003648:	f003 f80e 	bl	8006668 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800366a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da0c      	bge.n	800368c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3338      	adds	r3, #56	; 0x38
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e00c      	b.n	80036a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	f003 020f 	and.w	r2, r3, #15
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	3304      	adds	r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f002 fe2d 	bl	800630c <USB_EPStopXfer>
 80036b2:	4603      	mov	r3, r0
 80036b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036b6:	7afb      	ldrb	r3, [r7, #11]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	3338      	adds	r3, #56	; 0x38
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d901      	bls.n	80036f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e06c      	b.n	80037d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	429a      	cmp	r2, r3
 800370c:	d902      	bls.n	8003714 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3303      	adds	r3, #3
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800371c:	e02b      	b.n	8003776 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	429a      	cmp	r2, r3
 8003732:	d902      	bls.n	800373a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3303      	adds	r3, #3
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6919      	ldr	r1, [r3, #16]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003752:	b2db      	uxtb	r3, r3
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4603      	mov	r3, r0
 8003758:	6978      	ldr	r0, [r7, #20]
 800375a:	f002 fe81 	bl	8006460 <USB_WritePacket>

    ep->xfer_buff  += len;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	441a      	add	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1a      	ldr	r2, [r3, #32]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	b29b      	uxth	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	429a      	cmp	r2, r3
 800378a:	d809      	bhi.n	80037a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003794:	429a      	cmp	r2, r3
 8003796:	d203      	bcs.n	80037a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1be      	bne.n	800371e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d811      	bhi.n	80037d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	2201      	movs	r2, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	6939      	ldr	r1, [r7, #16]
 80037c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037cc:	4013      	ands	r3, r2
 80037ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	333c      	adds	r3, #60	; 0x3c
 80037f4:	3304      	adds	r3, #4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d17b      	bne.n	800390a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	4a61      	ldr	r2, [pc, #388]	; (80039a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	f240 80b9 	bls.w	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80b3 	beq.w	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	461a      	mov	r2, r3
 8003840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003844:	6093      	str	r3, [r2, #8]
 8003846:	e0a7      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	461a      	mov	r2, r3
 8003860:	2320      	movs	r3, #32
 8003862:	6093      	str	r3, [r2, #8]
 8003864:	e098      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 8093 	bne.w	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4a4b      	ldr	r2, [pc, #300]	; (80039a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d90f      	bls.n	800389a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	461a      	mov	r2, r3
 8003892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003896:	6093      	str	r3, [r2, #8]
 8003898:	e07e      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	0159      	lsls	r1, r3, #5
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c6:	1ad2      	subs	r2, r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d114      	bne.n	80038fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038e4:	461a      	mov	r2, r3
 80038e6:	2101      	movs	r1, #1
 80038e8:	f003 f850 	bl	800698c <USB_EP0_OutStart>
 80038ec:	e006      	b.n	80038fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	441a      	add	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	4619      	mov	r1, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f005 fb08 	bl	8008f18 <HAL_PCD_DataOutStageCallback>
 8003908:	e046      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d124      	bne.n	800395c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003928:	461a      	mov	r2, r3
 800392a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800392e:	6093      	str	r3, [r2, #8]
 8003930:	e032      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003948:	461a      	mov	r2, r3
 800394a:	2320      	movs	r3, #32
 800394c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f005 fadf 	bl	8008f18 <HAL_PCD_DataOutStageCallback>
 800395a:	e01d      	b.n	8003998 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d114      	bne.n	800398c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003984:	461a      	mov	r2, r3
 8003986:	2100      	movs	r1, #0
 8003988:	f003 f800 	bl	800698c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f005 fac0 	bl	8008f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	4f54300a 	.word	0x4f54300a
 80039a8:	4f54310a 	.word	0x4f54310a

080039ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	333c      	adds	r3, #60	; 0x3c
 80039c4:	3304      	adds	r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <PCD_EP_OutSetupPacket_int+0x88>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d90e      	bls.n	8003a00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f005 fa77 	bl	8008ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d90c      	bls.n	8003a28 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d108      	bne.n	8003a28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a20:	461a      	mov	r2, r3
 8003a22:	2101      	movs	r1, #1
 8003a24:	f002 ffb2 	bl	800698c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	4f54300a 	.word	0x4f54300a

08003a38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	70fb      	strb	r3, [r7, #3]
 8003a44:	4613      	mov	r3, r2
 8003a46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a56:	883b      	ldrh	r3, [r7, #0]
 8003a58:	0419      	lsls	r1, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
 8003a64:	e028      	b.n	8003ab8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	4413      	add	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	e00d      	b.n	8003a96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	3340      	adds	r3, #64	; 0x40
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	3301      	adds	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	7bfa      	ldrb	r2, [r7, #15]
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3ec      	bcc.n	8003a7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003aa0:	883b      	ldrh	r3, [r7, #0]
 8003aa2:	0418      	lsls	r0, r3, #16
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6819      	ldr	r1, [r3, #0]
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4302      	orrs	r2, r0
 8003ab0:	3340      	adds	r3, #64	; 0x40
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e267      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d075      	beq.n	8003c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b1e:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d00c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2a:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d112      	bne.n	8003b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b36:	4b82      	ldr	r3, [pc, #520]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b42:	d10b      	bne.n	8003b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	4b7e      	ldr	r3, [pc, #504]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d05b      	beq.n	8003c08 <HAL_RCC_OscConfig+0x108>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d157      	bne.n	8003c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e242      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b64:	d106      	bne.n	8003b74 <HAL_RCC_OscConfig+0x74>
 8003b66:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a75      	ldr	r2, [pc, #468]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e01d      	b.n	8003bb0 <HAL_RCC_OscConfig+0xb0>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x98>
 8003b7e:	4b70      	ldr	r3, [pc, #448]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a6f      	ldr	r2, [pc, #444]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b6d      	ldr	r3, [pc, #436]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6c      	ldr	r2, [pc, #432]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCC_OscConfig+0xb0>
 8003b98:	4b69      	ldr	r3, [pc, #420]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b66      	ldr	r3, [pc, #408]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a65      	ldr	r2, [pc, #404]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d013      	beq.n	8003be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f8e8 	bl	8001d8c <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fe f8e4 	bl	8001d8c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e207      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b5b      	ldr	r3, [pc, #364]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0xc0>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fe f8d4 	bl	8001d8c <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fe f8d0 	bl	8001d8c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1f3      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	4b51      	ldr	r3, [pc, #324]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0xe8>
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d063      	beq.n	8003cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c16:	4b4a      	ldr	r3, [pc, #296]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00b      	beq.n	8003c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d11c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2e:	4b44      	ldr	r3, [pc, #272]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d116      	bne.n	8003c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_RCC_OscConfig+0x152>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e1c7      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4937      	ldr	r1, [pc, #220]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c66:	e03a      	b.n	8003cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d020      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c70:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <HAL_RCC_OscConfig+0x244>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fe f889 	bl	8001d8c <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7e:	f7fe f885 	bl	8001d8c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e1a8      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9c:	4b28      	ldr	r3, [pc, #160]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4925      	ldr	r1, [pc, #148]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
 8003cb0:	e015      	b.n	8003cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <HAL_RCC_OscConfig+0x244>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f868 	bl	8001d8c <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc0:	f7fe f864 	bl	8001d8c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e187      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d036      	beq.n	8003d58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d016      	beq.n	8003d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_RCC_OscConfig+0x248>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fe f848 	bl	8001d8c <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d00:	f7fe f844 	bl	8001d8c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e167      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_OscConfig+0x240>)
 8003d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x200>
 8003d1e:	e01b      	b.n	8003d58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_OscConfig+0x248>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d26:	f7fe f831 	bl	8001d8c <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2c:	e00e      	b.n	8003d4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2e:	f7fe f82d 	bl	8001d8c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d907      	bls.n	8003d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e150      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
 8003d40:	40023800 	.word	0x40023800
 8003d44:	42470000 	.word	0x42470000
 8003d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	4b88      	ldr	r3, [pc, #544]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ea      	bne.n	8003d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8097 	beq.w	8003e94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b81      	ldr	r3, [pc, #516]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	4b7d      	ldr	r3, [pc, #500]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a7c      	ldr	r2, [pc, #496]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b7a      	ldr	r3, [pc, #488]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b77      	ldr	r3, [pc, #476]	; (8003f74 <HAL_RCC_OscConfig+0x474>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da2:	4b74      	ldr	r3, [pc, #464]	; (8003f74 <HAL_RCC_OscConfig+0x474>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a73      	ldr	r2, [pc, #460]	; (8003f74 <HAL_RCC_OscConfig+0x474>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fd ffed 	bl	8001d8c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fd ffe9 	bl	8001d8c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e10c      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <HAL_RCC_OscConfig+0x474>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <HAL_RCC_OscConfig+0x2ea>
 8003ddc:	4b64      	ldr	r3, [pc, #400]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a63      	ldr	r2, [pc, #396]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	e01c      	b.n	8003e24 <HAL_RCC_OscConfig+0x324>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x30c>
 8003df2:	4b5f      	ldr	r3, [pc, #380]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a5e      	ldr	r2, [pc, #376]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003df8:	f043 0304 	orr.w	r3, r3, #4
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfe:	4b5c      	ldr	r3, [pc, #368]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a5b      	ldr	r2, [pc, #364]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCC_OscConfig+0x324>
 8003e0c:	4b58      	ldr	r3, [pc, #352]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a57      	ldr	r2, [pc, #348]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	4b55      	ldr	r3, [pc, #340]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	4a54      	ldr	r2, [pc, #336]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	f023 0304 	bic.w	r3, r3, #4
 8003e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d015      	beq.n	8003e58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7fd ffae 	bl	8001d8c <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e34:	f7fd ffaa 	bl	8001d8c <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0cb      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4a:	4b49      	ldr	r3, [pc, #292]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ee      	beq.n	8003e34 <HAL_RCC_OscConfig+0x334>
 8003e56:	e014      	b.n	8003e82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e58:	f7fd ff98 	bl	8001d8c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fd ff94 	bl	8001d8c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0b5      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e76:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1ee      	bne.n	8003e60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	4a38      	ldr	r2, [pc, #224]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80a1 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e9e:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d05c      	beq.n	8003f64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d141      	bne.n	8003f36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_OscConfig+0x478>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fd ff68 	bl	8001d8c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd ff64 	bl	8001d8c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e087      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	041b      	lsls	r3, r3, #16
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	061b      	lsls	r3, r3, #24
 8003f02:	491b      	ldr	r1, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x478>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fd ff3d 	bl	8001d8c <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fd ff39 	bl	8001d8c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e05c      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x416>
 8003f34:	e054      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCC_OscConfig+0x478>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd ff26 	bl	8001d8c <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fd ff22 	bl	8001d8c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e045      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <HAL_RCC_OscConfig+0x470>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x444>
 8003f62:	e03d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e038      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40007000 	.word	0x40007000
 8003f78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x4ec>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d028      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d121      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d11a      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fac:	4013      	ands	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d111      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800

08003ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0cc      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004004:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d90c      	bls.n	800402c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0b8      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	494d      	ldr	r1, [pc, #308]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d044      	beq.n	8004110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d119      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e06f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040be:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e067      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ce:	4b37      	ldr	r3, [pc, #220]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4934      	ldr	r1, [pc, #208]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e0:	f7fd fe54 	bl	8001d8c <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e8:	f7fd fe50 	bl	8001d8c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e04f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 020c 	and.w	r2, r3, #12
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	429a      	cmp	r2, r3
 800410e:	d1eb      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d20c      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e032      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4916      	ldr	r1, [pc, #88]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	490e      	ldr	r1, [pc, #56]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004176:	f000 f821 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800417a:	4602      	mov	r2, r0
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004188:	5ccb      	ldrb	r3, [r1, r3]
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fdb4 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023c00 	.word	0x40023c00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	0800ac68 	.word	0x0800ac68
 80041b4:	20000008 	.word	0x20000008
 80041b8:	2000000c 	.word	0x2000000c

080041bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c0:	b094      	sub	sp, #80	; 0x50
 80041c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
 80041c8:	2300      	movs	r3, #0
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	2300      	movs	r3, #0
 80041ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d4:	4b79      	ldr	r3, [pc, #484]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d00d      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x40>
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	f200 80e1 	bhi.w	80043a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x34>
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ee:	e0db      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b73      	ldr	r3, [pc, #460]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041f4:	e0db      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f6:	4b72      	ldr	r3, [pc, #456]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041fa:	e0d8      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041fc:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004204:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004206:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d063      	beq.n	80042da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004212:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	099b      	lsrs	r3, r3, #6
 8004218:	2200      	movs	r2, #0
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
 800421c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 8004226:	2300      	movs	r3, #0
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
 800422a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800422e:	4622      	mov	r2, r4
 8004230:	462b      	mov	r3, r5
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	0159      	lsls	r1, r3, #5
 800423c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004240:	0150      	lsls	r0, r2, #5
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4621      	mov	r1, r4
 8004248:	1a51      	subs	r1, r2, r1
 800424a:	6139      	str	r1, [r7, #16]
 800424c:	4629      	mov	r1, r5
 800424e:	eb63 0301 	sbc.w	r3, r3, r1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004260:	4659      	mov	r1, fp
 8004262:	018b      	lsls	r3, r1, #6
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800426a:	4651      	mov	r1, sl
 800426c:	018a      	lsls	r2, r1, #6
 800426e:	4651      	mov	r1, sl
 8004270:	ebb2 0801 	subs.w	r8, r2, r1
 8004274:	4659      	mov	r1, fp
 8004276:	eb63 0901 	sbc.w	r9, r3, r1
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800428a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428e:	4690      	mov	r8, r2
 8004290:	4699      	mov	r9, r3
 8004292:	4623      	mov	r3, r4
 8004294:	eb18 0303 	adds.w	r3, r8, r3
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	462b      	mov	r3, r5
 800429c:	eb49 0303 	adc.w	r3, r9, r3
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ae:	4629      	mov	r1, r5
 80042b0:	028b      	lsls	r3, r1, #10
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b8:	4621      	mov	r1, r4
 80042ba:	028a      	lsls	r2, r1, #10
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042cc:	f7fc fc94 	bl	8000bf8 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d8:	e058      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4b38      	ldr	r3, [pc, #224]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	2200      	movs	r2, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	4611      	mov	r1, r2
 80042e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	f04f 0000 	mov.w	r0, #0
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	0159      	lsls	r1, r3, #5
 8004302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004306:	0150      	lsls	r0, r2, #5
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4641      	mov	r1, r8
 800430e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004312:	4649      	mov	r1, r9
 8004314:	eb63 0b01 	sbc.w	fp, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800432c:	ebb2 040a 	subs.w	r4, r2, sl
 8004330:	eb63 050b 	sbc.w	r5, r3, fp
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	00eb      	lsls	r3, r5, #3
 800433e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004342:	00e2      	lsls	r2, r4, #3
 8004344:	4614      	mov	r4, r2
 8004346:	461d      	mov	r5, r3
 8004348:	4643      	mov	r3, r8
 800434a:	18e3      	adds	r3, r4, r3
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	464b      	mov	r3, r9
 8004350:	eb45 0303 	adc.w	r3, r5, r3
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004362:	4629      	mov	r1, r5
 8004364:	028b      	lsls	r3, r1, #10
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800436c:	4621      	mov	r1, r4
 800436e:	028a      	lsls	r2, r1, #10
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004376:	2200      	movs	r2, #0
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	61fa      	str	r2, [r7, #28]
 800437c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004380:	f7fc fc3a 	bl	8000bf8 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800439c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3750      	adds	r7, #80	; 0x50
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	00f42400 	.word	0x00f42400

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000008 	.word	0x20000008

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	0800ac78 	.word	0x0800ac78

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004408:	f7ff ffdc 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0b5b      	lsrs	r3, r3, #13
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	0800ac78 	.word	0x0800ac78

0800442c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07b      	b.n	8004536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444e:	d009      	beq.n	8004464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
 8004456:	e005      	b.n	8004464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd fae8 	bl	8001a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	ea42 0103 	orr.w	r1, r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	f003 0104 	and.w	r1, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0210 	and.w	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b088      	sub	sp, #32
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_SPI_Transmit+0x22>
 800455c:	2302      	movs	r3, #2
 800455e:	e126      	b.n	80047ae <HAL_SPI_Transmit+0x270>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004568:	f7fd fc10 	bl	8001d8c <HAL_GetTick>
 800456c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800457e:	2302      	movs	r3, #2
 8004580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004582:	e10b      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Transmit+0x52>
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004594:	e102      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045dc:	d10f      	bne.n	80045fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d007      	beq.n	800461c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004624:	d14b      	bne.n	80046be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit+0xf6>
 800462e:	8afb      	ldrh	r3, [r7, #22]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d13e      	bne.n	80046b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	881a      	ldrh	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	1c9a      	adds	r2, r3, #2
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004658:	e02b      	b.n	80046b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d112      	bne.n	800468e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	86da      	strh	r2, [r3, #54]	; 0x36
 800468c:	e011      	b.n	80046b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468e:	f7fd fb7d 	bl	8001d8c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d803      	bhi.n	80046a6 <HAL_SPI_Transmit+0x168>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d102      	bne.n	80046ac <HAL_SPI_Transmit+0x16e>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046b0:	e074      	b.n	800479c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ce      	bne.n	800465a <HAL_SPI_Transmit+0x11c>
 80046bc:	e04c      	b.n	8004758 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Transmit+0x18e>
 80046c6:	8afb      	ldrh	r3, [r7, #22]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d140      	bne.n	800474e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	7812      	ldrb	r2, [r2, #0]
 80046d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046f2:	e02c      	b.n	800474e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d113      	bne.n	800472a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	86da      	strh	r2, [r3, #54]	; 0x36
 8004728:	e011      	b.n	800474e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fd fb2f 	bl	8001d8c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d803      	bhi.n	8004742 <HAL_SPI_Transmit+0x204>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d102      	bne.n	8004748 <HAL_SPI_Transmit+0x20a>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800474c:	e026      	b.n	800479c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1cd      	bne.n	80046f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	6839      	ldr	r1, [r7, #0]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fa55 	bl	8004c0c <SPI_EndRxTxTransaction>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e000      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

error:
 800479a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b08c      	sub	sp, #48	; 0x30
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047c4:	2301      	movs	r3, #1
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x26>
 80047d8:	2302      	movs	r3, #2
 80047da:	e18a      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x33c>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e4:	f7fd fad2 	bl	8001d8c <HAL_GetTick>
 80047e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004802:	2b01      	cmp	r3, #1
 8004804:	d00f      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x70>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480c:	d107      	bne.n	800481e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_SPI_TransmitReceive+0x68>
 8004816:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800481a:	2b04      	cmp	r3, #4
 800481c:	d003      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800481e:	2302      	movs	r3, #2
 8004820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004824:	e15b      	b.n	8004ade <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x82>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_SPI_TransmitReceive+0x82>
 8004832:	887b      	ldrh	r3, [r7, #2]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d103      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800483e:	e14e      	b.n	8004ade <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b04      	cmp	r3, #4
 800484a:	d003      	beq.n	8004854 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2205      	movs	r2, #5
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	887a      	ldrh	r2, [r7, #2]
 800486a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	887a      	ldrh	r2, [r7, #2]
 8004876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d007      	beq.n	80048a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b0:	d178      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_TransmitReceive+0x10a>
 80048ba:	8b7b      	ldrh	r3, [r7, #26]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d166      	bne.n	800498e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	881a      	ldrh	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	1c9a      	adds	r2, r3, #2
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048e4:	e053      	b.n	800498e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d11b      	bne.n	800492c <HAL_SPI_TransmitReceive+0x176>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <HAL_SPI_TransmitReceive+0x176>
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d113      	bne.n	800492c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d119      	bne.n	800496e <HAL_SPI_TransmitReceive+0x1b8>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d014      	beq.n	800496e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	b292      	uxth	r2, r2
 8004950:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	1c9a      	adds	r2, r3, #2
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800496a:	2301      	movs	r3, #1
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800496e:	f7fd fa0d 	bl	8001d8c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800497a:	429a      	cmp	r2, r3
 800497c:	d807      	bhi.n	800498e <HAL_SPI_TransmitReceive+0x1d8>
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d003      	beq.n	800498e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800498c:	e0a7      	b.n	8004ade <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1a6      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x130>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1a1      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x130>
 80049a2:	e07c      	b.n	8004a9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x1fc>
 80049ac:	8b7b      	ldrh	r3, [r7, #26]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d16b      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d8:	e057      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d11c      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x26c>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d017      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x26c>
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d114      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d119      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x2ae>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d014      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a60:	2301      	movs	r3, #1
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a64:	f7fd f992 	bl	8001d8c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d803      	bhi.n	8004a7c <HAL_SPI_TransmitReceive+0x2c6>
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d102      	bne.n	8004a82 <HAL_SPI_TransmitReceive+0x2cc>
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d103      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a88:	e029      	b.n	8004ade <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1a2      	bne.n	80049da <HAL_SPI_TransmitReceive+0x224>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d19d      	bne.n	80049da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8b2 	bl	8004c0c <SPI_EndRxTxTransaction>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004aba:	e010      	b.n	8004ade <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10b      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	e000      	b.n	8004ade <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004adc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3730      	adds	r7, #48	; 0x30
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b0c:	f7fd f93e 	bl	8001d8c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	4413      	add	r3, r2
 8004b1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b1c:	f7fd f936 	bl	8001d8c <HAL_GetTick>
 8004b20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b22:	4b39      	ldr	r3, [pc, #228]	; (8004c08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	015b      	lsls	r3, r3, #5
 8004b28:	0d1b      	lsrs	r3, r3, #20
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	fb02 f303 	mul.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b32:	e054      	b.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d050      	beq.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b3c:	f7fd f926 	bl	8001d8c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d902      	bls.n	8004b52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d13d      	bne.n	8004bce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6a:	d111      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b74:	d004      	beq.n	8004b80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7e:	d107      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b98:	d10f      	bne.n	8004bba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e017      	b.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	bf0c      	ite	eq
 8004bee:	2301      	moveq	r3, #1
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d19b      	bne.n	8004b34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000008 	.word	0x20000008

08004c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <SPI_EndRxTxTransaction+0x7c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <SPI_EndRxTxTransaction+0x80>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0d5b      	lsrs	r3, r3, #21
 8004c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c28:	fb02 f303 	mul.w	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c36:	d112      	bne.n	8004c5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2180      	movs	r1, #128	; 0x80
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff ff5a 	bl	8004afc <SPI_WaitFlagStateUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d016      	beq.n	8004c7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	f043 0220 	orr.w	r2, r3, #32
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e00f      	b.n	8004c7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b80      	cmp	r3, #128	; 0x80
 8004c76:	d0f2      	beq.n	8004c5e <SPI_EndRxTxTransaction+0x52>
 8004c78:	e000      	b.n	8004c7c <SPI_EndRxTxTransaction+0x70>
        break;
 8004c7a:	bf00      	nop
  }

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000008 	.word	0x20000008
 8004c8c:	165e9f81 	.word	0x165e9f81

08004c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e03f      	b.n	8004d22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fc ff14 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2224      	movs	r2, #36	; 0x24
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f829 	bl	8004d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b0c0      	sub	sp, #256	; 0x100
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	ea40 0301 	orr.w	r3, r0, r1
 8004d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d84:	f021 010c 	bic.w	r1, r1, #12
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d92:	430b      	orrs	r3, r1
 8004d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da6:	6999      	ldr	r1, [r3, #24]
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	ea40 0301 	orr.w	r3, r0, r1
 8004db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b8f      	ldr	r3, [pc, #572]	; (8004ff8 <UART_SetConfig+0x2cc>)
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d005      	beq.n	8004dcc <UART_SetConfig+0xa0>
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b8d      	ldr	r3, [pc, #564]	; (8004ffc <UART_SetConfig+0x2d0>)
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d104      	bne.n	8004dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dcc:	f7ff fb1a 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8004dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004dd4:	e003      	b.n	8004dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dd6:	f7ff fb01 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8004dda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de8:	f040 810c 	bne.w	8005004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004df6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dfe:	4622      	mov	r2, r4
 8004e00:	462b      	mov	r3, r5
 8004e02:	1891      	adds	r1, r2, r2
 8004e04:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e06:	415b      	adcs	r3, r3
 8004e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e0e:	4621      	mov	r1, r4
 8004e10:	eb12 0801 	adds.w	r8, r2, r1
 8004e14:	4629      	mov	r1, r5
 8004e16:	eb43 0901 	adc.w	r9, r3, r1
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2e:	4690      	mov	r8, r2
 8004e30:	4699      	mov	r9, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	eb18 0303 	adds.w	r3, r8, r3
 8004e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	eb49 0303 	adc.w	r3, r9, r3
 8004e42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	18db      	adds	r3, r3, r3
 8004e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e60:	4613      	mov	r3, r2
 8004e62:	eb42 0303 	adc.w	r3, r2, r3
 8004e66:	657b      	str	r3, [r7, #84]	; 0x54
 8004e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e70:	f7fb fec2 	bl	8000bf8 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <UART_SetConfig+0x2d4>)
 8004e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	011c      	lsls	r4, r3, #4
 8004e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	1891      	adds	r1, r2, r2
 8004e9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e9c:	415b      	adcs	r3, r3
 8004e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8004eaa:	4649      	mov	r1, r9
 8004eac:	eb43 0b01 	adc.w	fp, r3, r1
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec4:	4692      	mov	sl, r2
 8004ec6:	469b      	mov	fp, r3
 8004ec8:	4643      	mov	r3, r8
 8004eca:	eb1a 0303 	adds.w	r3, sl, r3
 8004ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	18db      	adds	r3, r3, r3
 8004ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	eb42 0303 	adc.w	r3, r2, r3
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
 8004efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f06:	f7fb fe77 	bl	8000bf8 <__aeabi_uldivmod>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4b3b      	ldr	r3, [pc, #236]	; (8005000 <UART_SetConfig+0x2d4>)
 8004f12:	fba3 2301 	umull	r2, r3, r3, r1
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2264      	movs	r2, #100	; 0x64
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	1acb      	subs	r3, r1, r3
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f26:	4b36      	ldr	r3, [pc, #216]	; (8005000 <UART_SetConfig+0x2d4>)
 8004f28:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f34:	441c      	add	r4, r3
 8004f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f48:	4642      	mov	r2, r8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	1891      	adds	r1, r2, r2
 8004f4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f50:	415b      	adcs	r3, r3
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f58:	4641      	mov	r1, r8
 8004f5a:	1851      	adds	r1, r2, r1
 8004f5c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f5e:	4649      	mov	r1, r9
 8004f60:	414b      	adcs	r3, r1
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f70:	4659      	mov	r1, fp
 8004f72:	00cb      	lsls	r3, r1, #3
 8004f74:	4651      	mov	r1, sl
 8004f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7a:	4651      	mov	r1, sl
 8004f7c:	00ca      	lsls	r2, r1, #3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	4642      	mov	r2, r8
 8004f86:	189b      	adds	r3, r3, r2
 8004f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	460a      	mov	r2, r1
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004fac:	460b      	mov	r3, r1
 8004fae:	18db      	adds	r3, r3, r3
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	eb42 0303 	adc.w	r3, r2, r3
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004fc2:	f7fb fe19 	bl	8000bf8 <__aeabi_uldivmod>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <UART_SetConfig+0x2d4>)
 8004fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2164      	movs	r1, #100	; 0x64
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	3332      	adds	r3, #50	; 0x32
 8004fde:	4a08      	ldr	r2, [pc, #32]	; (8005000 <UART_SetConfig+0x2d4>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 0207 	and.w	r2, r3, #7
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4422      	add	r2, r4
 8004ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff4:	e105      	b.n	8005202 <UART_SetConfig+0x4d6>
 8004ff6:	bf00      	nop
 8004ff8:	40011000 	.word	0x40011000
 8004ffc:	40011400 	.word	0x40011400
 8005000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800500e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005016:	4642      	mov	r2, r8
 8005018:	464b      	mov	r3, r9
 800501a:	1891      	adds	r1, r2, r2
 800501c:	6239      	str	r1, [r7, #32]
 800501e:	415b      	adcs	r3, r3
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
 8005022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005026:	4641      	mov	r1, r8
 8005028:	1854      	adds	r4, r2, r1
 800502a:	4649      	mov	r1, r9
 800502c:	eb43 0501 	adc.w	r5, r3, r1
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	00eb      	lsls	r3, r5, #3
 800503a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800503e:	00e2      	lsls	r2, r4, #3
 8005040:	4614      	mov	r4, r2
 8005042:	461d      	mov	r5, r3
 8005044:	4643      	mov	r3, r8
 8005046:	18e3      	adds	r3, r4, r3
 8005048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800504c:	464b      	mov	r3, r9
 800504e:	eb45 0303 	adc.w	r3, r5, r3
 8005052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005062:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005072:	4629      	mov	r1, r5
 8005074:	008b      	lsls	r3, r1, #2
 8005076:	4621      	mov	r1, r4
 8005078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507c:	4621      	mov	r1, r4
 800507e:	008a      	lsls	r2, r1, #2
 8005080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005084:	f7fb fdb8 	bl	8000bf8 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4b60      	ldr	r3, [pc, #384]	; (8005210 <UART_SetConfig+0x4e4>)
 800508e:	fba3 2302 	umull	r2, r3, r3, r2
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	011c      	lsls	r4, r3, #4
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509a:	2200      	movs	r2, #0
 800509c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80050a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	1891      	adds	r1, r2, r2
 80050ae:	61b9      	str	r1, [r7, #24]
 80050b0:	415b      	adcs	r3, r3
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b8:	4641      	mov	r1, r8
 80050ba:	1851      	adds	r1, r2, r1
 80050bc:	6139      	str	r1, [r7, #16]
 80050be:	4649      	mov	r1, r9
 80050c0:	414b      	adcs	r3, r1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d0:	4659      	mov	r1, fp
 80050d2:	00cb      	lsls	r3, r1, #3
 80050d4:	4651      	mov	r1, sl
 80050d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050da:	4651      	mov	r1, sl
 80050dc:	00ca      	lsls	r2, r1, #3
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	4642      	mov	r2, r8
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050ec:	464b      	mov	r3, r9
 80050ee:	460a      	mov	r2, r1
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	67bb      	str	r3, [r7, #120]	; 0x78
 8005102:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005110:	4649      	mov	r1, r9
 8005112:	008b      	lsls	r3, r1, #2
 8005114:	4641      	mov	r1, r8
 8005116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800511a:	4641      	mov	r1, r8
 800511c:	008a      	lsls	r2, r1, #2
 800511e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005122:	f7fb fd69 	bl	8000bf8 <__aeabi_uldivmod>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4b39      	ldr	r3, [pc, #228]	; (8005210 <UART_SetConfig+0x4e4>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	2164      	movs	r1, #100	; 0x64
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	3332      	adds	r3, #50	; 0x32
 800513e:	4a34      	ldr	r2, [pc, #208]	; (8005210 <UART_SetConfig+0x4e4>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800514a:	441c      	add	r4, r3
 800514c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005150:	2200      	movs	r2, #0
 8005152:	673b      	str	r3, [r7, #112]	; 0x70
 8005154:	677a      	str	r2, [r7, #116]	; 0x74
 8005156:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800515a:	4642      	mov	r2, r8
 800515c:	464b      	mov	r3, r9
 800515e:	1891      	adds	r1, r2, r2
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	415b      	adcs	r3, r3
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800516a:	4641      	mov	r1, r8
 800516c:	1851      	adds	r1, r2, r1
 800516e:	6039      	str	r1, [r7, #0]
 8005170:	4649      	mov	r1, r9
 8005172:	414b      	adcs	r3, r1
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005182:	4659      	mov	r1, fp
 8005184:	00cb      	lsls	r3, r1, #3
 8005186:	4651      	mov	r1, sl
 8005188:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518c:	4651      	mov	r1, sl
 800518e:	00ca      	lsls	r2, r1, #3
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	4603      	mov	r3, r0
 8005196:	4642      	mov	r2, r8
 8005198:	189b      	adds	r3, r3, r2
 800519a:	66bb      	str	r3, [r7, #104]	; 0x68
 800519c:	464b      	mov	r3, r9
 800519e:	460a      	mov	r2, r1
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	663b      	str	r3, [r7, #96]	; 0x60
 80051b0:	667a      	str	r2, [r7, #100]	; 0x64
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80051be:	4649      	mov	r1, r9
 80051c0:	008b      	lsls	r3, r1, #2
 80051c2:	4641      	mov	r1, r8
 80051c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c8:	4641      	mov	r1, r8
 80051ca:	008a      	lsls	r2, r1, #2
 80051cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80051d0:	f7fb fd12 	bl	8000bf8 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <UART_SetConfig+0x4e4>)
 80051da:	fba3 1302 	umull	r1, r3, r3, r2
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2164      	movs	r1, #100	; 0x64
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	3332      	adds	r3, #50	; 0x32
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <UART_SetConfig+0x4e4>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4422      	add	r2, r4
 8005200:	609a      	str	r2, [r3, #8]
}
 8005202:	bf00      	nop
 8005204:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005208:	46bd      	mov	sp, r7
 800520a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520e:	bf00      	nop
 8005210:	51eb851f 	.word	0x51eb851f

08005214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005214:	b084      	sub	sp, #16
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	f107 001c 	add.w	r0, r7, #28
 8005222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	2b01      	cmp	r3, #1
 800522a:	d122      	bne.n	8005272 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 fbee 	bl	8006a48 <USB_CoreReset>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	e01a      	b.n	80052a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f001 fbe2 	bl	8006a48 <USB_CoreReset>
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
 800529a:	e005      	b.n	80052a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10b      	bne.n	80052c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f043 0206 	orr.w	r2, r3, #6
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d2:	b004      	add	sp, #16
 80052d4:	4770      	bx	lr
	...

080052d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d165      	bne.n	80053b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4a41      	ldr	r2, [pc, #260]	; (80053f4 <USB_SetTurnaroundTime+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d906      	bls.n	8005302 <USB_SetTurnaroundTime+0x2a>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a40      	ldr	r2, [pc, #256]	; (80053f8 <USB_SetTurnaroundTime+0x120>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d202      	bcs.n	8005302 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052fc:	230f      	movs	r3, #15
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e062      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a3c      	ldr	r2, [pc, #240]	; (80053f8 <USB_SetTurnaroundTime+0x120>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d306      	bcc.n	8005318 <USB_SetTurnaroundTime+0x40>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a3b      	ldr	r2, [pc, #236]	; (80053fc <USB_SetTurnaroundTime+0x124>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d202      	bcs.n	8005318 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005312:	230e      	movs	r3, #14
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e057      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a38      	ldr	r2, [pc, #224]	; (80053fc <USB_SetTurnaroundTime+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d306      	bcc.n	800532e <USB_SetTurnaroundTime+0x56>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a37      	ldr	r2, [pc, #220]	; (8005400 <USB_SetTurnaroundTime+0x128>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d202      	bcs.n	800532e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005328:	230d      	movs	r3, #13
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e04c      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4a33      	ldr	r2, [pc, #204]	; (8005400 <USB_SetTurnaroundTime+0x128>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d306      	bcc.n	8005344 <USB_SetTurnaroundTime+0x6c>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a32      	ldr	r2, [pc, #200]	; (8005404 <USB_SetTurnaroundTime+0x12c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d802      	bhi.n	8005344 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800533e:	230c      	movs	r3, #12
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e041      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <USB_SetTurnaroundTime+0x12c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d906      	bls.n	800535a <USB_SetTurnaroundTime+0x82>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4a2e      	ldr	r2, [pc, #184]	; (8005408 <USB_SetTurnaroundTime+0x130>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d802      	bhi.n	800535a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005354:	230b      	movs	r3, #11
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e036      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <USB_SetTurnaroundTime+0x130>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d906      	bls.n	8005370 <USB_SetTurnaroundTime+0x98>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4a29      	ldr	r2, [pc, #164]	; (800540c <USB_SetTurnaroundTime+0x134>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d802      	bhi.n	8005370 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800536a:	230a      	movs	r3, #10
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e02b      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a26      	ldr	r2, [pc, #152]	; (800540c <USB_SetTurnaroundTime+0x134>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d906      	bls.n	8005386 <USB_SetTurnaroundTime+0xae>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a25      	ldr	r2, [pc, #148]	; (8005410 <USB_SetTurnaroundTime+0x138>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d202      	bcs.n	8005386 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005380:	2309      	movs	r3, #9
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e020      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4a21      	ldr	r2, [pc, #132]	; (8005410 <USB_SetTurnaroundTime+0x138>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d306      	bcc.n	800539c <USB_SetTurnaroundTime+0xc4>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4a20      	ldr	r2, [pc, #128]	; (8005414 <USB_SetTurnaroundTime+0x13c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d802      	bhi.n	800539c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005396:	2308      	movs	r3, #8
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e015      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <USB_SetTurnaroundTime+0x13c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d906      	bls.n	80053b2 <USB_SetTurnaroundTime+0xda>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <USB_SetTurnaroundTime+0x140>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d202      	bcs.n	80053b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053ac:	2307      	movs	r3, #7
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e00a      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053b2:	2306      	movs	r3, #6
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e007      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053be:	2309      	movs	r3, #9
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e001      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053c4:	2309      	movs	r3, #9
 80053c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	00d8acbf 	.word	0x00d8acbf
 80053f8:	00e4e1c0 	.word	0x00e4e1c0
 80053fc:	00f42400 	.word	0x00f42400
 8005400:	01067380 	.word	0x01067380
 8005404:	011a499f 	.word	0x011a499f
 8005408:	01312cff 	.word	0x01312cff
 800540c:	014ca43f 	.word	0x014ca43f
 8005410:	016e3600 	.word	0x016e3600
 8005414:	01a6ab1f 	.word	0x01a6ab1f
 8005418:	01e84800 	.word	0x01e84800

0800541c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f043 0201 	orr.w	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d115      	bne.n	80054ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800548e:	2001      	movs	r0, #1
 8005490:	f7fc fc88 	bl	8001da4 <HAL_Delay>
      ms++;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3301      	adds	r3, #1
 8005498:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fa45 	bl	800692a <USB_GetMode>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d01e      	beq.n	80054e4 <USB_SetCurrentMode+0x84>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b31      	cmp	r3, #49	; 0x31
 80054aa:	d9f0      	bls.n	800548e <USB_SetCurrentMode+0x2e>
 80054ac:	e01a      	b.n	80054e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d115      	bne.n	80054e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054c0:	2001      	movs	r0, #1
 80054c2:	f7fc fc6f 	bl	8001da4 <HAL_Delay>
      ms++;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3301      	adds	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f001 fa2c 	bl	800692a <USB_GetMode>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <USB_SetCurrentMode+0x84>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b31      	cmp	r3, #49	; 0x31
 80054dc:	d9f0      	bls.n	80054c0 <USB_SetCurrentMode+0x60>
 80054de:	e001      	b.n	80054e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e005      	b.n	80054f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b32      	cmp	r3, #50	; 0x32
 80054e8:	d101      	bne.n	80054ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f8:	b084      	sub	sp, #16
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b086      	sub	sp, #24
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005512:	2300      	movs	r3, #0
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e009      	b.n	800552c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	3340      	adds	r3, #64	; 0x40
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	2200      	movs	r2, #0
 8005524:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3301      	adds	r3, #1
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b0e      	cmp	r3, #14
 8005530:	d9f2      	bls.n	8005518 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005534:	2b00      	cmp	r3, #0
 8005536:	d11c      	bne.n	8005572 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005546:	f043 0302 	orr.w	r3, r3, #2
 800554a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
 8005570:	e00b      	b.n	800558a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005590:	461a      	mov	r2, r3
 8005592:	2300      	movs	r3, #0
 8005594:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559c:	4619      	mov	r1, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a4:	461a      	mov	r2, r3
 80055a6:	680b      	ldr	r3, [r1, #0]
 80055a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d10c      	bne.n	80055ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d104      	bne.n	80055c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055b6:	2100      	movs	r1, #0
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f965 	bl	8005888 <USB_SetDevSpeed>
 80055be:	e008      	b.n	80055d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055c0:	2101      	movs	r1, #1
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f960 	bl	8005888 <USB_SetDevSpeed>
 80055c8:	e003      	b.n	80055d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055ca:	2103      	movs	r1, #3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f95b 	bl	8005888 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055d2:	2110      	movs	r1, #16
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f8f3 	bl	80057c0 <USB_FlushTxFifo>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f91f 	bl	8005828 <USB_FlushRxFifo>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	461a      	mov	r2, r3
 80055fc:	2300      	movs	r3, #0
 80055fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005606:	461a      	mov	r2, r3
 8005608:	2300      	movs	r3, #0
 800560a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	461a      	mov	r2, r3
 8005614:	2300      	movs	r3, #0
 8005616:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005618:	2300      	movs	r3, #0
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	e043      	b.n	80056a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005634:	d118      	bne.n	8005668 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e013      	b.n	800567a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	461a      	mov	r2, r3
 8005660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e008      	b.n	800567a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005674:	461a      	mov	r2, r3
 8005676:	2300      	movs	r3, #0
 8005678:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	461a      	mov	r2, r3
 8005688:	2300      	movs	r3, #0
 800568a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005698:	461a      	mov	r2, r3
 800569a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800569e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	3301      	adds	r3, #1
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d3b7      	bcc.n	800561e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	e043      	b.n	800573c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ca:	d118      	bne.n	80056fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e013      	b.n	8005710 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	e008      	b.n	8005710 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	461a      	mov	r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	461a      	mov	r2, r3
 800571e:	2300      	movs	r3, #0
 8005720:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	461a      	mov	r2, r3
 8005730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005734:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	3301      	adds	r3, #1
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	429a      	cmp	r2, r3
 8005742:	d3b7      	bcc.n	80056b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005756:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005764:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f043 0210 	orr.w	r2, r3, #16
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <USB_DevInit+0x2c4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f043 0208 	orr.w	r2, r3, #8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d107      	bne.n	80057ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a4:	f043 0304 	orr.w	r3, r3, #4
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b8:	b004      	add	sp, #16
 80057ba:	4770      	bx	lr
 80057bc:	803c3800 	.word	0x803c3800

080057c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3301      	adds	r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a13      	ldr	r2, [pc, #76]	; (8005824 <USB_FlushTxFifo+0x64>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d901      	bls.n	80057e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e01b      	b.n	8005818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	daf2      	bge.n	80057ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	019b      	lsls	r3, r3, #6
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4a08      	ldr	r2, [pc, #32]	; (8005824 <USB_FlushTxFifo+0x64>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e006      	b.n	8005818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b20      	cmp	r3, #32
 8005814:	d0f0      	beq.n	80057f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	00030d40 	.word	0x00030d40

08005828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a11      	ldr	r2, [pc, #68]	; (8005884 <USB_FlushRxFifo+0x5c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e018      	b.n	8005878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	daf2      	bge.n	8005834 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2210      	movs	r2, #16
 8005856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4a08      	ldr	r2, [pc, #32]	; (8005884 <USB_FlushRxFifo+0x5c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e006      	b.n	8005878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d0f0      	beq.n	8005858 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	00030d40 	.word	0x00030d40

08005888 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a8:	4313      	orrs	r3, r2
 80058aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b087      	sub	sp, #28
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0306 	and.w	r3, r3, #6
 80058d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]
 80058de:	e00a      	b.n	80058f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d002      	beq.n	80058ec <USB_GetDevSpeed+0x32>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b06      	cmp	r3, #6
 80058ea:	d102      	bne.n	80058f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058ec:	2302      	movs	r3, #2
 80058ee:	75fb      	strb	r3, [r7, #23]
 80058f0:	e001      	b.n	80058f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058f2:	230f      	movs	r3, #15
 80058f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d13a      	bne.n	8005996 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	2101      	movs	r1, #1
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	b29b      	uxth	r3, r3
 8005938:	68f9      	ldr	r1, [r7, #12]
 800593a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800593e:	4313      	orrs	r3, r2
 8005940:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d155      	bne.n	8005a04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	791b      	ldrb	r3, [r3, #4]
 8005972:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005974:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	059b      	lsls	r3, r3, #22
 800597a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800597c:	4313      	orrs	r3, r2
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e036      	b.n	8005a04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	2101      	movs	r1, #1
 80059a8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11a      	bne.n	8005a04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	791b      	ldrb	r3, [r3, #4]
 80059e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059ea:	430b      	orrs	r3, r1
 80059ec:	4313      	orrs	r3, r2
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d161      	bne.n	8005af4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a46:	d11f      	bne.n	8005a88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	2101      	movs	r1, #1
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	68f9      	ldr	r1, [r7, #12]
 8005ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005acc:	4013      	ands	r3, r2
 8005ace:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	0159      	lsls	r1, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	440b      	add	r3, r1
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aea:	4619      	mov	r1, r3
 8005aec:	4b35      	ldr	r3, [pc, #212]	; (8005bc4 <USB_DeactivateEndpoint+0x1b0>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	600b      	str	r3, [r1, #0]
 8005af2:	e060      	b.n	8005bb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b0a:	d11f      	bne.n	8005b4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	43db      	mvns	r3, r3
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f303 	lsl.w	r3, r1, r3
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	68f9      	ldr	r1, [r7, #12]
 8005b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b90:	4013      	ands	r3, r2
 8005b92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	0159      	lsls	r1, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	440b      	add	r3, r1
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <USB_DeactivateEndpoint+0x1b4>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	ec337800 	.word	0xec337800
 8005bc8:	eff37800 	.word	0xeff37800

08005bcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	f040 815c 	bne.w	8005ea6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d132      	bne.n	8005c5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c54:	0cdb      	lsrs	r3, r3, #19
 8005c56:	04db      	lsls	r3, r3, #19
 8005c58:	6113      	str	r3, [r2, #16]
 8005c5a:	e074      	b.n	8005d46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c76:	0cdb      	lsrs	r3, r3, #19
 8005c78:	04db      	lsls	r3, r3, #19
 8005c7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6999      	ldr	r1, [r3, #24]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	440b      	add	r3, r1
 8005cb8:	1e59      	subs	r1, r3, #1
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cc2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005cc4:	4b9d      	ldr	r3, [pc, #628]	; (8005f3c <USB_EPStartXfer+0x370>)
 8005cc6:	400b      	ands	r3, r1
 8005cc8:	69b9      	ldr	r1, [r7, #24]
 8005cca:	0148      	lsls	r0, r1, #5
 8005ccc:	69f9      	ldr	r1, [r7, #28]
 8005cce:	4401      	add	r1, r0
 8005cd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cee:	69b9      	ldr	r1, [r7, #24]
 8005cf0:	0148      	lsls	r0, r1, #5
 8005cf2:	69f9      	ldr	r1, [r7, #28]
 8005cf4:	4401      	add	r1, r0
 8005cf6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	791b      	ldrb	r3, [r3, #4]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d11f      	bne.n	8005d46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005d24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d14b      	bne.n	8005de4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d009      	beq.n	8005d68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	461a      	mov	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	791b      	ldrb	r3, [r3, #4]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d128      	bne.n	8005dc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d110      	bne.n	8005da2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e00f      	b.n	8005dc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ddc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e133      	b.n	800604c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	791b      	ldrb	r3, [r3, #4]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d015      	beq.n	8005e38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 811b 	beq.w	800604c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	2101      	movs	r1, #1
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	69f9      	ldr	r1, [r7, #28]
 8005e2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e32:	4313      	orrs	r3, r2
 8005e34:	634b      	str	r3, [r1, #52]	; 0x34
 8005e36:	e109      	b.n	800604c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d110      	bne.n	8005e6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	0151      	lsls	r1, r2, #5
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	440a      	add	r2, r1
 8005e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	e00f      	b.n	8005e8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	6919      	ldr	r1, [r3, #16]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	781a      	ldrb	r2, [r3, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	b298      	uxth	r0, r3
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fade 	bl	8006460 <USB_WritePacket>
 8005ea4:	e0d2      	b.n	800604c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec0:	0cdb      	lsrs	r3, r3, #19
 8005ec2:	04db      	lsls	r3, r3, #19
 8005ec4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ee4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ee8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d126      	bne.n	8005f40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f08:	69b9      	ldr	r1, [r7, #24]
 8005f0a:	0148      	lsls	r0, r1, #5
 8005f0c:	69f9      	ldr	r1, [r7, #28]
 8005f0e:	4401      	add	r1, r0
 8005f10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f14:	4313      	orrs	r3, r2
 8005f16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	69fa      	ldr	r2, [r7, #28]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f36:	6113      	str	r3, [r2, #16]
 8005f38:	e03a      	b.n	8005fb0 <USB_EPStartXfer+0x3e4>
 8005f3a:	bf00      	nop
 8005f3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	1e5a      	subs	r2, r3, #1
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	8afa      	ldrh	r2, [r7, #22]
 8005f5c:	fb03 f202 	mul.w	r2, r3, r2
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	8afb      	ldrh	r3, [r7, #22]
 8005f74:	04d9      	lsls	r1, r3, #19
 8005f76:	4b38      	ldr	r3, [pc, #224]	; (8006058 <USB_EPStartXfer+0x48c>)
 8005f78:	400b      	ands	r3, r1
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	0148      	lsls	r0, r1, #5
 8005f7e:	69f9      	ldr	r1, [r7, #28]
 8005f80:	4401      	add	r1, r0
 8005f82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f86:	4313      	orrs	r3, r2
 8005f88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	0148      	lsls	r0, r1, #5
 8005fa4:	69f9      	ldr	r1, [r7, #28]
 8005fa6:	4401      	add	r1, r0
 8005fa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fac:	4313      	orrs	r3, r2
 8005fae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d10d      	bne.n	8005fd2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6919      	ldr	r1, [r3, #16]
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	460a      	mov	r2, r1
 8005fd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	791b      	ldrb	r3, [r3, #4]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d128      	bne.n	800602c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d110      	bne.n	800600c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e00f      	b.n	800602c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800604a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	1ff80000 	.word	0x1ff80000

0800605c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	f040 80ce 	bne.w	800621a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d132      	bne.n	80060ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	0151      	lsls	r1, r2, #5
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	440a      	add	r2, r1
 800609c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	0151      	lsls	r1, r2, #5
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	440a      	add	r2, r1
 80060c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e4:	0cdb      	lsrs	r3, r3, #19
 80060e6:	04db      	lsls	r3, r3, #19
 80060e8:	6113      	str	r3, [r2, #16]
 80060ea:	e04e      	b.n	800618a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006106:	0cdb      	lsrs	r3, r3, #19
 8006108:	04db      	lsls	r3, r3, #19
 800610a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006126:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800612a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800612e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	699a      	ldr	r2, [r3, #24]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	429a      	cmp	r2, r3
 800613a:	d903      	bls.n	8006144 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006162:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617a:	6939      	ldr	r1, [r7, #16]
 800617c:	0148      	lsls	r0, r1, #5
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	4401      	add	r1, r0
 8006182:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006186:	4313      	orrs	r3, r2
 8006188:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d11e      	bne.n	80061ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d009      	beq.n	80061ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	0151      	lsls	r1, r2, #5
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	440a      	add	r2, r1
 80061c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	e097      	b.n	80062fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8083 	beq.w	80062fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f303 	lsl.w	r3, r1, r3
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006214:	4313      	orrs	r3, r2
 8006216:	634b      	str	r3, [r1, #52]	; 0x34
 8006218:	e071      	b.n	80062fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006234:	0cdb      	lsrs	r3, r3, #19
 8006236:	04db      	lsls	r3, r3, #19
 8006238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006254:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006258:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800625c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ac:	6939      	ldr	r1, [r7, #16]
 80062ae:	0148      	lsls	r0, r1, #5
 80062b0:	6979      	ldr	r1, [r7, #20]
 80062b2:	4401      	add	r1, r0
 80062b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062b8:	4313      	orrs	r3, r2
 80062ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d10d      	bne.n	80062de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6919      	ldr	r1, [r3, #16]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062da:	460a      	mov	r2, r1
 80062dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d14a      	bne.n	80063c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006342:	f040 8086 	bne.w	8006452 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006368:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	7812      	ldrb	r2, [r2, #0]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	440a      	add	r2, r1
 8006384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800638c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f242 7210 	movw	r2, #10000	; 0x2710
 800639a:	4293      	cmp	r3, r2
 800639c:	d902      	bls.n	80063a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	75fb      	strb	r3, [r7, #23]
          break;
 80063a2:	e056      	b.n	8006452 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063bc:	d0e7      	beq.n	800638e <USB_EPStopXfer+0x82>
 80063be:	e048      	b.n	8006452 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d8:	d13b      	bne.n	8006452 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	7812      	ldrb	r2, [r2, #0]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	440a      	add	r2, r1
 8006418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800641c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006420:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3301      	adds	r3, #1
 8006426:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f242 7210 	movw	r2, #10000	; 0x2710
 800642e:	4293      	cmp	r3, r2
 8006430:	d902      	bls.n	8006438 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
          break;
 8006436:	e00c      	b.n	8006452 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800644c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006450:	d0e7      	beq.n	8006422 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
}
 8006454:	4618      	mov	r0, r3
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006460:	b480      	push	{r7}
 8006462:	b089      	sub	sp, #36	; 0x24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	460b      	mov	r3, r1
 8006470:	71fb      	strb	r3, [r7, #7]
 8006472:	4613      	mov	r3, r2
 8006474:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800647e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d123      	bne.n	80064ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006486:	88bb      	ldrh	r3, [r7, #4]
 8006488:	3303      	adds	r3, #3
 800648a:	089b      	lsrs	r3, r3, #2
 800648c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e018      	b.n	80064c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	031a      	lsls	r2, r3, #12
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a0:	461a      	mov	r2, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	3301      	adds	r3, #1
 80064ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3301      	adds	r3, #1
 80064b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	3301      	adds	r3, #1
 80064b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	3301      	adds	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	3301      	adds	r3, #1
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d3e2      	bcc.n	8006494 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3724      	adds	r7, #36	; 0x24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064dc:	b480      	push	{r7}
 80064de:	b08b      	sub	sp, #44	; 0x2c
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	089b      	lsrs	r3, r3, #2
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	e014      	b.n	8006532 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	601a      	str	r2, [r3, #0]
    pDest++;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	3301      	adds	r3, #1
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	3301      	adds	r3, #1
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	3301      	adds	r3, #1
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	3301      	adds	r3, #1
 8006530:	623b      	str	r3, [r7, #32]
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	429a      	cmp	r2, r3
 8006538:	d3e6      	bcc.n	8006508 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800653a:	8bfb      	ldrh	r3, [r7, #30]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654a:	461a      	mov	r2, r3
 800654c:	f107 0310 	add.w	r3, r7, #16
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
 8006560:	b2da      	uxtb	r2, r3
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	701a      	strb	r2, [r3, #0]
      i++;
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	3301      	adds	r3, #1
 800656a:	623b      	str	r3, [r7, #32]
      pDest++;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	3301      	adds	r3, #1
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006572:	8bfb      	ldrh	r3, [r7, #30]
 8006574:	3b01      	subs	r3, #1
 8006576:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006578:	8bfb      	ldrh	r3, [r7, #30]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1ea      	bne.n	8006554 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006580:	4618      	mov	r0, r3
 8006582:	372c      	adds	r7, #44	; 0x2c
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d12c      	bne.n	8006602 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	db12      	blt.n	80065e0 <USB_EPSetStall+0x54>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00f      	beq.n	80065e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	e02b      	b.n	800665a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	db12      	blt.n	800663a <USB_EPSetStall+0xae>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00f      	beq.n	800663a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006634:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006638:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006658:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d128      	bne.n	80066d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	791b      	ldrb	r3, [r3, #4]
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d003      	beq.n	80066b4 <USB_EPClearStall+0x4c>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	791b      	ldrb	r3, [r3, #4]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d138      	bne.n	8006726 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	e027      	b.n	8006726 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	0151      	lsls	r1, r2, #5
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	440a      	add	r2, r1
 80066ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	791b      	ldrb	r3, [r3, #4]
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d003      	beq.n	8006706 <USB_EPClearStall+0x9e>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	791b      	ldrb	r3, [r3, #4]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d10f      	bne.n	8006726 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006724:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006752:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006756:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800676e:	4313      	orrs	r3, r2
 8006770:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800679a:	f023 0303 	bic.w	r3, r3, #3
 800679e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ae:	f023 0302 	bic.w	r3, r3, #2
 80067b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067dc:	f023 0303 	bic.w	r3, r3, #3
 80067e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f0:	f043 0302 	orr.w	r3, r3, #2
 80067f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4013      	ands	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800681c:	68fb      	ldr	r3, [r7, #12]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	0c1b      	lsrs	r3, r3, #16
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	4013      	ands	r3, r2
 8006880:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	b29b      	uxth	r3, r3
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	4013      	ands	r3, r2
 80068be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068c0:	68bb      	ldr	r3, [r7, #8]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068f2:	78fb      	ldrb	r3, [r7, #3]
 80068f4:	f003 030f 	and.w	r3, r3, #15
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	fa22 f303 	lsr.w	r3, r2, r3
 80068fe:	01db      	lsls	r3, r3, #7
 8006900:	b2db      	uxtb	r3, r3
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4013      	ands	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800691c:	68bb      	ldr	r3, [r7, #8]
}
 800691e:	4618      	mov	r0, r3
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0301 	and.w	r3, r3, #1
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006946:	b480      	push	{r7}
 8006948:	b085      	sub	sp, #20
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006960:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006964:	f023 0307 	bic.w	r3, r3, #7
 8006968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800697c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	460b      	mov	r3, r1
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	333c      	adds	r3, #60	; 0x3c
 80069a2:	3304      	adds	r3, #4
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4a26      	ldr	r2, [pc, #152]	; (8006a44 <USB_EP0_OutStart+0xb8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d90a      	bls.n	80069c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c0:	d101      	bne.n	80069c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e037      	b.n	8006a36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069cc:	461a      	mov	r2, r3
 80069ce:	2300      	movs	r3, #0
 80069d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f4:	f043 0318 	orr.w	r3, r3, #24
 80069f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a0e:	7afb      	ldrb	r3, [r7, #11]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d10f      	bne.n	8006a34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	4f54300a 	.word	0x4f54300a

08006a48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3301      	adds	r3, #1
 8006a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <USB_CoreReset+0x64>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d901      	bls.n	8006a66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e01b      	b.n	8006a9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	daf2      	bge.n	8006a54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f043 0201 	orr.w	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a09      	ldr	r2, [pc, #36]	; (8006aac <USB_CoreReset+0x64>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d901      	bls.n	8006a90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e006      	b.n	8006a9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d0f0      	beq.n	8006a7e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	00030d40 	.word	0x00030d40

08006ab0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006abc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ac0:	f002 fc94 	bl	80093ec <USBD_static_malloc>
 8006ac4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	32b0      	adds	r2, #176	; 0xb0
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006adc:	2302      	movs	r3, #2
 8006ade:	e0d4      	b.n	8006c8a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ae0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f002 fcee 	bl	80094c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	32b0      	adds	r2, #176	; 0xb0
 8006af6:	68f9      	ldr	r1, [r7, #12]
 8006af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	32b0      	adds	r2, #176	; 0xb0
 8006b06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7c1b      	ldrb	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d138      	bne.n	8006b8a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b18:	4b5e      	ldr	r3, [pc, #376]	; (8006c94 <USBD_CDC_Init+0x1e4>)
 8006b1a:	7819      	ldrb	r1, [r3, #0]
 8006b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b20:	2202      	movs	r2, #2
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f002 fb3f 	bl	80091a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b28:	4b5a      	ldr	r3, [pc, #360]	; (8006c94 <USBD_CDC_Init+0x1e4>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	3324      	adds	r3, #36	; 0x24
 8006b3e:	2201      	movs	r2, #1
 8006b40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b42:	4b55      	ldr	r3, [pc, #340]	; (8006c98 <USBD_CDC_Init+0x1e8>)
 8006b44:	7819      	ldrb	r1, [r3, #0]
 8006b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f002 fb2a 	bl	80091a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b52:	4b51      	ldr	r3, [pc, #324]	; (8006c98 <USBD_CDC_Init+0x1e8>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	f003 020f 	and.w	r2, r3, #15
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b6e:	4b4b      	ldr	r3, [pc, #300]	; (8006c9c <USBD_CDC_Init+0x1ec>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	f003 020f 	and.w	r2, r3, #15
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	3326      	adds	r3, #38	; 0x26
 8006b84:	2210      	movs	r2, #16
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	e035      	b.n	8006bf6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b8a:	4b42      	ldr	r3, [pc, #264]	; (8006c94 <USBD_CDC_Init+0x1e4>)
 8006b8c:	7819      	ldrb	r1, [r3, #0]
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	2202      	movs	r2, #2
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f002 fb07 	bl	80091a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b98:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <USBD_CDC_Init+0x1e4>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 020f 	and.w	r2, r3, #15
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	3324      	adds	r3, #36	; 0x24
 8006bae:	2201      	movs	r2, #1
 8006bb0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bb2:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <USBD_CDC_Init+0x1e8>)
 8006bb4:	7819      	ldrb	r1, [r3, #0]
 8006bb6:	2340      	movs	r3, #64	; 0x40
 8006bb8:	2202      	movs	r2, #2
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f002 faf3 	bl	80091a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bc0:	4b35      	ldr	r3, [pc, #212]	; (8006c98 <USBD_CDC_Init+0x1e8>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	f003 020f 	and.w	r2, r3, #15
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bd8:	2201      	movs	r2, #1
 8006bda:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006bdc:	4b2f      	ldr	r3, [pc, #188]	; (8006c9c <USBD_CDC_Init+0x1ec>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f003 020f 	and.w	r2, r3, #15
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	440b      	add	r3, r1
 8006bf0:	3326      	adds	r3, #38	; 0x26
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006bf6:	4b29      	ldr	r3, [pc, #164]	; (8006c9c <USBD_CDC_Init+0x1ec>)
 8006bf8:	7819      	ldrb	r1, [r3, #0]
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 fad1 	bl	80091a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c04:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <USBD_CDC_Init+0x1ec>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	3324      	adds	r3, #36	; 0x24
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	33b0      	adds	r3, #176	; 0xb0
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c54:	2302      	movs	r3, #2
 8006c56:	e018      	b.n	8006c8a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	7c1b      	ldrb	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c60:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <USBD_CDC_Init+0x1e8>)
 8006c62:	7819      	ldrb	r1, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 fb88 	bl	8009384 <USBD_LL_PrepareReceive>
 8006c74:	e008      	b.n	8006c88 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c76:	4b08      	ldr	r3, [pc, #32]	; (8006c98 <USBD_CDC_Init+0x1e8>)
 8006c78:	7819      	ldrb	r1, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f002 fb7e 	bl	8009384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	2000009b 	.word	0x2000009b
 8006c98:	2000009c 	.word	0x2000009c
 8006c9c:	2000009d 	.word	0x2000009d

08006ca0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006cac:	4b3a      	ldr	r3, [pc, #232]	; (8006d98 <USBD_CDC_DeInit+0xf8>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f002 fa9d 	bl	80091f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006cb8:	4b37      	ldr	r3, [pc, #220]	; (8006d98 <USBD_CDC_DeInit+0xf8>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	3324      	adds	r3, #36	; 0x24
 8006cce:	2200      	movs	r2, #0
 8006cd0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006cd2:	4b32      	ldr	r3, [pc, #200]	; (8006d9c <USBD_CDC_DeInit+0xfc>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 fa8a 	bl	80091f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006cde:	4b2f      	ldr	r3, [pc, #188]	; (8006d9c <USBD_CDC_DeInit+0xfc>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	f003 020f 	and.w	r2, r3, #15
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	440b      	add	r3, r1
 8006cf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006cfa:	4b29      	ldr	r3, [pc, #164]	; (8006da0 <USBD_CDC_DeInit+0x100>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 fa76 	bl	80091f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d06:	4b26      	ldr	r3, [pc, #152]	; (8006da0 <USBD_CDC_DeInit+0x100>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	f003 020f 	and.w	r2, r3, #15
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	3324      	adds	r3, #36	; 0x24
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d20:	4b1f      	ldr	r3, [pc, #124]	; (8006da0 <USBD_CDC_DeInit+0x100>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 020f 	and.w	r2, r3, #15
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	440b      	add	r3, r1
 8006d34:	3326      	adds	r3, #38	; 0x26
 8006d36:	2200      	movs	r2, #0
 8006d38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	32b0      	adds	r2, #176	; 0xb0
 8006d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01f      	beq.n	8006d8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	33b0      	adds	r3, #176	; 0xb0
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32b0      	adds	r2, #176	; 0xb0
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f002 fb4a 	bl	8009408 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	32b0      	adds	r2, #176	; 0xb0
 8006d7e:	2100      	movs	r1, #0
 8006d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2000009b 	.word	0x2000009b
 8006d9c:	2000009c 	.word	0x2000009c
 8006da0:	2000009d 	.word	0x2000009d

08006da4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	32b0      	adds	r2, #176	; 0xb0
 8006db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e0bf      	b.n	8006f54 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d050      	beq.n	8006e82 <USBD_CDC_Setup+0xde>
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	f040 80af 	bne.w	8006f44 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	88db      	ldrh	r3, [r3, #6]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d03a      	beq.n	8006e64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	b25b      	sxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	da1b      	bge.n	8006e30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	33b0      	adds	r3, #176	; 0xb0
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	88d2      	ldrh	r2, [r2, #6]
 8006e14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	bf28      	it	cs
 8006e1e:	2307      	movcs	r3, #7
 8006e20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	89fa      	ldrh	r2, [r7, #14]
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 fd89 	bl	8008940 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e2e:	e090      	b.n	8006f52 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	785a      	ldrb	r2, [r3, #1]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	88db      	ldrh	r3, [r3, #6]
 8006e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8006e40:	d803      	bhi.n	8006e4a <USBD_CDC_Setup+0xa6>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	88db      	ldrh	r3, [r3, #6]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	e000      	b.n	8006e4c <USBD_CDC_Setup+0xa8>
 8006e4a:	2240      	movs	r2, #64	; 0x40
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e52:	6939      	ldr	r1, [r7, #16]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fd9b 	bl	8008998 <USBD_CtlPrepareRx>
      break;
 8006e62:	e076      	b.n	8006f52 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	33b0      	adds	r3, #176	; 0xb0
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	7850      	ldrb	r0, [r2, #1]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	4798      	blx	r3
      break;
 8006e80:	e067      	b.n	8006f52 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b0b      	cmp	r3, #11
 8006e88:	d851      	bhi.n	8006f2e <USBD_CDC_Setup+0x18a>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <USBD_CDC_Setup+0xec>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006ec1 	.word	0x08006ec1
 8006e94:	08006f3d 	.word	0x08006f3d
 8006e98:	08006f2f 	.word	0x08006f2f
 8006e9c:	08006f2f 	.word	0x08006f2f
 8006ea0:	08006f2f 	.word	0x08006f2f
 8006ea4:	08006f2f 	.word	0x08006f2f
 8006ea8:	08006f2f 	.word	0x08006f2f
 8006eac:	08006f2f 	.word	0x08006f2f
 8006eb0:	08006f2f 	.word	0x08006f2f
 8006eb4:	08006f2f 	.word	0x08006f2f
 8006eb8:	08006eeb 	.word	0x08006eeb
 8006ebc:	08006f15 	.word	0x08006f15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d107      	bne.n	8006edc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006ecc:	f107 030a 	add.w	r3, r7, #10
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 fd33 	bl	8008940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eda:	e032      	b.n	8006f42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fcbd 	bl	800885e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ee8:	e02b      	b.n	8006f42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d107      	bne.n	8006f06 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ef6:	f107 030d 	add.w	r3, r7, #13
 8006efa:	2201      	movs	r2, #1
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fd1e 	bl	8008940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f04:	e01d      	b.n	8006f42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 fca8 	bl	800885e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	75fb      	strb	r3, [r7, #23]
          break;
 8006f12:	e016      	b.n	8006f42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d00f      	beq.n	8006f40 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 fc9b 	bl	800885e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f2c:	e008      	b.n	8006f40 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fc94 	bl	800885e <USBD_CtlError>
          ret = USBD_FAIL;
 8006f36:	2303      	movs	r3, #3
 8006f38:	75fb      	strb	r3, [r7, #23]
          break;
 8006f3a:	e002      	b.n	8006f42 <USBD_CDC_Setup+0x19e>
          break;
 8006f3c:	bf00      	nop
 8006f3e:	e008      	b.n	8006f52 <USBD_CDC_Setup+0x1ae>
          break;
 8006f40:	bf00      	nop
      }
      break;
 8006f42:	e006      	b.n	8006f52 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fc89 	bl	800885e <USBD_CtlError>
      ret = USBD_FAIL;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f50:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	32b0      	adds	r2, #176	; 0xb0
 8006f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e065      	b.n	8007052 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	32b0      	adds	r2, #176	; 0xb0
 8006f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	3318      	adds	r3, #24
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d02f      	beq.n	8007010 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	f003 020f 	and.w	r2, r3, #15
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	3318      	adds	r3, #24
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	f003 010f 	and.w	r1, r3, #15
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	440b      	add	r3, r1
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4403      	add	r3, r0
 8006fd8:	3348      	adds	r3, #72	; 0x48
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fe0:	fb01 f303 	mul.w	r3, r1, r3
 8006fe4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d112      	bne.n	8007010 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	f003 020f 	and.w	r2, r3, #15
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	3318      	adds	r3, #24
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007002:	78f9      	ldrb	r1, [r7, #3]
 8007004:	2300      	movs	r3, #0
 8007006:	2200      	movs	r2, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f002 f99a 	bl	8009342 <USBD_LL_Transmit>
 800700e:	e01f      	b.n	8007050 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	33b0      	adds	r3, #176	; 0xb0
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d010      	beq.n	8007050 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	33b0      	adds	r3, #176	; 0xb0
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	32b0      	adds	r2, #176	; 0xb0
 8007070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007074:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	32b0      	adds	r2, #176	; 0xb0
 8007080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	e01a      	b.n	80070c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f002 f998 	bl	80093c6 <USBD_LL_GetRxDataSize>
 8007096:	4602      	mov	r2, r0
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	33b0      	adds	r3, #176	; 0xb0
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070bc:	4611      	mov	r1, r2
 80070be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	32b0      	adds	r2, #176	; 0xb0
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e025      	b.n	8007138 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	33b0      	adds	r3, #176	; 0xb0
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01a      	beq.n	8007136 <USBD_CDC_EP0_RxReady+0x6c>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007106:	2bff      	cmp	r3, #255	; 0xff
 8007108:	d015      	beq.n	8007136 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	33b0      	adds	r3, #176	; 0xb0
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007122:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800712a:	b292      	uxth	r2, r2
 800712c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	22ff      	movs	r2, #255	; 0xff
 8007132:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007148:	2182      	movs	r1, #130	; 0x82
 800714a:	4818      	ldr	r0, [pc, #96]	; (80071ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800714c:	f000 fd4f 	bl	8007bee <USBD_GetEpDesc>
 8007150:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007152:	2101      	movs	r1, #1
 8007154:	4815      	ldr	r0, [pc, #84]	; (80071ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007156:	f000 fd4a 	bl	8007bee <USBD_GetEpDesc>
 800715a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800715c:	2181      	movs	r1, #129	; 0x81
 800715e:	4813      	ldr	r0, [pc, #76]	; (80071ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007160:	f000 fd45 	bl	8007bee <USBD_GetEpDesc>
 8007164:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2210      	movs	r2, #16
 8007170:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d006      	beq.n	8007186 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2200      	movs	r2, #0
 800717c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007180:	711a      	strb	r2, [r3, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d006      	beq.n	800719a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007194:	711a      	strb	r2, [r3, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2243      	movs	r2, #67	; 0x43
 800719e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000058 	.word	0x20000058

080071b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071b8:	2182      	movs	r1, #130	; 0x82
 80071ba:	4818      	ldr	r0, [pc, #96]	; (800721c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071bc:	f000 fd17 	bl	8007bee <USBD_GetEpDesc>
 80071c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071c2:	2101      	movs	r1, #1
 80071c4:	4815      	ldr	r0, [pc, #84]	; (800721c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071c6:	f000 fd12 	bl	8007bee <USBD_GetEpDesc>
 80071ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071cc:	2181      	movs	r1, #129	; 0x81
 80071ce:	4813      	ldr	r0, [pc, #76]	; (800721c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80071d0:	f000 fd0d 	bl	8007bee <USBD_GetEpDesc>
 80071d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2210      	movs	r2, #16
 80071e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2200      	movs	r2, #0
 80071ec:	711a      	strb	r2, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f042 0202 	orr.w	r2, r2, #2
 80071f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d006      	beq.n	800720a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	711a      	strb	r2, [r3, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f042 0202 	orr.w	r2, r2, #2
 8007208:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2243      	movs	r2, #67	; 0x43
 800720e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000058 	.word	0x20000058

08007220 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007228:	2182      	movs	r1, #130	; 0x82
 800722a:	4818      	ldr	r0, [pc, #96]	; (800728c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800722c:	f000 fcdf 	bl	8007bee <USBD_GetEpDesc>
 8007230:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007232:	2101      	movs	r1, #1
 8007234:	4815      	ldr	r0, [pc, #84]	; (800728c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007236:	f000 fcda 	bl	8007bee <USBD_GetEpDesc>
 800723a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800723c:	2181      	movs	r1, #129	; 0x81
 800723e:	4813      	ldr	r0, [pc, #76]	; (800728c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007240:	f000 fcd5 	bl	8007bee <USBD_GetEpDesc>
 8007244:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2210      	movs	r2, #16
 8007250:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d006      	beq.n	8007266 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2200      	movs	r2, #0
 800725c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007260:	711a      	strb	r2, [r3, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d006      	beq.n	800727a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007274:	711a      	strb	r2, [r3, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2243      	movs	r2, #67	; 0x43
 800727e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007280:	4b02      	ldr	r3, [pc, #8]	; (800728c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000058 	.word	0x20000058

08007290 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	220a      	movs	r2, #10
 800729c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800729e:	4b03      	ldr	r3, [pc, #12]	; (80072ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	20000014 	.word	0x20000014

080072b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e009      	b.n	80072d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	33b0      	adds	r3, #176	; 0xb0
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	32b0      	adds	r2, #176	; 0xb0
 80072fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007306:	2303      	movs	r3, #3
 8007308:	e008      	b.n	800731c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	32b0      	adds	r2, #176	; 0xb0
 800733c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007340:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007348:	2303      	movs	r3, #3
 800734a:	e004      	b.n	8007356 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	32b0      	adds	r2, #176	; 0xb0
 8007376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800737c:	2301      	movs	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32b0      	adds	r2, #176	; 0xb0
 800738a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007392:	2303      	movs	r3, #3
 8007394:	e025      	b.n	80073e2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800739c:	2b00      	cmp	r3, #0
 800739e:	d11f      	bne.n	80073e0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80073a8:	4b10      	ldr	r3, [pc, #64]	; (80073ec <USBD_CDC_TransmitPacket+0x88>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	f003 020f 	and.w	r2, r3, #15
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4403      	add	r3, r0
 80073c2:	3318      	adds	r3, #24
 80073c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80073c6:	4b09      	ldr	r3, [pc, #36]	; (80073ec <USBD_CDC_TransmitPacket+0x88>)
 80073c8:	7819      	ldrb	r1, [r3, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 ffb3 	bl	8009342 <USBD_LL_Transmit>

    ret = USBD_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	2000009b 	.word	0x2000009b

080073f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	32b0      	adds	r2, #176	; 0xb0
 8007402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007406:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	32b0      	adds	r2, #176	; 0xb0
 8007412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800741a:	2303      	movs	r3, #3
 800741c:	e018      	b.n	8007450 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	7c1b      	ldrb	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10a      	bne.n	800743c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <USBD_CDC_ReceivePacket+0x68>)
 8007428:	7819      	ldrb	r1, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f001 ffa5 	bl	8009384 <USBD_LL_PrepareReceive>
 800743a:	e008      	b.n	800744e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <USBD_CDC_ReceivePacket+0x68>)
 800743e:	7819      	ldrb	r1, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007446:	2340      	movs	r3, #64	; 0x40
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 ff9b 	bl	8009384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	2000009c 	.word	0x2000009c

0800745c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	4613      	mov	r3, r2
 8007468:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007470:	2303      	movs	r3, #3
 8007472:	e01f      	b.n	80074b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	79fa      	ldrb	r2, [r7, #7]
 80074a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 fe15 	bl	80090d8 <USBD_LL_Init>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e025      	b.n	8007520 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	32ae      	adds	r2, #174	; 0xae
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00f      	beq.n	8007510 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	32ae      	adds	r2, #174	; 0xae
 80074fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	f107 020e 	add.w	r2, r7, #14
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	4602      	mov	r2, r0
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 fe1d 	bl	8009170 <USBD_LL_Start>
 8007536:	4603      	mov	r3, r0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007548:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	78fa      	ldrb	r2, [r7, #3]
 800757a:	4611      	mov	r1, r2
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
 8007580:	4603      	mov	r3, r0
 8007582:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	78fa      	ldrb	r2, [r7, #3]
 80075a8:	4611      	mov	r1, r2
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075b4:	2303      	movs	r3, #3
 80075b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 f908 	bl	80087ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075e8:	461a      	mov	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075f6:	f003 031f 	and.w	r3, r3, #31
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d01a      	beq.n	8007634 <USBD_LL_SetupStage+0x72>
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d822      	bhi.n	8007648 <USBD_LL_SetupStage+0x86>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <USBD_LL_SetupStage+0x4a>
 8007606:	2b01      	cmp	r3, #1
 8007608:	d00a      	beq.n	8007620 <USBD_LL_SetupStage+0x5e>
 800760a:	e01d      	b.n	8007648 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fb5f 	bl	8007cd8 <USBD_StdDevReq>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]
      break;
 800761e:	e020      	b.n	8007662 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fbc7 	bl	8007dbc <USBD_StdItfReq>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
      break;
 8007632:	e016      	b.n	8007662 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fc29 	bl	8007e94 <USBD_StdEPReq>
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]
      break;
 8007646:	e00c      	b.n	8007662 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800764e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007652:	b2db      	uxtb	r3, r3
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fdea 	bl	8009230 <USBD_LL_StallEP>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
      break;
 8007660:	bf00      	nop
  }

  return ret;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	460b      	mov	r3, r1
 8007676:	607a      	str	r2, [r7, #4]
 8007678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d16e      	bne.n	8007762 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800768a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007692:	2b03      	cmp	r3, #3
 8007694:	f040 8098 	bne.w	80077c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d913      	bls.n	80076cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	1ad2      	subs	r2, r2, r3
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	4293      	cmp	r3, r2
 80076bc:	bf28      	it	cs
 80076be:	4613      	movcs	r3, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	6879      	ldr	r1, [r7, #4]
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f001 f984 	bl	80089d2 <USBD_CtlContinueRx>
 80076ca:	e07d      	b.n	80077c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d014      	beq.n	8007704 <USBD_LL_DataOutStage+0x98>
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d81d      	bhi.n	800771a <USBD_LL_DataOutStage+0xae>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <USBD_LL_DataOutStage+0x7c>
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d003      	beq.n	80076ee <USBD_LL_DataOutStage+0x82>
 80076e6:	e018      	b.n	800771a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	75bb      	strb	r3, [r7, #22]
            break;
 80076ec:	e018      	b.n	8007720 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	4619      	mov	r1, r3
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fa5e 	bl	8007bba <USBD_CoreFindIF>
 80076fe:	4603      	mov	r3, r0
 8007700:	75bb      	strb	r3, [r7, #22]
            break;
 8007702:	e00d      	b.n	8007720 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800770a:	b2db      	uxtb	r3, r3
 800770c:	4619      	mov	r1, r3
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 fa60 	bl	8007bd4 <USBD_CoreFindEP>
 8007714:	4603      	mov	r3, r0
 8007716:	75bb      	strb	r3, [r7, #22]
            break;
 8007718:	e002      	b.n	8007720 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	75bb      	strb	r3, [r7, #22]
            break;
 800771e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007720:	7dbb      	ldrb	r3, [r7, #22]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d119      	bne.n	800775a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b03      	cmp	r3, #3
 8007730:	d113      	bne.n	800775a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007732:	7dba      	ldrb	r2, [r7, #22]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	32ae      	adds	r2, #174	; 0xae
 8007738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007742:	7dba      	ldrb	r2, [r7, #22]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800774a:	7dba      	ldrb	r2, [r7, #22]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	32ae      	adds	r2, #174	; 0xae
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f001 f94a 	bl	80089f4 <USBD_CtlSendStatus>
 8007760:	e032      	b.n	80077c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007768:	b2db      	uxtb	r3, r3
 800776a:	4619      	mov	r1, r3
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fa31 	bl	8007bd4 <USBD_CoreFindEP>
 8007772:	4603      	mov	r3, r0
 8007774:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007776:	7dbb      	ldrb	r3, [r7, #22]
 8007778:	2bff      	cmp	r3, #255	; 0xff
 800777a:	d025      	beq.n	80077c8 <USBD_LL_DataOutStage+0x15c>
 800777c:	7dbb      	ldrb	r3, [r7, #22]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d122      	bne.n	80077c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b03      	cmp	r3, #3
 800778c:	d117      	bne.n	80077be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800778e:	7dba      	ldrb	r2, [r7, #22]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	32ae      	adds	r2, #174	; 0xae
 8007794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00f      	beq.n	80077be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800779e:	7dba      	ldrb	r2, [r7, #22]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077a6:	7dba      	ldrb	r2, [r7, #22]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	32ae      	adds	r2, #174	; 0xae
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	7afa      	ldrb	r2, [r7, #11]
 80077b4:	4611      	mov	r1, r2
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	4798      	blx	r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
 80077c6:	e000      	b.n	80077ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b086      	sub	sp, #24
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	460b      	mov	r3, r1
 80077dc:	607a      	str	r2, [r7, #4]
 80077de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077e0:	7afb      	ldrb	r3, [r7, #11]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d16f      	bne.n	80078c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3314      	adds	r3, #20
 80077ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d15a      	bne.n	80078ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d914      	bls.n	800782c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	461a      	mov	r2, r3
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f001 f8ac 	bl	8008976 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800781e:	2300      	movs	r3, #0
 8007820:	2200      	movs	r2, #0
 8007822:	2100      	movs	r1, #0
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f001 fdad 	bl	8009384 <USBD_LL_PrepareReceive>
 800782a:	e03f      	b.n	80078ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	d11c      	bne.n	8007872 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007840:	429a      	cmp	r2, r3
 8007842:	d316      	bcc.n	8007872 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800784e:	429a      	cmp	r2, r3
 8007850:	d20f      	bcs.n	8007872 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007852:	2200      	movs	r2, #0
 8007854:	2100      	movs	r1, #0
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f001 f88d 	bl	8008976 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007864:	2300      	movs	r3, #0
 8007866:	2200      	movs	r2, #0
 8007868:	2100      	movs	r1, #0
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f001 fd8a 	bl	8009384 <USBD_LL_PrepareReceive>
 8007870:	e01c      	b.n	80078ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d10f      	bne.n	800789e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800789e:	2180      	movs	r1, #128	; 0x80
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f001 fcc5 	bl	8009230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f001 f8b7 	bl	8008a1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d03a      	beq.n	800792c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fe42 	bl	8007540 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078c4:	e032      	b.n	800792c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078c6:	7afb      	ldrb	r3, [r7, #11]
 80078c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	4619      	mov	r1, r3
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f97f 	bl	8007bd4 <USBD_CoreFindEP>
 80078d6:	4603      	mov	r3, r0
 80078d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2bff      	cmp	r3, #255	; 0xff
 80078de:	d025      	beq.n	800792c <USBD_LL_DataInStage+0x15a>
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d122      	bne.n	800792c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d11c      	bne.n	800792c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078f2:	7dfa      	ldrb	r2, [r7, #23]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	32ae      	adds	r2, #174	; 0xae
 80078f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d014      	beq.n	800792c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007902:	7dfa      	ldrb	r2, [r7, #23]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800790a:	7dfa      	ldrb	r2, [r7, #23]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	32ae      	adds	r2, #174	; 0xae
 8007910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	7afa      	ldrb	r2, [r7, #11]
 8007918:	4611      	mov	r1, r2
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	4798      	blx	r3
 800791e:	4603      	mov	r3, r0
 8007920:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007922:	7dbb      	ldrb	r3, [r7, #22]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007928:	7dbb      	ldrb	r3, [r7, #22]
 800792a:	e000      	b.n	800792e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d014      	beq.n	800799c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00e      	beq.n	800799c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6852      	ldr	r2, [r2, #4]
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	4611      	mov	r1, r2
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007998:	2303      	movs	r3, #3
 800799a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	2200      	movs	r2, #0
 80079a0:	2100      	movs	r1, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fbff 	bl	80091a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2240      	movs	r2, #64	; 0x40
 80079b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079b8:	2340      	movs	r3, #64	; 0x40
 80079ba:	2200      	movs	r2, #0
 80079bc:	2180      	movs	r1, #128	; 0x80
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 fbf1 	bl	80091a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2240      	movs	r2, #64	; 0x40
 80079ce:	621a      	str	r2, [r3, #32]

  return ret;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2204      	movs	r2, #4
 8007a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d106      	bne.n	8007a48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d110      	bne.n	8007a8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	32ae      	adds	r2, #174	; 0xae
 8007aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e01c      	b.n	8007af2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d115      	bne.n	8007af0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	32ae      	adds	r2, #174	; 0xae
 8007ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32ae      	adds	r2, #174	; 0xae
 8007ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	4611      	mov	r1, r2
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	32ae      	adds	r2, #174	; 0xae
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e01c      	b.n	8007b56 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d115      	bne.n	8007b54 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	32ae      	adds	r2, #174	; 0xae
 8007b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	32ae      	adds	r2, #174	; 0xae
 8007b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	78fa      	ldrb	r2, [r7, #3]
 8007b4e:	4611      	mov	r1, r2
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00e      	beq.n	8007bb0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6852      	ldr	r2, [r2, #4]
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bc6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007be0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d920      	bls.n	8007c58 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c1e:	e013      	b.n	8007c48 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c20:	f107 030a 	add.w	r3, r7, #10
 8007c24:	4619      	mov	r1, r3
 8007c26:	6978      	ldr	r0, [r7, #20]
 8007c28:	f000 f81b 	bl	8007c62 <USBD_GetNextDesc>
 8007c2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	d108      	bne.n	8007c48 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	789b      	ldrb	r3, [r3, #2]
 8007c3e:	78fa      	ldrb	r2, [r7, #3]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d008      	beq.n	8007c56 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	885b      	ldrh	r3, [r3, #2]
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	897b      	ldrh	r3, [r7, #10]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d8e5      	bhi.n	8007c20 <USBD_GetEpDesc+0x32>
 8007c54:	e000      	b.n	8007c58 <USBD_GetEpDesc+0x6a>
          break;
 8007c56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c58:	693b      	ldr	r3, [r7, #16]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	881a      	ldrh	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cba:	8a3b      	ldrh	r3, [r7, #16]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	b21a      	sxth	r2, r3
 8007cc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	b21b      	sxth	r3, r3
 8007cc8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cca:	89fb      	ldrh	r3, [r7, #14]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	371c      	adds	r7, #28
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d005      	beq.n	8007cfe <USBD_StdDevReq+0x26>
 8007cf2:	2b40      	cmp	r3, #64	; 0x40
 8007cf4:	d857      	bhi.n	8007da6 <USBD_StdDevReq+0xce>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00f      	beq.n	8007d1a <USBD_StdDevReq+0x42>
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d153      	bne.n	8007da6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	32ae      	adds	r2, #174	; 0xae
 8007d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	4798      	blx	r3
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]
      break;
 8007d18:	e04a      	b.n	8007db0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d83b      	bhi.n	8007d9a <USBD_StdDevReq+0xc2>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBD_StdDevReq+0x50>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d7d 	.word	0x08007d7d
 8007d2c:	08007d91 	.word	0x08007d91
 8007d30:	08007d9b 	.word	0x08007d9b
 8007d34:	08007d87 	.word	0x08007d87
 8007d38:	08007d9b 	.word	0x08007d9b
 8007d3c:	08007d5b 	.word	0x08007d5b
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d9b 	.word	0x08007d9b
 8007d48:	08007d73 	.word	0x08007d73
 8007d4c:	08007d65 	.word	0x08007d65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fa3c 	bl	80081d0 <USBD_GetDescriptor>
          break;
 8007d58:	e024      	b.n	8007da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fba1 	bl	80084a4 <USBD_SetAddress>
          break;
 8007d62:	e01f      	b.n	8007da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fbe0 	bl	800852c <USBD_SetConfig>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]
          break;
 8007d70:	e018      	b.n	8007da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fc83 	bl	8008680 <USBD_GetConfig>
          break;
 8007d7a:	e013      	b.n	8007da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fcb4 	bl	80086ec <USBD_GetStatus>
          break;
 8007d84:	e00e      	b.n	8007da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fce3 	bl	8008754 <USBD_SetFeature>
          break;
 8007d8e:	e009      	b.n	8007da4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fd07 	bl	80087a6 <USBD_ClrFeature>
          break;
 8007d98:	e004      	b.n	8007da4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fd5e 	bl	800885e <USBD_CtlError>
          break;
 8007da2:	bf00      	nop
      }
      break;
 8007da4:	e004      	b.n	8007db0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fd58 	bl	800885e <USBD_CtlError>
      break;
 8007dae:	bf00      	nop
  }

  return ret;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop

08007dbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	d005      	beq.n	8007de2 <USBD_StdItfReq+0x26>
 8007dd6:	2b40      	cmp	r3, #64	; 0x40
 8007dd8:	d852      	bhi.n	8007e80 <USBD_StdItfReq+0xc4>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <USBD_StdItfReq+0x26>
 8007dde:	2b20      	cmp	r3, #32
 8007de0:	d14e      	bne.n	8007e80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d840      	bhi.n	8007e72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	889b      	ldrh	r3, [r3, #4]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d836      	bhi.n	8007e68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	889b      	ldrh	r3, [r3, #4]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff fed9 	bl	8007bba <USBD_CoreFindIF>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2bff      	cmp	r3, #255	; 0xff
 8007e10:	d01d      	beq.n	8007e4e <USBD_StdItfReq+0x92>
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d11a      	bne.n	8007e4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e18:	7bba      	ldrb	r2, [r7, #14]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32ae      	adds	r2, #174	; 0xae
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00f      	beq.n	8007e48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e28:	7bba      	ldrb	r2, [r7, #14]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e30:	7bba      	ldrb	r2, [r7, #14]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	32ae      	adds	r2, #174	; 0xae
 8007e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e46:	e004      	b.n	8007e52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e4c:	e001      	b.n	8007e52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	88db      	ldrh	r3, [r3, #6]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d110      	bne.n	8007e7c <USBD_StdItfReq+0xc0>
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10d      	bne.n	8007e7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fdc7 	bl	80089f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e66:	e009      	b.n	8007e7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fcf7 	bl	800885e <USBD_CtlError>
          break;
 8007e70:	e004      	b.n	8007e7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fcf2 	bl	800885e <USBD_CtlError>
          break;
 8007e7a:	e000      	b.n	8007e7e <USBD_StdItfReq+0xc2>
          break;
 8007e7c:	bf00      	nop
      }
      break;
 8007e7e:	e004      	b.n	8007e8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fceb 	bl	800885e <USBD_CtlError>
      break;
 8007e88:	bf00      	nop
  }

  return ret;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	889b      	ldrh	r3, [r3, #4]
 8007ea6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d007      	beq.n	8007ec4 <USBD_StdEPReq+0x30>
 8007eb4:	2b40      	cmp	r3, #64	; 0x40
 8007eb6:	f200 817f 	bhi.w	80081b8 <USBD_StdEPReq+0x324>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d02a      	beq.n	8007f14 <USBD_StdEPReq+0x80>
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	f040 817a 	bne.w	80081b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff fe83 	bl	8007bd4 <USBD_CoreFindEP>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ed2:	7b7b      	ldrb	r3, [r7, #13]
 8007ed4:	2bff      	cmp	r3, #255	; 0xff
 8007ed6:	f000 8174 	beq.w	80081c2 <USBD_StdEPReq+0x32e>
 8007eda:	7b7b      	ldrb	r3, [r7, #13]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 8170 	bne.w	80081c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ee2:	7b7a      	ldrb	r2, [r7, #13]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007eea:	7b7a      	ldrb	r2, [r7, #13]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32ae      	adds	r2, #174	; 0xae
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 8163 	beq.w	80081c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007efc:	7b7a      	ldrb	r2, [r7, #13]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	32ae      	adds	r2, #174	; 0xae
 8007f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f12:	e156      	b.n	80081c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d008      	beq.n	8007f2e <USBD_StdEPReq+0x9a>
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	f300 8145 	bgt.w	80081ac <USBD_StdEPReq+0x318>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 809b 	beq.w	800805e <USBD_StdEPReq+0x1ca>
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d03c      	beq.n	8007fa6 <USBD_StdEPReq+0x112>
 8007f2c:	e13e      	b.n	80081ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d002      	beq.n	8007f40 <USBD_StdEPReq+0xac>
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d016      	beq.n	8007f6c <USBD_StdEPReq+0xd8>
 8007f3e:	e02c      	b.n	8007f9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00d      	beq.n	8007f62 <USBD_StdEPReq+0xce>
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	2b80      	cmp	r3, #128	; 0x80
 8007f4a:	d00a      	beq.n	8007f62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f96d 	bl	8009230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f56:	2180      	movs	r1, #128	; 0x80
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f969 	bl	8009230 <USBD_LL_StallEP>
 8007f5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f60:	e020      	b.n	8007fa4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fc7a 	bl	800885e <USBD_CtlError>
              break;
 8007f6a:	e01b      	b.n	8007fa4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	885b      	ldrh	r3, [r3, #2]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10e      	bne.n	8007f92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <USBD_StdEPReq+0xfe>
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b80      	cmp	r3, #128	; 0x80
 8007f7e:	d008      	beq.n	8007f92 <USBD_StdEPReq+0xfe>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	88db      	ldrh	r3, [r3, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d104      	bne.n	8007f92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f94f 	bl	8009230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fd2e 	bl	80089f4 <USBD_CtlSendStatus>

              break;
 8007f98:	e004      	b.n	8007fa4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fc5e 	bl	800885e <USBD_CtlError>
              break;
 8007fa2:	bf00      	nop
          }
          break;
 8007fa4:	e107      	b.n	80081b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d002      	beq.n	8007fb8 <USBD_StdEPReq+0x124>
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d016      	beq.n	8007fe4 <USBD_StdEPReq+0x150>
 8007fb6:	e04b      	b.n	8008050 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00d      	beq.n	8007fda <USBD_StdEPReq+0x146>
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b80      	cmp	r3, #128	; 0x80
 8007fc2:	d00a      	beq.n	8007fda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f931 	bl	8009230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fce:	2180      	movs	r1, #128	; 0x80
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f92d 	bl	8009230 <USBD_LL_StallEP>
 8007fd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fd8:	e040      	b.n	800805c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fc3e 	bl	800885e <USBD_CtlError>
              break;
 8007fe2:	e03b      	b.n	800805c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	885b      	ldrh	r3, [r3, #2]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d136      	bne.n	800805a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d004      	beq.n	8008000 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 f937 	bl	800926e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fcf7 	bl	80089f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff fde2 	bl	8007bd4 <USBD_CoreFindEP>
 8008010:	4603      	mov	r3, r0
 8008012:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008014:	7b7b      	ldrb	r3, [r7, #13]
 8008016:	2bff      	cmp	r3, #255	; 0xff
 8008018:	d01f      	beq.n	800805a <USBD_StdEPReq+0x1c6>
 800801a:	7b7b      	ldrb	r3, [r7, #13]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11c      	bne.n	800805a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008020:	7b7a      	ldrb	r2, [r7, #13]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008028:	7b7a      	ldrb	r2, [r7, #13]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	32ae      	adds	r2, #174	; 0xae
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d010      	beq.n	800805a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008038:	7b7a      	ldrb	r2, [r7, #13]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	32ae      	adds	r2, #174	; 0xae
 800803e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800804e:	e004      	b.n	800805a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fc03 	bl	800885e <USBD_CtlError>
              break;
 8008058:	e000      	b.n	800805c <USBD_StdEPReq+0x1c8>
              break;
 800805a:	bf00      	nop
          }
          break;
 800805c:	e0ab      	b.n	80081b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d002      	beq.n	8008070 <USBD_StdEPReq+0x1dc>
 800806a:	2b03      	cmp	r3, #3
 800806c:	d032      	beq.n	80080d4 <USBD_StdEPReq+0x240>
 800806e:	e097      	b.n	80081a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <USBD_StdEPReq+0x1f2>
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	2b80      	cmp	r3, #128	; 0x80
 800807a:	d004      	beq.n	8008086 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fbed 	bl	800885e <USBD_CtlError>
                break;
 8008084:	e091      	b.n	80081aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800808a:	2b00      	cmp	r3, #0
 800808c:	da0b      	bge.n	80080a6 <USBD_StdEPReq+0x212>
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	3310      	adds	r3, #16
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	4413      	add	r3, r2
 80080a2:	3304      	adds	r3, #4
 80080a4:	e00b      	b.n	80080be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	4413      	add	r3, r2
 80080bc:	3304      	adds	r3, #4
 80080be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2202      	movs	r2, #2
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fc37 	bl	8008940 <USBD_CtlSendData>
              break;
 80080d2:	e06a      	b.n	80081aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	da11      	bge.n	8008100 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	f003 020f 	and.w	r2, r3, #15
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	3324      	adds	r3, #36	; 0x24
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d117      	bne.n	8008126 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fbb0 	bl	800885e <USBD_CtlError>
                  break;
 80080fe:	e054      	b.n	80081aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	f003 020f 	and.w	r2, r3, #15
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d104      	bne.n	8008126 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fb9d 	bl	800885e <USBD_CtlError>
                  break;
 8008124:	e041      	b.n	80081aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008126:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da0b      	bge.n	8008146 <USBD_StdEPReq+0x2b2>
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	3310      	adds	r3, #16
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	e00b      	b.n	800815e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	4413      	add	r3, r2
 800815c:	3304      	adds	r3, #4
 800815e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <USBD_StdEPReq+0x2d8>
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b80      	cmp	r3, #128	; 0x80
 800816a:	d103      	bne.n	8008174 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	e00e      	b.n	8008192 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 f897 	bl	80092ac <USBD_LL_IsStallEP>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d003      	beq.n	800818c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e002      	b.n	8008192 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2202      	movs	r2, #2
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fbd1 	bl	8008940 <USBD_CtlSendData>
              break;
 800819e:	e004      	b.n	80081aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fb5b 	bl	800885e <USBD_CtlError>
              break;
 80081a8:	bf00      	nop
          }
          break;
 80081aa:	e004      	b.n	80081b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fb55 	bl	800885e <USBD_CtlError>
          break;
 80081b4:	bf00      	nop
      }
      break;
 80081b6:	e005      	b.n	80081c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fb4f 	bl	800885e <USBD_CtlError>
      break;
 80081c0:	e000      	b.n	80081c4 <USBD_StdEPReq+0x330>
      break;
 80081c2:	bf00      	nop
  }

  return ret;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	885b      	ldrh	r3, [r3, #2]
 80081ea:	0a1b      	lsrs	r3, r3, #8
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	2b06      	cmp	r3, #6
 80081f2:	f200 8128 	bhi.w	8008446 <USBD_GetDescriptor+0x276>
 80081f6:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <USBD_GetDescriptor+0x2c>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	08008219 	.word	0x08008219
 8008200:	08008231 	.word	0x08008231
 8008204:	08008271 	.word	0x08008271
 8008208:	08008447 	.word	0x08008447
 800820c:	08008447 	.word	0x08008447
 8008210:	080083e7 	.word	0x080083e7
 8008214:	08008413 	.word	0x08008413
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
      break;
 800822e:	e112      	b.n	8008456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	7c1b      	ldrb	r3, [r3, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10d      	bne.n	8008254 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008240:	f107 0208 	add.w	r2, r7, #8
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
 8008248:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	3301      	adds	r3, #1
 800824e:	2202      	movs	r2, #2
 8008250:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008252:	e100      	b.n	8008456 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	f107 0208 	add.w	r2, r7, #8
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3
 8008264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	2202      	movs	r2, #2
 800826c:	701a      	strb	r2, [r3, #0]
      break;
 800826e:	e0f2      	b.n	8008456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	885b      	ldrh	r3, [r3, #2]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b05      	cmp	r3, #5
 8008278:	f200 80ac 	bhi.w	80083d4 <USBD_GetDescriptor+0x204>
 800827c:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <USBD_GetDescriptor+0xb4>)
 800827e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008282:	bf00      	nop
 8008284:	0800829d 	.word	0x0800829d
 8008288:	080082d1 	.word	0x080082d1
 800828c:	08008305 	.word	0x08008305
 8008290:	08008339 	.word	0x08008339
 8008294:	0800836d 	.word	0x0800836d
 8008298:	080083a1 	.word	0x080083a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	7c12      	ldrb	r2, [r2, #16]
 80082b4:	f107 0108 	add.w	r1, r7, #8
 80082b8:	4610      	mov	r0, r2
 80082ba:	4798      	blx	r3
 80082bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082be:	e091      	b.n	80083e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 facb 	bl	800885e <USBD_CtlError>
            err++;
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	3301      	adds	r3, #1
 80082cc:	72fb      	strb	r3, [r7, #11]
          break;
 80082ce:	e089      	b.n	80083e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7c12      	ldrb	r2, [r2, #16]
 80082e8:	f107 0108 	add.w	r1, r7, #8
 80082ec:	4610      	mov	r0, r2
 80082ee:	4798      	blx	r3
 80082f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082f2:	e077      	b.n	80083e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fab1 	bl	800885e <USBD_CtlError>
            err++;
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	3301      	adds	r3, #1
 8008300:	72fb      	strb	r3, [r7, #11]
          break;
 8008302:	e06f      	b.n	80083e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7c12      	ldrb	r2, [r2, #16]
 800831c:	f107 0108 	add.w	r1, r7, #8
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008326:	e05d      	b.n	80083e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa97 	bl	800885e <USBD_CtlError>
            err++;
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	3301      	adds	r3, #1
 8008334:	72fb      	strb	r3, [r7, #11]
          break;
 8008336:	e055      	b.n	80083e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	7c12      	ldrb	r2, [r2, #16]
 8008350:	f107 0108 	add.w	r1, r7, #8
 8008354:	4610      	mov	r0, r2
 8008356:	4798      	blx	r3
 8008358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800835a:	e043      	b.n	80083e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa7d 	bl	800885e <USBD_CtlError>
            err++;
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	3301      	adds	r3, #1
 8008368:	72fb      	strb	r3, [r7, #11]
          break;
 800836a:	e03b      	b.n	80083e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7c12      	ldrb	r2, [r2, #16]
 8008384:	f107 0108 	add.w	r1, r7, #8
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800838e:	e029      	b.n	80083e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa63 	bl	800885e <USBD_CtlError>
            err++;
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	3301      	adds	r3, #1
 800839c:	72fb      	strb	r3, [r7, #11]
          break;
 800839e:	e021      	b.n	80083e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	7c12      	ldrb	r2, [r2, #16]
 80083b8:	f107 0108 	add.w	r1, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c2:	e00f      	b.n	80083e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa49 	bl	800885e <USBD_CtlError>
            err++;
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	3301      	adds	r3, #1
 80083d0:	72fb      	strb	r3, [r7, #11]
          break;
 80083d2:	e007      	b.n	80083e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa41 	bl	800885e <USBD_CtlError>
          err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083e2:	bf00      	nop
      }
      break;
 80083e4:	e037      	b.n	8008456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7c1b      	ldrb	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d109      	bne.n	8008402 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f6:	f107 0208 	add.w	r2, r7, #8
 80083fa:	4610      	mov	r0, r2
 80083fc:	4798      	blx	r3
 80083fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008400:	e029      	b.n	8008456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa2a 	bl	800885e <USBD_CtlError>
        err++;
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	3301      	adds	r3, #1
 800840e:	72fb      	strb	r3, [r7, #11]
      break;
 8008410:	e021      	b.n	8008456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	7c1b      	ldrb	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10d      	bne.n	8008436 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	f107 0208 	add.w	r2, r7, #8
 8008426:	4610      	mov	r0, r2
 8008428:	4798      	blx	r3
 800842a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	2207      	movs	r2, #7
 8008432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008434:	e00f      	b.n	8008456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fa10 	bl	800885e <USBD_CtlError>
        err++;
 800843e:	7afb      	ldrb	r3, [r7, #11]
 8008440:	3301      	adds	r3, #1
 8008442:	72fb      	strb	r3, [r7, #11]
      break;
 8008444:	e007      	b.n	8008456 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fa08 	bl	800885e <USBD_CtlError>
      err++;
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	3301      	adds	r3, #1
 8008452:	72fb      	strb	r3, [r7, #11]
      break;
 8008454:	bf00      	nop
  }

  if (err != 0U)
 8008456:	7afb      	ldrb	r3, [r7, #11]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d11e      	bne.n	800849a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	88db      	ldrh	r3, [r3, #6]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d016      	beq.n	8008492 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008464:	893b      	ldrh	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00e      	beq.n	8008488 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	88da      	ldrh	r2, [r3, #6]
 800846e:	893b      	ldrh	r3, [r7, #8]
 8008470:	4293      	cmp	r3, r2
 8008472:	bf28      	it	cs
 8008474:	4613      	movcs	r3, r2
 8008476:	b29b      	uxth	r3, r3
 8008478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800847a:	893b      	ldrh	r3, [r7, #8]
 800847c:	461a      	mov	r2, r3
 800847e:	68f9      	ldr	r1, [r7, #12]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fa5d 	bl	8008940 <USBD_CtlSendData>
 8008486:	e009      	b.n	800849c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f9e7 	bl	800885e <USBD_CtlError>
 8008490:	e004      	b.n	800849c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 faae 	bl	80089f4 <USBD_CtlSendStatus>
 8008498:	e000      	b.n	800849c <USBD_GetDescriptor+0x2cc>
    return;
 800849a:	bf00      	nop
  }
}
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop

080084a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	889b      	ldrh	r3, [r3, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d131      	bne.n	800851a <USBD_SetAddress+0x76>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	88db      	ldrh	r3, [r3, #6]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d12d      	bne.n	800851a <USBD_SetAddress+0x76>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	885b      	ldrh	r3, [r3, #2]
 80084c2:	2b7f      	cmp	r3, #127	; 0x7f
 80084c4:	d829      	bhi.n	800851a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d104      	bne.n	80084e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f9bc 	bl	800885e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e6:	e01d      	b.n	8008524 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	7bfa      	ldrb	r2, [r7, #15]
 80084ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 ff05 	bl	8009304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa7a 	bl	80089f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2202      	movs	r2, #2
 800850a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800850e:	e009      	b.n	8008524 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008518:	e004      	b.n	8008524 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f99e 	bl	800885e <USBD_CtlError>
  }
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	885b      	ldrh	r3, [r3, #2]
 800853e:	b2da      	uxtb	r2, r3
 8008540:	4b4e      	ldr	r3, [pc, #312]	; (800867c <USBD_SetConfig+0x150>)
 8008542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008544:	4b4d      	ldr	r3, [pc, #308]	; (800867c <USBD_SetConfig+0x150>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d905      	bls.n	8008558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f985 	bl	800885e <USBD_CtlError>
    return USBD_FAIL;
 8008554:	2303      	movs	r3, #3
 8008556:	e08c      	b.n	8008672 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d002      	beq.n	800856a <USBD_SetConfig+0x3e>
 8008564:	2b03      	cmp	r3, #3
 8008566:	d029      	beq.n	80085bc <USBD_SetConfig+0x90>
 8008568:	e075      	b.n	8008656 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800856a:	4b44      	ldr	r3, [pc, #272]	; (800867c <USBD_SetConfig+0x150>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d020      	beq.n	80085b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008572:	4b42      	ldr	r3, [pc, #264]	; (800867c <USBD_SetConfig+0x150>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800857c:	4b3f      	ldr	r3, [pc, #252]	; (800867c <USBD_SetConfig+0x150>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fe ffe7 	bl	8007556 <USBD_SetClassConfig>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f962 	bl	800885e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085a2:	e065      	b.n	8008670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fa25 	bl	80089f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2203      	movs	r2, #3
 80085ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085b2:	e05d      	b.n	8008670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa1d 	bl	80089f4 <USBD_CtlSendStatus>
      break;
 80085ba:	e059      	b.n	8008670 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085bc:	4b2f      	ldr	r3, [pc, #188]	; (800867c <USBD_SetConfig+0x150>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d112      	bne.n	80085ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085cc:	4b2b      	ldr	r3, [pc, #172]	; (800867c <USBD_SetConfig+0x150>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085d6:	4b29      	ldr	r3, [pc, #164]	; (800867c <USBD_SetConfig+0x150>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7fe ffd6 	bl	800758e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fa06 	bl	80089f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085e8:	e042      	b.n	8008670 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085ea:	4b24      	ldr	r3, [pc, #144]	; (800867c <USBD_SetConfig+0x150>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d02a      	beq.n	800864e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7fe ffc4 	bl	800758e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008606:	4b1d      	ldr	r3, [pc, #116]	; (800867c <USBD_SetConfig+0x150>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008610:	4b1a      	ldr	r3, [pc, #104]	; (800867c <USBD_SetConfig+0x150>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fe ff9d 	bl	8007556 <USBD_SetClassConfig>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00f      	beq.n	8008646 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f918 	bl	800885e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7fe ffa9 	bl	800758e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008644:	e014      	b.n	8008670 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f9d4 	bl	80089f4 <USBD_CtlSendStatus>
      break;
 800864c:	e010      	b.n	8008670 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f9d0 	bl	80089f4 <USBD_CtlSendStatus>
      break;
 8008654:	e00c      	b.n	8008670 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f900 	bl	800885e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <USBD_SetConfig+0x150>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7fe ff92 	bl	800758e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800866a:	2303      	movs	r3, #3
 800866c:	73fb      	strb	r3, [r7, #15]
      break;
 800866e:	bf00      	nop
  }

  return ret;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000294 	.word	0x20000294

08008680 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	88db      	ldrh	r3, [r3, #6]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d004      	beq.n	800869c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f8e2 	bl	800885e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800869a:	e023      	b.n	80086e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	dc02      	bgt.n	80086ae <USBD_GetConfig+0x2e>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	dc03      	bgt.n	80086b4 <USBD_GetConfig+0x34>
 80086ac:	e015      	b.n	80086da <USBD_GetConfig+0x5a>
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d00b      	beq.n	80086ca <USBD_GetConfig+0x4a>
 80086b2:	e012      	b.n	80086da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3308      	adds	r3, #8
 80086be:	2201      	movs	r2, #1
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f93c 	bl	8008940 <USBD_CtlSendData>
        break;
 80086c8:	e00c      	b.n	80086e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3304      	adds	r3, #4
 80086ce:	2201      	movs	r2, #1
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f934 	bl	8008940 <USBD_CtlSendData>
        break;
 80086d8:	e004      	b.n	80086e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f8be 	bl	800885e <USBD_CtlError>
        break;
 80086e2:	bf00      	nop
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	3b01      	subs	r3, #1
 8008700:	2b02      	cmp	r3, #2
 8008702:	d81e      	bhi.n	8008742 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	88db      	ldrh	r3, [r3, #6]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d004      	beq.n	8008716 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f8a5 	bl	800885e <USBD_CtlError>
        break;
 8008714:	e01a      	b.n	800874c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f043 0202 	orr.w	r2, r3, #2
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	330c      	adds	r3, #12
 8008736:	2202      	movs	r2, #2
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f900 	bl	8008940 <USBD_CtlSendData>
      break;
 8008740:	e004      	b.n	800874c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f88a 	bl	800885e <USBD_CtlError>
      break;
 800874a:	bf00      	nop
  }
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d107      	bne.n	8008776 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f940 	bl	80089f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008774:	e013      	b.n	800879e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	885b      	ldrh	r3, [r3, #2]
 800877a:	2b02      	cmp	r3, #2
 800877c:	d10b      	bne.n	8008796 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	889b      	ldrh	r3, [r3, #4]
 8008782:	0a1b      	lsrs	r3, r3, #8
 8008784:	b29b      	uxth	r3, r3
 8008786:	b2da      	uxtb	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f930 	bl	80089f4 <USBD_CtlSendStatus>
}
 8008794:	e003      	b.n	800879e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f860 	bl	800885e <USBD_CtlError>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d80b      	bhi.n	80087d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	885b      	ldrh	r3, [r3, #2]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d10c      	bne.n	80087e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f910 	bl	80089f4 <USBD_CtlSendStatus>
      }
      break;
 80087d4:	e004      	b.n	80087e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f840 	bl	800885e <USBD_CtlError>
      break;
 80087de:	e000      	b.n	80087e2 <USBD_ClrFeature+0x3c>
      break;
 80087e0:	bf00      	nop
  }
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3301      	adds	r3, #1
 8008804:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	781a      	ldrb	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f7ff fa41 	bl	8007c9c <SWAPBYTE>
 800881a:	4603      	mov	r3, r0
 800881c:	461a      	mov	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3301      	adds	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3301      	adds	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7ff fa34 	bl	8007c9c <SWAPBYTE>
 8008834:	4603      	mov	r3, r0
 8008836:	461a      	mov	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3301      	adds	r3, #1
 8008846:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7ff fa27 	bl	8007c9c <SWAPBYTE>
 800884e:	4603      	mov	r3, r0
 8008850:	461a      	mov	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	80da      	strh	r2, [r3, #6]
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008868:	2180      	movs	r1, #128	; 0x80
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fce0 	bl	8009230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008870:	2100      	movs	r1, #0
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fcdc 	bl	8009230 <USBD_LL_StallEP>
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d036      	beq.n	8008904 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800889a:	6938      	ldr	r0, [r7, #16]
 800889c:	f000 f836 	bl	800890c <USBD_GetLen>
 80088a0:	4603      	mov	r3, r0
 80088a2:	3301      	adds	r3, #1
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	005b      	lsls	r3, r3, #1
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	4413      	add	r3, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	7812      	ldrb	r2, [r2, #0]
 80088b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	3301      	adds	r3, #1
 80088be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	4413      	add	r3, r2
 80088c6:	2203      	movs	r2, #3
 80088c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	3301      	adds	r3, #1
 80088ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088d0:	e013      	b.n	80088fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	4413      	add	r3, r2
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	7812      	ldrb	r2, [r2, #0]
 80088dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	3301      	adds	r3, #1
 80088e2:	613b      	str	r3, [r7, #16]
    idx++;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	3301      	adds	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	4413      	add	r3, r2
 80088f0:	2200      	movs	r2, #0
 80088f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	3301      	adds	r3, #1
 80088f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e7      	bne.n	80088d2 <USBD_GetString+0x52>
 8008902:	e000      	b.n	8008906 <USBD_GetString+0x86>
    return;
 8008904:	bf00      	nop
  }
}
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800891c:	e005      	b.n	800892a <USBD_GetLen+0x1e>
  {
    len++;
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	3301      	adds	r3, #1
 8008922:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3301      	adds	r3, #1
 8008928:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f5      	bne.n	800891e <USBD_GetLen+0x12>
  }

  return len;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2202      	movs	r2, #2
 8008950:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	2100      	movs	r1, #0
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 fceb 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	2100      	movs	r1, #0
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fcda 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2203      	movs	r2, #3
 80089a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	2100      	movs	r1, #0
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 fcde 	bl	8009384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	2100      	movs	r1, #0
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fccd 	bl	8009384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2204      	movs	r2, #4
 8008a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a04:	2300      	movs	r3, #0
 8008a06:	2200      	movs	r2, #0
 8008a08:	2100      	movs	r1, #0
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fc99 	bl	8009342 <USBD_LL_Transmit>

  return USBD_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2205      	movs	r2, #5
 8008a26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2100      	movs	r1, #0
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fca7 	bl	8009384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a44:	2200      	movs	r2, #0
 8008a46:	4912      	ldr	r1, [pc, #72]	; (8008a90 <MX_USB_DEVICE_Init+0x50>)
 8008a48:	4812      	ldr	r0, [pc, #72]	; (8008a94 <MX_USB_DEVICE_Init+0x54>)
 8008a4a:	f7fe fd07 	bl	800745c <USBD_Init>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a54:	f7f8 ff88 	bl	8001968 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a58:	490f      	ldr	r1, [pc, #60]	; (8008a98 <MX_USB_DEVICE_Init+0x58>)
 8008a5a:	480e      	ldr	r0, [pc, #56]	; (8008a94 <MX_USB_DEVICE_Init+0x54>)
 8008a5c:	f7fe fd2e 	bl	80074bc <USBD_RegisterClass>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a66:	f7f8 ff7f 	bl	8001968 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a6a:	490c      	ldr	r1, [pc, #48]	; (8008a9c <MX_USB_DEVICE_Init+0x5c>)
 8008a6c:	4809      	ldr	r0, [pc, #36]	; (8008a94 <MX_USB_DEVICE_Init+0x54>)
 8008a6e:	f7fe fc1f 	bl	80072b0 <USBD_CDC_RegisterInterface>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a78:	f7f8 ff76 	bl	8001968 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <MX_USB_DEVICE_Init+0x54>)
 8008a7e:	f7fe fd53 	bl	8007528 <USBD_Start>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a88:	f7f8 ff6e 	bl	8001968 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a8c:	bf00      	nop
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	200000b4 	.word	0x200000b4
 8008a94:	20000298 	.word	0x20000298
 8008a98:	20000020 	.word	0x20000020
 8008a9c:	200000a0 	.word	0x200000a0

08008aa0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4905      	ldr	r1, [pc, #20]	; (8008abc <CDC_Init_FS+0x1c>)
 8008aa8:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <CDC_Init_FS+0x20>)
 8008aaa:	f7fe fc1b 	bl	80072e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008aae:	4905      	ldr	r1, [pc, #20]	; (8008ac4 <CDC_Init_FS+0x24>)
 8008ab0:	4803      	ldr	r0, [pc, #12]	; (8008ac0 <CDC_Init_FS+0x20>)
 8008ab2:	f7fe fc39 	bl	8007328 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ab6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20000d74 	.word	0x20000d74
 8008ac0:	20000298 	.word	0x20000298
 8008ac4:	20000574 	.word	0x20000574

08008ac8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008acc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	6039      	str	r1, [r7, #0]
 8008ae2:	71fb      	strb	r3, [r7, #7]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	2b23      	cmp	r3, #35	; 0x23
 8008aec:	d84a      	bhi.n	8008b84 <CDC_Control_FS+0xac>
 8008aee:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <CDC_Control_FS+0x1c>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b85 	.word	0x08008b85
 8008af8:	08008b85 	.word	0x08008b85
 8008afc:	08008b85 	.word	0x08008b85
 8008b00:	08008b85 	.word	0x08008b85
 8008b04:	08008b85 	.word	0x08008b85
 8008b08:	08008b85 	.word	0x08008b85
 8008b0c:	08008b85 	.word	0x08008b85
 8008b10:	08008b85 	.word	0x08008b85
 8008b14:	08008b85 	.word	0x08008b85
 8008b18:	08008b85 	.word	0x08008b85
 8008b1c:	08008b85 	.word	0x08008b85
 8008b20:	08008b85 	.word	0x08008b85
 8008b24:	08008b85 	.word	0x08008b85
 8008b28:	08008b85 	.word	0x08008b85
 8008b2c:	08008b85 	.word	0x08008b85
 8008b30:	08008b85 	.word	0x08008b85
 8008b34:	08008b85 	.word	0x08008b85
 8008b38:	08008b85 	.word	0x08008b85
 8008b3c:	08008b85 	.word	0x08008b85
 8008b40:	08008b85 	.word	0x08008b85
 8008b44:	08008b85 	.word	0x08008b85
 8008b48:	08008b85 	.word	0x08008b85
 8008b4c:	08008b85 	.word	0x08008b85
 8008b50:	08008b85 	.word	0x08008b85
 8008b54:	08008b85 	.word	0x08008b85
 8008b58:	08008b85 	.word	0x08008b85
 8008b5c:	08008b85 	.word	0x08008b85
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b85 	.word	0x08008b85
 8008b68:	08008b85 	.word	0x08008b85
 8008b6c:	08008b85 	.word	0x08008b85
 8008b70:	08008b85 	.word	0x08008b85
 8008b74:	08008b85 	.word	0x08008b85
 8008b78:	08008b85 	.word	0x08008b85
 8008b7c:	08008b85 	.word	0x08008b85
 8008b80:	08008b85 	.word	0x08008b85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b84:	bf00      	nop
  }

  return (USBD_OK);
 8008b86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	4805      	ldr	r0, [pc, #20]	; (8008bb8 <CDC_Receive_FS+0x24>)
 8008ba2:	f7fe fbc1 	bl	8007328 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ba6:	4804      	ldr	r0, [pc, #16]	; (8008bb8 <CDC_Receive_FS+0x24>)
 8008ba8:	f7fe fc22 	bl	80073f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008bac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000298 	.word	0x20000298

08008bbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <CDC_Transmit_FS+0x48>)
 8008bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e00b      	b.n	8008bfa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008be2:	887b      	ldrh	r3, [r7, #2]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	4806      	ldr	r0, [pc, #24]	; (8008c04 <CDC_Transmit_FS+0x48>)
 8008bea:	f7fe fb7b 	bl	80072e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008bee:	4805      	ldr	r0, [pc, #20]	; (8008c04 <CDC_Transmit_FS+0x48>)
 8008bf0:	f7fe fbb8 	bl	8007364 <USBD_CDC_TransmitPacket>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000298 	.word	0x20000298

08008c08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
	...

08008c2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2212      	movs	r2, #18
 8008c3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c3e:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	200000d0 	.word	0x200000d0

08008c50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2204      	movs	r2, #4
 8008c60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c62:	4b03      	ldr	r3, [pc, #12]	; (8008c70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	200000e4 	.word	0x200000e4

08008c74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6039      	str	r1, [r7, #0]
 8008c7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d105      	bne.n	8008c92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4907      	ldr	r1, [pc, #28]	; (8008ca8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c8a:	4808      	ldr	r0, [pc, #32]	; (8008cac <USBD_FS_ProductStrDescriptor+0x38>)
 8008c8c:	f7ff fdf8 	bl	8008880 <USBD_GetString>
 8008c90:	e004      	b.n	8008c9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	4904      	ldr	r1, [pc, #16]	; (8008ca8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c96:	4805      	ldr	r0, [pc, #20]	; (8008cac <USBD_FS_ProductStrDescriptor+0x38>)
 8008c98:	f7ff fdf2 	bl	8008880 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c9c:	4b02      	ldr	r3, [pc, #8]	; (8008ca8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20001574 	.word	0x20001574
 8008cac:	0800ac20 	.word	0x0800ac20

08008cb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	4904      	ldr	r1, [pc, #16]	; (8008cd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cc0:	4804      	ldr	r0, [pc, #16]	; (8008cd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cc2:	f7ff fddd 	bl	8008880 <USBD_GetString>
  return USBD_StrDesc;
 8008cc6:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20001574 	.word	0x20001574
 8008cd4:	0800ac38 	.word	0x0800ac38

08008cd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	221a      	movs	r2, #26
 8008ce8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cea:	f000 f843 	bl	8008d74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008cee:	4b02      	ldr	r3, [pc, #8]	; (8008cf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	200000e8 	.word	0x200000e8

08008cfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	4907      	ldr	r1, [pc, #28]	; (8008d30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d12:	4808      	ldr	r0, [pc, #32]	; (8008d34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d14:	f7ff fdb4 	bl	8008880 <USBD_GetString>
 8008d18:	e004      	b.n	8008d24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4904      	ldr	r1, [pc, #16]	; (8008d30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d1e:	4805      	ldr	r0, [pc, #20]	; (8008d34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d20:	f7ff fdae 	bl	8008880 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20001574 	.word	0x20001574
 8008d34:	0800ac4c 	.word	0x0800ac4c

08008d38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	4907      	ldr	r1, [pc, #28]	; (8008d6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d4e:	4808      	ldr	r0, [pc, #32]	; (8008d70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d50:	f7ff fd96 	bl	8008880 <USBD_GetString>
 8008d54:	e004      	b.n	8008d60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	4904      	ldr	r1, [pc, #16]	; (8008d6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d5a:	4805      	ldr	r0, [pc, #20]	; (8008d70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d5c:	f7ff fd90 	bl	8008880 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20001574 	.word	0x20001574
 8008d70:	0800ac58 	.word	0x0800ac58

08008d74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d7a:	4b0f      	ldr	r3, [pc, #60]	; (8008db8 <Get_SerialNum+0x44>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d80:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <Get_SerialNum+0x48>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d86:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <Get_SerialNum+0x4c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4413      	add	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d009      	beq.n	8008dae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d9a:	2208      	movs	r2, #8
 8008d9c:	4909      	ldr	r1, [pc, #36]	; (8008dc4 <Get_SerialNum+0x50>)
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 f814 	bl	8008dcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008da4:	2204      	movs	r2, #4
 8008da6:	4908      	ldr	r1, [pc, #32]	; (8008dc8 <Get_SerialNum+0x54>)
 8008da8:	68b8      	ldr	r0, [r7, #8]
 8008daa:	f000 f80f 	bl	8008dcc <IntToUnicode>
  }
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	1fff7a10 	.word	0x1fff7a10
 8008dbc:	1fff7a14 	.word	0x1fff7a14
 8008dc0:	1fff7a18 	.word	0x1fff7a18
 8008dc4:	200000ea 	.word	0x200000ea
 8008dc8:	200000fa 	.word	0x200000fa

08008dcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dde:	2300      	movs	r3, #0
 8008de0:	75fb      	strb	r3, [r7, #23]
 8008de2:	e027      	b.n	8008e34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	0f1b      	lsrs	r3, r3, #28
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	d80b      	bhi.n	8008e04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	0f1b      	lsrs	r3, r3, #28
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	4619      	mov	r1, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	440b      	add	r3, r1
 8008dfc:	3230      	adds	r2, #48	; 0x30
 8008dfe:	b2d2      	uxtb	r2, r2
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	e00a      	b.n	8008e1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	0f1b      	lsrs	r3, r3, #28
 8008e08:	b2da      	uxtb	r2, r3
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4619      	mov	r1, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	440b      	add	r3, r1
 8008e14:	3237      	adds	r2, #55	; 0x37
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	3301      	adds	r3, #1
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	4413      	add	r3, r2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	3301      	adds	r3, #1
 8008e32:	75fb      	strb	r3, [r7, #23]
 8008e34:	7dfa      	ldrb	r2, [r7, #23]
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d3d3      	bcc.n	8008de4 <IntToUnicode+0x18>
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	; 0x28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e54:	f107 0314 	add.w	r3, r7, #20
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	605a      	str	r2, [r3, #4]
 8008e5e:	609a      	str	r2, [r3, #8]
 8008e60:	60da      	str	r2, [r3, #12]
 8008e62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e6c:	d13a      	bne.n	8008ee4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e6e:	2300      	movs	r3, #0
 8008e70:	613b      	str	r3, [r7, #16]
 8008e72:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e76:	4a1d      	ldr	r2, [pc, #116]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008e78:	f043 0301 	orr.w	r3, r3, #1
 8008e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e7e:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	613b      	str	r3, [r7, #16]
 8008e88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e90:	2302      	movs	r3, #2
 8008e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e9c:	230a      	movs	r3, #10
 8008e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea0:	f107 0314 	add.w	r3, r7, #20
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4812      	ldr	r0, [pc, #72]	; (8008ef0 <HAL_PCD_MspInit+0xa4>)
 8008ea8:	f7f9 f8b2 	bl	8002010 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	4a0e      	ldr	r2, [pc, #56]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb6:	6353      	str	r3, [r2, #52]	; 0x34
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec0:	4a0a      	ldr	r2, [pc, #40]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8008ec8:	4b08      	ldr	r3, [pc, #32]	; (8008eec <HAL_PCD_MspInit+0xa0>)
 8008eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	2043      	movs	r0, #67	; 0x43
 8008eda:	f7f9 f862 	bl	8001fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ede:	2043      	movs	r0, #67	; 0x43
 8008ee0:	f7f9 f87b 	bl	8001fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	3728      	adds	r7, #40	; 0x28
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40023800 	.word	0x40023800
 8008ef0:	40020000 	.word	0x40020000

08008ef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fe fb59 	bl	80075c2 <USBD_LL_SetupStage>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	4619      	mov	r1, r3
 8008f42:	f7fe fb93 	bl	800766c <USBD_LL_DataOutStage>
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b082      	sub	sp, #8
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4613      	mov	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	334c      	adds	r3, #76	; 0x4c
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	4619      	mov	r1, r3
 8008f76:	f7fe fc2c 	bl	80077d2 <USBD_LL_DataInStage>
}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fd60 	bl	8007a56 <USBD_LL_SOF>
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
 8008fb6:	e008      	b.n	8008fca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d102      	bne.n	8008fc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
 8008fc4:	e001      	b.n	8008fca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008fc6:	f7f8 fccf 	bl	8001968 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fd0:	7bfa      	ldrb	r2, [r7, #15]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe fd00 	bl	80079da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe fca8 	bl	8007936 <USBD_LL_Reset>
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fcfb 	bl	80079fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6812      	ldr	r2, [r2, #0]
 8009012:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009024:	4b04      	ldr	r3, [pc, #16]	; (8009038 <HAL_PCD_SuspendCallback+0x48>)
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	4a03      	ldr	r2, [pc, #12]	; (8009038 <HAL_PCD_SuspendCallback+0x48>)
 800902a:	f043 0306 	orr.w	r3, r3, #6
 800902e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	e000ed00 	.word	0xe000ed00

0800903c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800904a:	4618      	mov	r0, r3
 800904c:	f7fe fceb 	bl	8007a26 <USBD_LL_Resume>
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800906a:	78fa      	ldrb	r2, [r7, #3]
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fd43 	bl	8007afa <USBD_LL_IsoOUTIncomplete>
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fcff 	bl	8007a96 <USBD_LL_IsoINIncomplete>
}
 8009098:	bf00      	nop
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe fd55 	bl	8007b5e <USBD_LL_DevConnected>
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fd52 	bl	8007b74 <USBD_LL_DevDisconnected>
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d13c      	bne.n	8009162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090e8:	4a20      	ldr	r2, [pc, #128]	; (800916c <USBD_LL_Init+0x94>)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a1e      	ldr	r2, [pc, #120]	; (800916c <USBD_LL_Init+0x94>)
 80090f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090f8:	4b1c      	ldr	r3, [pc, #112]	; (800916c <USBD_LL_Init+0x94>)
 80090fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009100:	4b1a      	ldr	r3, [pc, #104]	; (800916c <USBD_LL_Init+0x94>)
 8009102:	2204      	movs	r2, #4
 8009104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009106:	4b19      	ldr	r3, [pc, #100]	; (800916c <USBD_LL_Init+0x94>)
 8009108:	2202      	movs	r2, #2
 800910a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800910c:	4b17      	ldr	r3, [pc, #92]	; (800916c <USBD_LL_Init+0x94>)
 800910e:	2200      	movs	r2, #0
 8009110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009112:	4b16      	ldr	r3, [pc, #88]	; (800916c <USBD_LL_Init+0x94>)
 8009114:	2202      	movs	r2, #2
 8009116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009118:	4b14      	ldr	r3, [pc, #80]	; (800916c <USBD_LL_Init+0x94>)
 800911a:	2200      	movs	r2, #0
 800911c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <USBD_LL_Init+0x94>)
 8009120:	2200      	movs	r2, #0
 8009122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009124:	4b11      	ldr	r3, [pc, #68]	; (800916c <USBD_LL_Init+0x94>)
 8009126:	2200      	movs	r2, #0
 8009128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800912a:	4b10      	ldr	r3, [pc, #64]	; (800916c <USBD_LL_Init+0x94>)
 800912c:	2200      	movs	r2, #0
 800912e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009130:	4b0e      	ldr	r3, [pc, #56]	; (800916c <USBD_LL_Init+0x94>)
 8009132:	2200      	movs	r2, #0
 8009134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009136:	480d      	ldr	r0, [pc, #52]	; (800916c <USBD_LL_Init+0x94>)
 8009138:	f7f9 fa64 	bl	8002604 <HAL_PCD_Init>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009142:	f7f8 fc11 	bl	8001968 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009146:	2180      	movs	r1, #128	; 0x80
 8009148:	4808      	ldr	r0, [pc, #32]	; (800916c <USBD_LL_Init+0x94>)
 800914a:	f7fa fcbc 	bl	8003ac6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800914e:	2240      	movs	r2, #64	; 0x40
 8009150:	2100      	movs	r1, #0
 8009152:	4806      	ldr	r0, [pc, #24]	; (800916c <USBD_LL_Init+0x94>)
 8009154:	f7fa fc70 	bl	8003a38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009158:	2280      	movs	r2, #128	; 0x80
 800915a:	2101      	movs	r1, #1
 800915c:	4803      	ldr	r0, [pc, #12]	; (800916c <USBD_LL_Init+0x94>)
 800915e:	f7fa fc6b 	bl	8003a38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20001774 	.word	0x20001774

08009170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009186:	4618      	mov	r0, r3
 8009188:	f7f9 fb59 	bl	800283e <HAL_PCD_Start>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f942 	bl	800941c <USBD_Get_USB_Status>
 8009198:	4603      	mov	r3, r0
 800919a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919c:	7bbb      	ldrb	r3, [r7, #14]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	4608      	mov	r0, r1
 80091b0:	4611      	mov	r1, r2
 80091b2:	461a      	mov	r2, r3
 80091b4:	4603      	mov	r3, r0
 80091b6:	70fb      	strb	r3, [r7, #3]
 80091b8:	460b      	mov	r3, r1
 80091ba:	70bb      	strb	r3, [r7, #2]
 80091bc:	4613      	mov	r3, r2
 80091be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091ce:	78bb      	ldrb	r3, [r7, #2]
 80091d0:	883a      	ldrh	r2, [r7, #0]
 80091d2:	78f9      	ldrb	r1, [r7, #3]
 80091d4:	f7fa f82a 	bl	800322c <HAL_PCD_EP_Open>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f91c 	bl	800941c <USBD_Get_USB_Status>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b084      	sub	sp, #16
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	460b      	mov	r3, r1
 80091fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800920c:	78fa      	ldrb	r2, [r7, #3]
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f7fa f873 	bl	80032fc <HAL_PCD_EP_Close>
 8009216:	4603      	mov	r3, r0
 8009218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f8fd 	bl	800941c <USBD_Get_USB_Status>
 8009222:	4603      	mov	r3, r0
 8009224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009226:	7bbb      	ldrb	r3, [r7, #14]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7fa f94b 	bl	80034ea <HAL_PCD_EP_SetStall>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f8de 	bl	800941c <USBD_Get_USB_Status>
 8009260:	4603      	mov	r3, r0
 8009262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009264:	7bbb      	ldrb	r3, [r7, #14]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009288:	78fa      	ldrb	r2, [r7, #3]
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f7fa f990 	bl	80035b2 <HAL_PCD_EP_ClrStall>
 8009292:	4603      	mov	r3, r0
 8009294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	4618      	mov	r0, r3
 800929a:	f000 f8bf 	bl	800941c <USBD_Get_USB_Status>
 800929e:	4603      	mov	r3, r0
 80092a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	da0b      	bge.n	80092e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092ce:	68f9      	ldr	r1, [r7, #12]
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	440b      	add	r3, r1
 80092da:	333e      	adds	r3, #62	; 0x3e
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	e00b      	b.n	80092f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	4613      	mov	r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80092f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f7f9 ff5d 	bl	80031e2 <HAL_PCD_SetAddress>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f874 	bl	800941c <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009338:	7bbb      	ldrb	r3, [r7, #14]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b086      	sub	sp, #24
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
 800934e:	460b      	mov	r3, r1
 8009350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009360:	7af9      	ldrb	r1, [r7, #11]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	f7fa f876 	bl	8003456 <HAL_PCD_EP_Transmit>
 800936a:	4603      	mov	r3, r0
 800936c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f853 	bl	800941c <USBD_Get_USB_Status>
 8009376:	4603      	mov	r3, r0
 8009378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800937a:	7dbb      	ldrb	r3, [r7, #22]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	460b      	mov	r3, r1
 8009392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80093a2:	7af9      	ldrb	r1, [r7, #11]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	f7f9 fff2 	bl	8003390 <HAL_PCD_EP_Receive>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 f832 	bl	800941c <USBD_Get_USB_Status>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fa f822 	bl	8003426 <HAL_PCD_EP_GetRxCount>
 80093e2:	4603      	mov	r3, r0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093f4:	4b03      	ldr	r3, [pc, #12]	; (8009404 <USBD_static_malloc+0x18>)
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20001c80 	.word	0x20001c80

08009408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]

}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	4603      	mov	r3, r0
 8009424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	2b03      	cmp	r3, #3
 800942e:	d817      	bhi.n	8009460 <USBD_Get_USB_Status+0x44>
 8009430:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <USBD_Get_USB_Status+0x1c>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	08009449 	.word	0x08009449
 800943c:	0800944f 	.word	0x0800944f
 8009440:	08009455 	.word	0x08009455
 8009444:	0800945b 	.word	0x0800945b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
    break;
 800944c:	e00b      	b.n	8009466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800944e:	2303      	movs	r3, #3
 8009450:	73fb      	strb	r3, [r7, #15]
    break;
 8009452:	e008      	b.n	8009466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009454:	2301      	movs	r3, #1
 8009456:	73fb      	strb	r3, [r7, #15]
    break;
 8009458:	e005      	b.n	8009466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800945a:	2303      	movs	r3, #3
 800945c:	73fb      	strb	r3, [r7, #15]
    break;
 800945e:	e002      	b.n	8009466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009460:	2303      	movs	r3, #3
 8009462:	73fb      	strb	r3, [r7, #15]
    break;
 8009464:	bf00      	nop
  }
  return usb_status;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <__errno>:
 8009474:	4b01      	ldr	r3, [pc, #4]	; (800947c <__errno+0x8>)
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	20000104 	.word	0x20000104

08009480 <__libc_init_array>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4d0d      	ldr	r5, [pc, #52]	; (80094b8 <__libc_init_array+0x38>)
 8009484:	4c0d      	ldr	r4, [pc, #52]	; (80094bc <__libc_init_array+0x3c>)
 8009486:	1b64      	subs	r4, r4, r5
 8009488:	10a4      	asrs	r4, r4, #2
 800948a:	2600      	movs	r6, #0
 800948c:	42a6      	cmp	r6, r4
 800948e:	d109      	bne.n	80094a4 <__libc_init_array+0x24>
 8009490:	4d0b      	ldr	r5, [pc, #44]	; (80094c0 <__libc_init_array+0x40>)
 8009492:	4c0c      	ldr	r4, [pc, #48]	; (80094c4 <__libc_init_array+0x44>)
 8009494:	f001 fbaa 	bl	800abec <_init>
 8009498:	1b64      	subs	r4, r4, r5
 800949a:	10a4      	asrs	r4, r4, #2
 800949c:	2600      	movs	r6, #0
 800949e:	42a6      	cmp	r6, r4
 80094a0:	d105      	bne.n	80094ae <__libc_init_array+0x2e>
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a8:	4798      	blx	r3
 80094aa:	3601      	adds	r6, #1
 80094ac:	e7ee      	b.n	800948c <__libc_init_array+0xc>
 80094ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b2:	4798      	blx	r3
 80094b4:	3601      	adds	r6, #1
 80094b6:	e7f2      	b.n	800949e <__libc_init_array+0x1e>
 80094b8:	0800acf0 	.word	0x0800acf0
 80094bc:	0800acf0 	.word	0x0800acf0
 80094c0:	0800acf0 	.word	0x0800acf0
 80094c4:	0800acf4 	.word	0x0800acf4

080094c8 <memset>:
 80094c8:	4402      	add	r2, r0
 80094ca:	4603      	mov	r3, r0
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d100      	bne.n	80094d2 <memset+0xa>
 80094d0:	4770      	bx	lr
 80094d2:	f803 1b01 	strb.w	r1, [r3], #1
 80094d6:	e7f9      	b.n	80094cc <memset+0x4>

080094d8 <siprintf>:
 80094d8:	b40e      	push	{r1, r2, r3}
 80094da:	b500      	push	{lr}
 80094dc:	b09c      	sub	sp, #112	; 0x70
 80094de:	ab1d      	add	r3, sp, #116	; 0x74
 80094e0:	9002      	str	r0, [sp, #8]
 80094e2:	9006      	str	r0, [sp, #24]
 80094e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094e8:	4809      	ldr	r0, [pc, #36]	; (8009510 <siprintf+0x38>)
 80094ea:	9107      	str	r1, [sp, #28]
 80094ec:	9104      	str	r1, [sp, #16]
 80094ee:	4909      	ldr	r1, [pc, #36]	; (8009514 <siprintf+0x3c>)
 80094f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f4:	9105      	str	r1, [sp, #20]
 80094f6:	6800      	ldr	r0, [r0, #0]
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	a902      	add	r1, sp, #8
 80094fc:	f000 f868 	bl	80095d0 <_svfiprintf_r>
 8009500:	9b02      	ldr	r3, [sp, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	b01c      	add	sp, #112	; 0x70
 8009508:	f85d eb04 	ldr.w	lr, [sp], #4
 800950c:	b003      	add	sp, #12
 800950e:	4770      	bx	lr
 8009510:	20000104 	.word	0x20000104
 8009514:	ffff0208 	.word	0xffff0208

08009518 <__ssputs_r>:
 8009518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	688e      	ldr	r6, [r1, #8]
 800951e:	429e      	cmp	r6, r3
 8009520:	4682      	mov	sl, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4690      	mov	r8, r2
 8009526:	461f      	mov	r7, r3
 8009528:	d838      	bhi.n	800959c <__ssputs_r+0x84>
 800952a:	898a      	ldrh	r2, [r1, #12]
 800952c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009530:	d032      	beq.n	8009598 <__ssputs_r+0x80>
 8009532:	6825      	ldr	r5, [r4, #0]
 8009534:	6909      	ldr	r1, [r1, #16]
 8009536:	eba5 0901 	sub.w	r9, r5, r1
 800953a:	6965      	ldr	r5, [r4, #20]
 800953c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009544:	3301      	adds	r3, #1
 8009546:	444b      	add	r3, r9
 8009548:	106d      	asrs	r5, r5, #1
 800954a:	429d      	cmp	r5, r3
 800954c:	bf38      	it	cc
 800954e:	461d      	movcc	r5, r3
 8009550:	0553      	lsls	r3, r2, #21
 8009552:	d531      	bpl.n	80095b8 <__ssputs_r+0xa0>
 8009554:	4629      	mov	r1, r5
 8009556:	f000 fb63 	bl	8009c20 <_malloc_r>
 800955a:	4606      	mov	r6, r0
 800955c:	b950      	cbnz	r0, 8009574 <__ssputs_r+0x5c>
 800955e:	230c      	movs	r3, #12
 8009560:	f8ca 3000 	str.w	r3, [sl]
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800956a:	81a3      	strh	r3, [r4, #12]
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009574:	6921      	ldr	r1, [r4, #16]
 8009576:	464a      	mov	r2, r9
 8009578:	f000 fabe 	bl	8009af8 <memcpy>
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009586:	81a3      	strh	r3, [r4, #12]
 8009588:	6126      	str	r6, [r4, #16]
 800958a:	6165      	str	r5, [r4, #20]
 800958c:	444e      	add	r6, r9
 800958e:	eba5 0509 	sub.w	r5, r5, r9
 8009592:	6026      	str	r6, [r4, #0]
 8009594:	60a5      	str	r5, [r4, #8]
 8009596:	463e      	mov	r6, r7
 8009598:	42be      	cmp	r6, r7
 800959a:	d900      	bls.n	800959e <__ssputs_r+0x86>
 800959c:	463e      	mov	r6, r7
 800959e:	6820      	ldr	r0, [r4, #0]
 80095a0:	4632      	mov	r2, r6
 80095a2:	4641      	mov	r1, r8
 80095a4:	f000 fab6 	bl	8009b14 <memmove>
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	1b9b      	subs	r3, r3, r6
 80095ac:	60a3      	str	r3, [r4, #8]
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	4433      	add	r3, r6
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	2000      	movs	r0, #0
 80095b6:	e7db      	b.n	8009570 <__ssputs_r+0x58>
 80095b8:	462a      	mov	r2, r5
 80095ba:	f000 fba5 	bl	8009d08 <_realloc_r>
 80095be:	4606      	mov	r6, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1e1      	bne.n	8009588 <__ssputs_r+0x70>
 80095c4:	6921      	ldr	r1, [r4, #16]
 80095c6:	4650      	mov	r0, sl
 80095c8:	f000 fabe 	bl	8009b48 <_free_r>
 80095cc:	e7c7      	b.n	800955e <__ssputs_r+0x46>
	...

080095d0 <_svfiprintf_r>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	4698      	mov	r8, r3
 80095d6:	898b      	ldrh	r3, [r1, #12]
 80095d8:	061b      	lsls	r3, r3, #24
 80095da:	b09d      	sub	sp, #116	; 0x74
 80095dc:	4607      	mov	r7, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	4614      	mov	r4, r2
 80095e2:	d50e      	bpl.n	8009602 <_svfiprintf_r+0x32>
 80095e4:	690b      	ldr	r3, [r1, #16]
 80095e6:	b963      	cbnz	r3, 8009602 <_svfiprintf_r+0x32>
 80095e8:	2140      	movs	r1, #64	; 0x40
 80095ea:	f000 fb19 	bl	8009c20 <_malloc_r>
 80095ee:	6028      	str	r0, [r5, #0]
 80095f0:	6128      	str	r0, [r5, #16]
 80095f2:	b920      	cbnz	r0, 80095fe <_svfiprintf_r+0x2e>
 80095f4:	230c      	movs	r3, #12
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	f04f 30ff 	mov.w	r0, #4294967295
 80095fc:	e0d1      	b.n	80097a2 <_svfiprintf_r+0x1d2>
 80095fe:	2340      	movs	r3, #64	; 0x40
 8009600:	616b      	str	r3, [r5, #20]
 8009602:	2300      	movs	r3, #0
 8009604:	9309      	str	r3, [sp, #36]	; 0x24
 8009606:	2320      	movs	r3, #32
 8009608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800960c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009610:	2330      	movs	r3, #48	; 0x30
 8009612:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097bc <_svfiprintf_r+0x1ec>
 8009616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800961a:	f04f 0901 	mov.w	r9, #1
 800961e:	4623      	mov	r3, r4
 8009620:	469a      	mov	sl, r3
 8009622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009626:	b10a      	cbz	r2, 800962c <_svfiprintf_r+0x5c>
 8009628:	2a25      	cmp	r2, #37	; 0x25
 800962a:	d1f9      	bne.n	8009620 <_svfiprintf_r+0x50>
 800962c:	ebba 0b04 	subs.w	fp, sl, r4
 8009630:	d00b      	beq.n	800964a <_svfiprintf_r+0x7a>
 8009632:	465b      	mov	r3, fp
 8009634:	4622      	mov	r2, r4
 8009636:	4629      	mov	r1, r5
 8009638:	4638      	mov	r0, r7
 800963a:	f7ff ff6d 	bl	8009518 <__ssputs_r>
 800963e:	3001      	adds	r0, #1
 8009640:	f000 80aa 	beq.w	8009798 <_svfiprintf_r+0x1c8>
 8009644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009646:	445a      	add	r2, fp
 8009648:	9209      	str	r2, [sp, #36]	; 0x24
 800964a:	f89a 3000 	ldrb.w	r3, [sl]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 80a2 	beq.w	8009798 <_svfiprintf_r+0x1c8>
 8009654:	2300      	movs	r3, #0
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800965e:	f10a 0a01 	add.w	sl, sl, #1
 8009662:	9304      	str	r3, [sp, #16]
 8009664:	9307      	str	r3, [sp, #28]
 8009666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800966a:	931a      	str	r3, [sp, #104]	; 0x68
 800966c:	4654      	mov	r4, sl
 800966e:	2205      	movs	r2, #5
 8009670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009674:	4851      	ldr	r0, [pc, #324]	; (80097bc <_svfiprintf_r+0x1ec>)
 8009676:	f7f6 fdb3 	bl	80001e0 <memchr>
 800967a:	9a04      	ldr	r2, [sp, #16]
 800967c:	b9d8      	cbnz	r0, 80096b6 <_svfiprintf_r+0xe6>
 800967e:	06d0      	lsls	r0, r2, #27
 8009680:	bf44      	itt	mi
 8009682:	2320      	movmi	r3, #32
 8009684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009688:	0711      	lsls	r1, r2, #28
 800968a:	bf44      	itt	mi
 800968c:	232b      	movmi	r3, #43	; 0x2b
 800968e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009692:	f89a 3000 	ldrb.w	r3, [sl]
 8009696:	2b2a      	cmp	r3, #42	; 0x2a
 8009698:	d015      	beq.n	80096c6 <_svfiprintf_r+0xf6>
 800969a:	9a07      	ldr	r2, [sp, #28]
 800969c:	4654      	mov	r4, sl
 800969e:	2000      	movs	r0, #0
 80096a0:	f04f 0c0a 	mov.w	ip, #10
 80096a4:	4621      	mov	r1, r4
 80096a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096aa:	3b30      	subs	r3, #48	; 0x30
 80096ac:	2b09      	cmp	r3, #9
 80096ae:	d94e      	bls.n	800974e <_svfiprintf_r+0x17e>
 80096b0:	b1b0      	cbz	r0, 80096e0 <_svfiprintf_r+0x110>
 80096b2:	9207      	str	r2, [sp, #28]
 80096b4:	e014      	b.n	80096e0 <_svfiprintf_r+0x110>
 80096b6:	eba0 0308 	sub.w	r3, r0, r8
 80096ba:	fa09 f303 	lsl.w	r3, r9, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	46a2      	mov	sl, r4
 80096c4:	e7d2      	b.n	800966c <_svfiprintf_r+0x9c>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	1d19      	adds	r1, r3, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	9103      	str	r1, [sp, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bfbb      	ittet	lt
 80096d2:	425b      	neglt	r3, r3
 80096d4:	f042 0202 	orrlt.w	r2, r2, #2
 80096d8:	9307      	strge	r3, [sp, #28]
 80096da:	9307      	strlt	r3, [sp, #28]
 80096dc:	bfb8      	it	lt
 80096de:	9204      	strlt	r2, [sp, #16]
 80096e0:	7823      	ldrb	r3, [r4, #0]
 80096e2:	2b2e      	cmp	r3, #46	; 0x2e
 80096e4:	d10c      	bne.n	8009700 <_svfiprintf_r+0x130>
 80096e6:	7863      	ldrb	r3, [r4, #1]
 80096e8:	2b2a      	cmp	r3, #42	; 0x2a
 80096ea:	d135      	bne.n	8009758 <_svfiprintf_r+0x188>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9203      	str	r2, [sp, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfb8      	it	lt
 80096f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80096fc:	3402      	adds	r4, #2
 80096fe:	9305      	str	r3, [sp, #20]
 8009700:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097cc <_svfiprintf_r+0x1fc>
 8009704:	7821      	ldrb	r1, [r4, #0]
 8009706:	2203      	movs	r2, #3
 8009708:	4650      	mov	r0, sl
 800970a:	f7f6 fd69 	bl	80001e0 <memchr>
 800970e:	b140      	cbz	r0, 8009722 <_svfiprintf_r+0x152>
 8009710:	2340      	movs	r3, #64	; 0x40
 8009712:	eba0 000a 	sub.w	r0, r0, sl
 8009716:	fa03 f000 	lsl.w	r0, r3, r0
 800971a:	9b04      	ldr	r3, [sp, #16]
 800971c:	4303      	orrs	r3, r0
 800971e:	3401      	adds	r4, #1
 8009720:	9304      	str	r3, [sp, #16]
 8009722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009726:	4826      	ldr	r0, [pc, #152]	; (80097c0 <_svfiprintf_r+0x1f0>)
 8009728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800972c:	2206      	movs	r2, #6
 800972e:	f7f6 fd57 	bl	80001e0 <memchr>
 8009732:	2800      	cmp	r0, #0
 8009734:	d038      	beq.n	80097a8 <_svfiprintf_r+0x1d8>
 8009736:	4b23      	ldr	r3, [pc, #140]	; (80097c4 <_svfiprintf_r+0x1f4>)
 8009738:	bb1b      	cbnz	r3, 8009782 <_svfiprintf_r+0x1b2>
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	3307      	adds	r3, #7
 800973e:	f023 0307 	bic.w	r3, r3, #7
 8009742:	3308      	adds	r3, #8
 8009744:	9303      	str	r3, [sp, #12]
 8009746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009748:	4433      	add	r3, r6
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
 800974c:	e767      	b.n	800961e <_svfiprintf_r+0x4e>
 800974e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009752:	460c      	mov	r4, r1
 8009754:	2001      	movs	r0, #1
 8009756:	e7a5      	b.n	80096a4 <_svfiprintf_r+0xd4>
 8009758:	2300      	movs	r3, #0
 800975a:	3401      	adds	r4, #1
 800975c:	9305      	str	r3, [sp, #20]
 800975e:	4619      	mov	r1, r3
 8009760:	f04f 0c0a 	mov.w	ip, #10
 8009764:	4620      	mov	r0, r4
 8009766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800976a:	3a30      	subs	r2, #48	; 0x30
 800976c:	2a09      	cmp	r2, #9
 800976e:	d903      	bls.n	8009778 <_svfiprintf_r+0x1a8>
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0c5      	beq.n	8009700 <_svfiprintf_r+0x130>
 8009774:	9105      	str	r1, [sp, #20]
 8009776:	e7c3      	b.n	8009700 <_svfiprintf_r+0x130>
 8009778:	fb0c 2101 	mla	r1, ip, r1, r2
 800977c:	4604      	mov	r4, r0
 800977e:	2301      	movs	r3, #1
 8009780:	e7f0      	b.n	8009764 <_svfiprintf_r+0x194>
 8009782:	ab03      	add	r3, sp, #12
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	462a      	mov	r2, r5
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <_svfiprintf_r+0x1f8>)
 800978a:	a904      	add	r1, sp, #16
 800978c:	4638      	mov	r0, r7
 800978e:	f3af 8000 	nop.w
 8009792:	1c42      	adds	r2, r0, #1
 8009794:	4606      	mov	r6, r0
 8009796:	d1d6      	bne.n	8009746 <_svfiprintf_r+0x176>
 8009798:	89ab      	ldrh	r3, [r5, #12]
 800979a:	065b      	lsls	r3, r3, #25
 800979c:	f53f af2c 	bmi.w	80095f8 <_svfiprintf_r+0x28>
 80097a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097a2:	b01d      	add	sp, #116	; 0x74
 80097a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a8:	ab03      	add	r3, sp, #12
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	462a      	mov	r2, r5
 80097ae:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <_svfiprintf_r+0x1f8>)
 80097b0:	a904      	add	r1, sp, #16
 80097b2:	4638      	mov	r0, r7
 80097b4:	f000 f87a 	bl	80098ac <_printf_i>
 80097b8:	e7eb      	b.n	8009792 <_svfiprintf_r+0x1c2>
 80097ba:	bf00      	nop
 80097bc:	0800ac80 	.word	0x0800ac80
 80097c0:	0800ac8a 	.word	0x0800ac8a
 80097c4:	00000000 	.word	0x00000000
 80097c8:	08009519 	.word	0x08009519
 80097cc:	0800ac86 	.word	0x0800ac86

080097d0 <_printf_common>:
 80097d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	4616      	mov	r6, r2
 80097d6:	4699      	mov	r9, r3
 80097d8:	688a      	ldr	r2, [r1, #8]
 80097da:	690b      	ldr	r3, [r1, #16]
 80097dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	bfb8      	it	lt
 80097e4:	4613      	movlt	r3, r2
 80097e6:	6033      	str	r3, [r6, #0]
 80097e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097ec:	4607      	mov	r7, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b10a      	cbz	r2, 80097f6 <_printf_common+0x26>
 80097f2:	3301      	adds	r3, #1
 80097f4:	6033      	str	r3, [r6, #0]
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	0699      	lsls	r1, r3, #26
 80097fa:	bf42      	ittt	mi
 80097fc:	6833      	ldrmi	r3, [r6, #0]
 80097fe:	3302      	addmi	r3, #2
 8009800:	6033      	strmi	r3, [r6, #0]
 8009802:	6825      	ldr	r5, [r4, #0]
 8009804:	f015 0506 	ands.w	r5, r5, #6
 8009808:	d106      	bne.n	8009818 <_printf_common+0x48>
 800980a:	f104 0a19 	add.w	sl, r4, #25
 800980e:	68e3      	ldr	r3, [r4, #12]
 8009810:	6832      	ldr	r2, [r6, #0]
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	42ab      	cmp	r3, r5
 8009816:	dc26      	bgt.n	8009866 <_printf_common+0x96>
 8009818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800981c:	1e13      	subs	r3, r2, #0
 800981e:	6822      	ldr	r2, [r4, #0]
 8009820:	bf18      	it	ne
 8009822:	2301      	movne	r3, #1
 8009824:	0692      	lsls	r2, r2, #26
 8009826:	d42b      	bmi.n	8009880 <_printf_common+0xb0>
 8009828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800982c:	4649      	mov	r1, r9
 800982e:	4638      	mov	r0, r7
 8009830:	47c0      	blx	r8
 8009832:	3001      	adds	r0, #1
 8009834:	d01e      	beq.n	8009874 <_printf_common+0xa4>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	68e5      	ldr	r5, [r4, #12]
 800983a:	6832      	ldr	r2, [r6, #0]
 800983c:	f003 0306 	and.w	r3, r3, #6
 8009840:	2b04      	cmp	r3, #4
 8009842:	bf08      	it	eq
 8009844:	1aad      	subeq	r5, r5, r2
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	6922      	ldr	r2, [r4, #16]
 800984a:	bf0c      	ite	eq
 800984c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009850:	2500      	movne	r5, #0
 8009852:	4293      	cmp	r3, r2
 8009854:	bfc4      	itt	gt
 8009856:	1a9b      	subgt	r3, r3, r2
 8009858:	18ed      	addgt	r5, r5, r3
 800985a:	2600      	movs	r6, #0
 800985c:	341a      	adds	r4, #26
 800985e:	42b5      	cmp	r5, r6
 8009860:	d11a      	bne.n	8009898 <_printf_common+0xc8>
 8009862:	2000      	movs	r0, #0
 8009864:	e008      	b.n	8009878 <_printf_common+0xa8>
 8009866:	2301      	movs	r3, #1
 8009868:	4652      	mov	r2, sl
 800986a:	4649      	mov	r1, r9
 800986c:	4638      	mov	r0, r7
 800986e:	47c0      	blx	r8
 8009870:	3001      	adds	r0, #1
 8009872:	d103      	bne.n	800987c <_printf_common+0xac>
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987c:	3501      	adds	r5, #1
 800987e:	e7c6      	b.n	800980e <_printf_common+0x3e>
 8009880:	18e1      	adds	r1, r4, r3
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	2030      	movs	r0, #48	; 0x30
 8009886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800988a:	4422      	add	r2, r4
 800988c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009894:	3302      	adds	r3, #2
 8009896:	e7c7      	b.n	8009828 <_printf_common+0x58>
 8009898:	2301      	movs	r3, #1
 800989a:	4622      	mov	r2, r4
 800989c:	4649      	mov	r1, r9
 800989e:	4638      	mov	r0, r7
 80098a0:	47c0      	blx	r8
 80098a2:	3001      	adds	r0, #1
 80098a4:	d0e6      	beq.n	8009874 <_printf_common+0xa4>
 80098a6:	3601      	adds	r6, #1
 80098a8:	e7d9      	b.n	800985e <_printf_common+0x8e>
	...

080098ac <_printf_i>:
 80098ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b0:	7e0f      	ldrb	r7, [r1, #24]
 80098b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098b4:	2f78      	cmp	r7, #120	; 0x78
 80098b6:	4691      	mov	r9, r2
 80098b8:	4680      	mov	r8, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	469a      	mov	sl, r3
 80098be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098c2:	d807      	bhi.n	80098d4 <_printf_i+0x28>
 80098c4:	2f62      	cmp	r7, #98	; 0x62
 80098c6:	d80a      	bhi.n	80098de <_printf_i+0x32>
 80098c8:	2f00      	cmp	r7, #0
 80098ca:	f000 80d8 	beq.w	8009a7e <_printf_i+0x1d2>
 80098ce:	2f58      	cmp	r7, #88	; 0x58
 80098d0:	f000 80a3 	beq.w	8009a1a <_printf_i+0x16e>
 80098d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098dc:	e03a      	b.n	8009954 <_printf_i+0xa8>
 80098de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098e2:	2b15      	cmp	r3, #21
 80098e4:	d8f6      	bhi.n	80098d4 <_printf_i+0x28>
 80098e6:	a101      	add	r1, pc, #4	; (adr r1, 80098ec <_printf_i+0x40>)
 80098e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098ec:	08009945 	.word	0x08009945
 80098f0:	08009959 	.word	0x08009959
 80098f4:	080098d5 	.word	0x080098d5
 80098f8:	080098d5 	.word	0x080098d5
 80098fc:	080098d5 	.word	0x080098d5
 8009900:	080098d5 	.word	0x080098d5
 8009904:	08009959 	.word	0x08009959
 8009908:	080098d5 	.word	0x080098d5
 800990c:	080098d5 	.word	0x080098d5
 8009910:	080098d5 	.word	0x080098d5
 8009914:	080098d5 	.word	0x080098d5
 8009918:	08009a65 	.word	0x08009a65
 800991c:	08009989 	.word	0x08009989
 8009920:	08009a47 	.word	0x08009a47
 8009924:	080098d5 	.word	0x080098d5
 8009928:	080098d5 	.word	0x080098d5
 800992c:	08009a87 	.word	0x08009a87
 8009930:	080098d5 	.word	0x080098d5
 8009934:	08009989 	.word	0x08009989
 8009938:	080098d5 	.word	0x080098d5
 800993c:	080098d5 	.word	0x080098d5
 8009940:	08009a4f 	.word	0x08009a4f
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	602a      	str	r2, [r5, #0]
 800994c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009954:	2301      	movs	r3, #1
 8009956:	e0a3      	b.n	8009aa0 <_printf_i+0x1f4>
 8009958:	6820      	ldr	r0, [r4, #0]
 800995a:	6829      	ldr	r1, [r5, #0]
 800995c:	0606      	lsls	r6, r0, #24
 800995e:	f101 0304 	add.w	r3, r1, #4
 8009962:	d50a      	bpl.n	800997a <_printf_i+0xce>
 8009964:	680e      	ldr	r6, [r1, #0]
 8009966:	602b      	str	r3, [r5, #0]
 8009968:	2e00      	cmp	r6, #0
 800996a:	da03      	bge.n	8009974 <_printf_i+0xc8>
 800996c:	232d      	movs	r3, #45	; 0x2d
 800996e:	4276      	negs	r6, r6
 8009970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009974:	485e      	ldr	r0, [pc, #376]	; (8009af0 <_printf_i+0x244>)
 8009976:	230a      	movs	r3, #10
 8009978:	e019      	b.n	80099ae <_printf_i+0x102>
 800997a:	680e      	ldr	r6, [r1, #0]
 800997c:	602b      	str	r3, [r5, #0]
 800997e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009982:	bf18      	it	ne
 8009984:	b236      	sxthne	r6, r6
 8009986:	e7ef      	b.n	8009968 <_printf_i+0xbc>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	6820      	ldr	r0, [r4, #0]
 800998c:	1d19      	adds	r1, r3, #4
 800998e:	6029      	str	r1, [r5, #0]
 8009990:	0601      	lsls	r1, r0, #24
 8009992:	d501      	bpl.n	8009998 <_printf_i+0xec>
 8009994:	681e      	ldr	r6, [r3, #0]
 8009996:	e002      	b.n	800999e <_printf_i+0xf2>
 8009998:	0646      	lsls	r6, r0, #25
 800999a:	d5fb      	bpl.n	8009994 <_printf_i+0xe8>
 800999c:	881e      	ldrh	r6, [r3, #0]
 800999e:	4854      	ldr	r0, [pc, #336]	; (8009af0 <_printf_i+0x244>)
 80099a0:	2f6f      	cmp	r7, #111	; 0x6f
 80099a2:	bf0c      	ite	eq
 80099a4:	2308      	moveq	r3, #8
 80099a6:	230a      	movne	r3, #10
 80099a8:	2100      	movs	r1, #0
 80099aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099ae:	6865      	ldr	r5, [r4, #4]
 80099b0:	60a5      	str	r5, [r4, #8]
 80099b2:	2d00      	cmp	r5, #0
 80099b4:	bfa2      	ittt	ge
 80099b6:	6821      	ldrge	r1, [r4, #0]
 80099b8:	f021 0104 	bicge.w	r1, r1, #4
 80099bc:	6021      	strge	r1, [r4, #0]
 80099be:	b90e      	cbnz	r6, 80099c4 <_printf_i+0x118>
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	d04d      	beq.n	8009a60 <_printf_i+0x1b4>
 80099c4:	4615      	mov	r5, r2
 80099c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80099ca:	fb03 6711 	mls	r7, r3, r1, r6
 80099ce:	5dc7      	ldrb	r7, [r0, r7]
 80099d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099d4:	4637      	mov	r7, r6
 80099d6:	42bb      	cmp	r3, r7
 80099d8:	460e      	mov	r6, r1
 80099da:	d9f4      	bls.n	80099c6 <_printf_i+0x11a>
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d10b      	bne.n	80099f8 <_printf_i+0x14c>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	07de      	lsls	r6, r3, #31
 80099e4:	d508      	bpl.n	80099f8 <_printf_i+0x14c>
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	6861      	ldr	r1, [r4, #4]
 80099ea:	4299      	cmp	r1, r3
 80099ec:	bfde      	ittt	le
 80099ee:	2330      	movle	r3, #48	; 0x30
 80099f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099f8:	1b52      	subs	r2, r2, r5
 80099fa:	6122      	str	r2, [r4, #16]
 80099fc:	f8cd a000 	str.w	sl, [sp]
 8009a00:	464b      	mov	r3, r9
 8009a02:	aa03      	add	r2, sp, #12
 8009a04:	4621      	mov	r1, r4
 8009a06:	4640      	mov	r0, r8
 8009a08:	f7ff fee2 	bl	80097d0 <_printf_common>
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d14c      	bne.n	8009aaa <_printf_i+0x1fe>
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	b004      	add	sp, #16
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	4835      	ldr	r0, [pc, #212]	; (8009af0 <_printf_i+0x244>)
 8009a1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a20:	6829      	ldr	r1, [r5, #0]
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a28:	6029      	str	r1, [r5, #0]
 8009a2a:	061d      	lsls	r5, r3, #24
 8009a2c:	d514      	bpl.n	8009a58 <_printf_i+0x1ac>
 8009a2e:	07df      	lsls	r7, r3, #31
 8009a30:	bf44      	itt	mi
 8009a32:	f043 0320 	orrmi.w	r3, r3, #32
 8009a36:	6023      	strmi	r3, [r4, #0]
 8009a38:	b91e      	cbnz	r6, 8009a42 <_printf_i+0x196>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	f023 0320 	bic.w	r3, r3, #32
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	2310      	movs	r3, #16
 8009a44:	e7b0      	b.n	80099a8 <_printf_i+0xfc>
 8009a46:	6823      	ldr	r3, [r4, #0]
 8009a48:	f043 0320 	orr.w	r3, r3, #32
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	2378      	movs	r3, #120	; 0x78
 8009a50:	4828      	ldr	r0, [pc, #160]	; (8009af4 <_printf_i+0x248>)
 8009a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a56:	e7e3      	b.n	8009a20 <_printf_i+0x174>
 8009a58:	0659      	lsls	r1, r3, #25
 8009a5a:	bf48      	it	mi
 8009a5c:	b2b6      	uxthmi	r6, r6
 8009a5e:	e7e6      	b.n	8009a2e <_printf_i+0x182>
 8009a60:	4615      	mov	r5, r2
 8009a62:	e7bb      	b.n	80099dc <_printf_i+0x130>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	6826      	ldr	r6, [r4, #0]
 8009a68:	6961      	ldr	r1, [r4, #20]
 8009a6a:	1d18      	adds	r0, r3, #4
 8009a6c:	6028      	str	r0, [r5, #0]
 8009a6e:	0635      	lsls	r5, r6, #24
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	d501      	bpl.n	8009a78 <_printf_i+0x1cc>
 8009a74:	6019      	str	r1, [r3, #0]
 8009a76:	e002      	b.n	8009a7e <_printf_i+0x1d2>
 8009a78:	0670      	lsls	r0, r6, #25
 8009a7a:	d5fb      	bpl.n	8009a74 <_printf_i+0x1c8>
 8009a7c:	8019      	strh	r1, [r3, #0]
 8009a7e:	2300      	movs	r3, #0
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	4615      	mov	r5, r2
 8009a84:	e7ba      	b.n	80099fc <_printf_i+0x150>
 8009a86:	682b      	ldr	r3, [r5, #0]
 8009a88:	1d1a      	adds	r2, r3, #4
 8009a8a:	602a      	str	r2, [r5, #0]
 8009a8c:	681d      	ldr	r5, [r3, #0]
 8009a8e:	6862      	ldr	r2, [r4, #4]
 8009a90:	2100      	movs	r1, #0
 8009a92:	4628      	mov	r0, r5
 8009a94:	f7f6 fba4 	bl	80001e0 <memchr>
 8009a98:	b108      	cbz	r0, 8009a9e <_printf_i+0x1f2>
 8009a9a:	1b40      	subs	r0, r0, r5
 8009a9c:	6060      	str	r0, [r4, #4]
 8009a9e:	6863      	ldr	r3, [r4, #4]
 8009aa0:	6123      	str	r3, [r4, #16]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa8:	e7a8      	b.n	80099fc <_printf_i+0x150>
 8009aaa:	6923      	ldr	r3, [r4, #16]
 8009aac:	462a      	mov	r2, r5
 8009aae:	4649      	mov	r1, r9
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	47d0      	blx	sl
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d0ab      	beq.n	8009a10 <_printf_i+0x164>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	079b      	lsls	r3, r3, #30
 8009abc:	d413      	bmi.n	8009ae6 <_printf_i+0x23a>
 8009abe:	68e0      	ldr	r0, [r4, #12]
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	4298      	cmp	r0, r3
 8009ac4:	bfb8      	it	lt
 8009ac6:	4618      	movlt	r0, r3
 8009ac8:	e7a4      	b.n	8009a14 <_printf_i+0x168>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4632      	mov	r2, r6
 8009ace:	4649      	mov	r1, r9
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	47d0      	blx	sl
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d09b      	beq.n	8009a10 <_printf_i+0x164>
 8009ad8:	3501      	adds	r5, #1
 8009ada:	68e3      	ldr	r3, [r4, #12]
 8009adc:	9903      	ldr	r1, [sp, #12]
 8009ade:	1a5b      	subs	r3, r3, r1
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	dcf2      	bgt.n	8009aca <_printf_i+0x21e>
 8009ae4:	e7eb      	b.n	8009abe <_printf_i+0x212>
 8009ae6:	2500      	movs	r5, #0
 8009ae8:	f104 0619 	add.w	r6, r4, #25
 8009aec:	e7f5      	b.n	8009ada <_printf_i+0x22e>
 8009aee:	bf00      	nop
 8009af0:	0800ac91 	.word	0x0800ac91
 8009af4:	0800aca2 	.word	0x0800aca2

08009af8 <memcpy>:
 8009af8:	440a      	add	r2, r1
 8009afa:	4291      	cmp	r1, r2
 8009afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b00:	d100      	bne.n	8009b04 <memcpy+0xc>
 8009b02:	4770      	bx	lr
 8009b04:	b510      	push	{r4, lr}
 8009b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b0e:	4291      	cmp	r1, r2
 8009b10:	d1f9      	bne.n	8009b06 <memcpy+0xe>
 8009b12:	bd10      	pop	{r4, pc}

08009b14 <memmove>:
 8009b14:	4288      	cmp	r0, r1
 8009b16:	b510      	push	{r4, lr}
 8009b18:	eb01 0402 	add.w	r4, r1, r2
 8009b1c:	d902      	bls.n	8009b24 <memmove+0x10>
 8009b1e:	4284      	cmp	r4, r0
 8009b20:	4623      	mov	r3, r4
 8009b22:	d807      	bhi.n	8009b34 <memmove+0x20>
 8009b24:	1e43      	subs	r3, r0, #1
 8009b26:	42a1      	cmp	r1, r4
 8009b28:	d008      	beq.n	8009b3c <memmove+0x28>
 8009b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b32:	e7f8      	b.n	8009b26 <memmove+0x12>
 8009b34:	4402      	add	r2, r0
 8009b36:	4601      	mov	r1, r0
 8009b38:	428a      	cmp	r2, r1
 8009b3a:	d100      	bne.n	8009b3e <memmove+0x2a>
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b46:	e7f7      	b.n	8009b38 <memmove+0x24>

08009b48 <_free_r>:
 8009b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	d044      	beq.n	8009bd8 <_free_r+0x90>
 8009b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b52:	9001      	str	r0, [sp, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f1a1 0404 	sub.w	r4, r1, #4
 8009b5a:	bfb8      	it	lt
 8009b5c:	18e4      	addlt	r4, r4, r3
 8009b5e:	f000 f913 	bl	8009d88 <__malloc_lock>
 8009b62:	4a1e      	ldr	r2, [pc, #120]	; (8009bdc <_free_r+0x94>)
 8009b64:	9801      	ldr	r0, [sp, #4]
 8009b66:	6813      	ldr	r3, [r2, #0]
 8009b68:	b933      	cbnz	r3, 8009b78 <_free_r+0x30>
 8009b6a:	6063      	str	r3, [r4, #4]
 8009b6c:	6014      	str	r4, [r2, #0]
 8009b6e:	b003      	add	sp, #12
 8009b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b74:	f000 b90e 	b.w	8009d94 <__malloc_unlock>
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	d908      	bls.n	8009b8e <_free_r+0x46>
 8009b7c:	6825      	ldr	r5, [r4, #0]
 8009b7e:	1961      	adds	r1, r4, r5
 8009b80:	428b      	cmp	r3, r1
 8009b82:	bf01      	itttt	eq
 8009b84:	6819      	ldreq	r1, [r3, #0]
 8009b86:	685b      	ldreq	r3, [r3, #4]
 8009b88:	1949      	addeq	r1, r1, r5
 8009b8a:	6021      	streq	r1, [r4, #0]
 8009b8c:	e7ed      	b.n	8009b6a <_free_r+0x22>
 8009b8e:	461a      	mov	r2, r3
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	b10b      	cbz	r3, 8009b98 <_free_r+0x50>
 8009b94:	42a3      	cmp	r3, r4
 8009b96:	d9fa      	bls.n	8009b8e <_free_r+0x46>
 8009b98:	6811      	ldr	r1, [r2, #0]
 8009b9a:	1855      	adds	r5, r2, r1
 8009b9c:	42a5      	cmp	r5, r4
 8009b9e:	d10b      	bne.n	8009bb8 <_free_r+0x70>
 8009ba0:	6824      	ldr	r4, [r4, #0]
 8009ba2:	4421      	add	r1, r4
 8009ba4:	1854      	adds	r4, r2, r1
 8009ba6:	42a3      	cmp	r3, r4
 8009ba8:	6011      	str	r1, [r2, #0]
 8009baa:	d1e0      	bne.n	8009b6e <_free_r+0x26>
 8009bac:	681c      	ldr	r4, [r3, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	6053      	str	r3, [r2, #4]
 8009bb2:	4421      	add	r1, r4
 8009bb4:	6011      	str	r1, [r2, #0]
 8009bb6:	e7da      	b.n	8009b6e <_free_r+0x26>
 8009bb8:	d902      	bls.n	8009bc0 <_free_r+0x78>
 8009bba:	230c      	movs	r3, #12
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	e7d6      	b.n	8009b6e <_free_r+0x26>
 8009bc0:	6825      	ldr	r5, [r4, #0]
 8009bc2:	1961      	adds	r1, r4, r5
 8009bc4:	428b      	cmp	r3, r1
 8009bc6:	bf04      	itt	eq
 8009bc8:	6819      	ldreq	r1, [r3, #0]
 8009bca:	685b      	ldreq	r3, [r3, #4]
 8009bcc:	6063      	str	r3, [r4, #4]
 8009bce:	bf04      	itt	eq
 8009bd0:	1949      	addeq	r1, r1, r5
 8009bd2:	6021      	streq	r1, [r4, #0]
 8009bd4:	6054      	str	r4, [r2, #4]
 8009bd6:	e7ca      	b.n	8009b6e <_free_r+0x26>
 8009bd8:	b003      	add	sp, #12
 8009bda:	bd30      	pop	{r4, r5, pc}
 8009bdc:	20001ea0 	.word	0x20001ea0

08009be0 <sbrk_aligned>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	4e0e      	ldr	r6, [pc, #56]	; (8009c1c <sbrk_aligned+0x3c>)
 8009be4:	460c      	mov	r4, r1
 8009be6:	6831      	ldr	r1, [r6, #0]
 8009be8:	4605      	mov	r5, r0
 8009bea:	b911      	cbnz	r1, 8009bf2 <sbrk_aligned+0x12>
 8009bec:	f000 f8bc 	bl	8009d68 <_sbrk_r>
 8009bf0:	6030      	str	r0, [r6, #0]
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f000 f8b7 	bl	8009d68 <_sbrk_r>
 8009bfa:	1c43      	adds	r3, r0, #1
 8009bfc:	d00a      	beq.n	8009c14 <sbrk_aligned+0x34>
 8009bfe:	1cc4      	adds	r4, r0, #3
 8009c00:	f024 0403 	bic.w	r4, r4, #3
 8009c04:	42a0      	cmp	r0, r4
 8009c06:	d007      	beq.n	8009c18 <sbrk_aligned+0x38>
 8009c08:	1a21      	subs	r1, r4, r0
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f000 f8ac 	bl	8009d68 <_sbrk_r>
 8009c10:	3001      	adds	r0, #1
 8009c12:	d101      	bne.n	8009c18 <sbrk_aligned+0x38>
 8009c14:	f04f 34ff 	mov.w	r4, #4294967295
 8009c18:	4620      	mov	r0, r4
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}
 8009c1c:	20001ea4 	.word	0x20001ea4

08009c20 <_malloc_r>:
 8009c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c24:	1ccd      	adds	r5, r1, #3
 8009c26:	f025 0503 	bic.w	r5, r5, #3
 8009c2a:	3508      	adds	r5, #8
 8009c2c:	2d0c      	cmp	r5, #12
 8009c2e:	bf38      	it	cc
 8009c30:	250c      	movcc	r5, #12
 8009c32:	2d00      	cmp	r5, #0
 8009c34:	4607      	mov	r7, r0
 8009c36:	db01      	blt.n	8009c3c <_malloc_r+0x1c>
 8009c38:	42a9      	cmp	r1, r5
 8009c3a:	d905      	bls.n	8009c48 <_malloc_r+0x28>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	2600      	movs	r6, #0
 8009c42:	4630      	mov	r0, r6
 8009c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c48:	4e2e      	ldr	r6, [pc, #184]	; (8009d04 <_malloc_r+0xe4>)
 8009c4a:	f000 f89d 	bl	8009d88 <__malloc_lock>
 8009c4e:	6833      	ldr	r3, [r6, #0]
 8009c50:	461c      	mov	r4, r3
 8009c52:	bb34      	cbnz	r4, 8009ca2 <_malloc_r+0x82>
 8009c54:	4629      	mov	r1, r5
 8009c56:	4638      	mov	r0, r7
 8009c58:	f7ff ffc2 	bl	8009be0 <sbrk_aligned>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	4604      	mov	r4, r0
 8009c60:	d14d      	bne.n	8009cfe <_malloc_r+0xde>
 8009c62:	6834      	ldr	r4, [r6, #0]
 8009c64:	4626      	mov	r6, r4
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	d140      	bne.n	8009cec <_malloc_r+0xcc>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4638      	mov	r0, r7
 8009c70:	eb04 0803 	add.w	r8, r4, r3
 8009c74:	f000 f878 	bl	8009d68 <_sbrk_r>
 8009c78:	4580      	cmp	r8, r0
 8009c7a:	d13a      	bne.n	8009cf2 <_malloc_r+0xd2>
 8009c7c:	6821      	ldr	r1, [r4, #0]
 8009c7e:	3503      	adds	r5, #3
 8009c80:	1a6d      	subs	r5, r5, r1
 8009c82:	f025 0503 	bic.w	r5, r5, #3
 8009c86:	3508      	adds	r5, #8
 8009c88:	2d0c      	cmp	r5, #12
 8009c8a:	bf38      	it	cc
 8009c8c:	250c      	movcc	r5, #12
 8009c8e:	4629      	mov	r1, r5
 8009c90:	4638      	mov	r0, r7
 8009c92:	f7ff ffa5 	bl	8009be0 <sbrk_aligned>
 8009c96:	3001      	adds	r0, #1
 8009c98:	d02b      	beq.n	8009cf2 <_malloc_r+0xd2>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	442b      	add	r3, r5
 8009c9e:	6023      	str	r3, [r4, #0]
 8009ca0:	e00e      	b.n	8009cc0 <_malloc_r+0xa0>
 8009ca2:	6822      	ldr	r2, [r4, #0]
 8009ca4:	1b52      	subs	r2, r2, r5
 8009ca6:	d41e      	bmi.n	8009ce6 <_malloc_r+0xc6>
 8009ca8:	2a0b      	cmp	r2, #11
 8009caa:	d916      	bls.n	8009cda <_malloc_r+0xba>
 8009cac:	1961      	adds	r1, r4, r5
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	6025      	str	r5, [r4, #0]
 8009cb2:	bf18      	it	ne
 8009cb4:	6059      	strne	r1, [r3, #4]
 8009cb6:	6863      	ldr	r3, [r4, #4]
 8009cb8:	bf08      	it	eq
 8009cba:	6031      	streq	r1, [r6, #0]
 8009cbc:	5162      	str	r2, [r4, r5]
 8009cbe:	604b      	str	r3, [r1, #4]
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	f104 060b 	add.w	r6, r4, #11
 8009cc6:	f000 f865 	bl	8009d94 <__malloc_unlock>
 8009cca:	f026 0607 	bic.w	r6, r6, #7
 8009cce:	1d23      	adds	r3, r4, #4
 8009cd0:	1af2      	subs	r2, r6, r3
 8009cd2:	d0b6      	beq.n	8009c42 <_malloc_r+0x22>
 8009cd4:	1b9b      	subs	r3, r3, r6
 8009cd6:	50a3      	str	r3, [r4, r2]
 8009cd8:	e7b3      	b.n	8009c42 <_malloc_r+0x22>
 8009cda:	6862      	ldr	r2, [r4, #4]
 8009cdc:	42a3      	cmp	r3, r4
 8009cde:	bf0c      	ite	eq
 8009ce0:	6032      	streq	r2, [r6, #0]
 8009ce2:	605a      	strne	r2, [r3, #4]
 8009ce4:	e7ec      	b.n	8009cc0 <_malloc_r+0xa0>
 8009ce6:	4623      	mov	r3, r4
 8009ce8:	6864      	ldr	r4, [r4, #4]
 8009cea:	e7b2      	b.n	8009c52 <_malloc_r+0x32>
 8009cec:	4634      	mov	r4, r6
 8009cee:	6876      	ldr	r6, [r6, #4]
 8009cf0:	e7b9      	b.n	8009c66 <_malloc_r+0x46>
 8009cf2:	230c      	movs	r3, #12
 8009cf4:	603b      	str	r3, [r7, #0]
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f000 f84c 	bl	8009d94 <__malloc_unlock>
 8009cfc:	e7a1      	b.n	8009c42 <_malloc_r+0x22>
 8009cfe:	6025      	str	r5, [r4, #0]
 8009d00:	e7de      	b.n	8009cc0 <_malloc_r+0xa0>
 8009d02:	bf00      	nop
 8009d04:	20001ea0 	.word	0x20001ea0

08009d08 <_realloc_r>:
 8009d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	4614      	mov	r4, r2
 8009d10:	460e      	mov	r6, r1
 8009d12:	b921      	cbnz	r1, 8009d1e <_realloc_r+0x16>
 8009d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	4611      	mov	r1, r2
 8009d1a:	f7ff bf81 	b.w	8009c20 <_malloc_r>
 8009d1e:	b92a      	cbnz	r2, 8009d2c <_realloc_r+0x24>
 8009d20:	f7ff ff12 	bl	8009b48 <_free_r>
 8009d24:	4625      	mov	r5, r4
 8009d26:	4628      	mov	r0, r5
 8009d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2c:	f000 f838 	bl	8009da0 <_malloc_usable_size_r>
 8009d30:	4284      	cmp	r4, r0
 8009d32:	4607      	mov	r7, r0
 8009d34:	d802      	bhi.n	8009d3c <_realloc_r+0x34>
 8009d36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d3a:	d812      	bhi.n	8009d62 <_realloc_r+0x5a>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f7ff ff6e 	bl	8009c20 <_malloc_r>
 8009d44:	4605      	mov	r5, r0
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d0ed      	beq.n	8009d26 <_realloc_r+0x1e>
 8009d4a:	42bc      	cmp	r4, r7
 8009d4c:	4622      	mov	r2, r4
 8009d4e:	4631      	mov	r1, r6
 8009d50:	bf28      	it	cs
 8009d52:	463a      	movcs	r2, r7
 8009d54:	f7ff fed0 	bl	8009af8 <memcpy>
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	f7ff fef4 	bl	8009b48 <_free_r>
 8009d60:	e7e1      	b.n	8009d26 <_realloc_r+0x1e>
 8009d62:	4635      	mov	r5, r6
 8009d64:	e7df      	b.n	8009d26 <_realloc_r+0x1e>
	...

08009d68 <_sbrk_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	4d06      	ldr	r5, [pc, #24]	; (8009d84 <_sbrk_r+0x1c>)
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4604      	mov	r4, r0
 8009d70:	4608      	mov	r0, r1
 8009d72:	602b      	str	r3, [r5, #0]
 8009d74:	f7f7 ff32 	bl	8001bdc <_sbrk>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d102      	bne.n	8009d82 <_sbrk_r+0x1a>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b103      	cbz	r3, 8009d82 <_sbrk_r+0x1a>
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	20001ea8 	.word	0x20001ea8

08009d88 <__malloc_lock>:
 8009d88:	4801      	ldr	r0, [pc, #4]	; (8009d90 <__malloc_lock+0x8>)
 8009d8a:	f000 b811 	b.w	8009db0 <__retarget_lock_acquire_recursive>
 8009d8e:	bf00      	nop
 8009d90:	20001eac 	.word	0x20001eac

08009d94 <__malloc_unlock>:
 8009d94:	4801      	ldr	r0, [pc, #4]	; (8009d9c <__malloc_unlock+0x8>)
 8009d96:	f000 b80c 	b.w	8009db2 <__retarget_lock_release_recursive>
 8009d9a:	bf00      	nop
 8009d9c:	20001eac 	.word	0x20001eac

08009da0 <_malloc_usable_size_r>:
 8009da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da4:	1f18      	subs	r0, r3, #4
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bfbc      	itt	lt
 8009daa:	580b      	ldrlt	r3, [r1, r0]
 8009dac:	18c0      	addlt	r0, r0, r3
 8009dae:	4770      	bx	lr

08009db0 <__retarget_lock_acquire_recursive>:
 8009db0:	4770      	bx	lr

08009db2 <__retarget_lock_release_recursive>:
 8009db2:	4770      	bx	lr

08009db4 <pow>:
 8009db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db6:	ed2d 8b02 	vpush	{d8}
 8009dba:	eeb0 8a40 	vmov.f32	s16, s0
 8009dbe:	eef0 8a60 	vmov.f32	s17, s1
 8009dc2:	ec55 4b11 	vmov	r4, r5, d1
 8009dc6:	f000 f867 	bl	8009e98 <__ieee754_pow>
 8009dca:	4622      	mov	r2, r4
 8009dcc:	462b      	mov	r3, r5
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	ec57 6b10 	vmov	r6, r7, d0
 8009dd6:	f7f6 fea9 	bl	8000b2c <__aeabi_dcmpun>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d13b      	bne.n	8009e56 <pow+0xa2>
 8009dde:	ec51 0b18 	vmov	r0, r1, d8
 8009de2:	2200      	movs	r2, #0
 8009de4:	2300      	movs	r3, #0
 8009de6:	f7f6 fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dea:	b1b8      	cbz	r0, 8009e1c <pow+0x68>
 8009dec:	2200      	movs	r2, #0
 8009dee:	2300      	movs	r3, #0
 8009df0:	4620      	mov	r0, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 fe68 	bl	8000ac8 <__aeabi_dcmpeq>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d146      	bne.n	8009e8a <pow+0xd6>
 8009dfc:	ec45 4b10 	vmov	d0, r4, r5
 8009e00:	f000 fe63 	bl	800aaca <finite>
 8009e04:	b338      	cbz	r0, 8009e56 <pow+0xa2>
 8009e06:	2200      	movs	r2, #0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fe65 	bl	8000adc <__aeabi_dcmplt>
 8009e12:	b300      	cbz	r0, 8009e56 <pow+0xa2>
 8009e14:	f7ff fb2e 	bl	8009474 <__errno>
 8009e18:	2322      	movs	r3, #34	; 0x22
 8009e1a:	e01b      	b.n	8009e54 <pow+0xa0>
 8009e1c:	ec47 6b10 	vmov	d0, r6, r7
 8009e20:	f000 fe53 	bl	800aaca <finite>
 8009e24:	b9e0      	cbnz	r0, 8009e60 <pow+0xac>
 8009e26:	eeb0 0a48 	vmov.f32	s0, s16
 8009e2a:	eef0 0a68 	vmov.f32	s1, s17
 8009e2e:	f000 fe4c 	bl	800aaca <finite>
 8009e32:	b1a8      	cbz	r0, 8009e60 <pow+0xac>
 8009e34:	ec45 4b10 	vmov	d0, r4, r5
 8009e38:	f000 fe47 	bl	800aaca <finite>
 8009e3c:	b180      	cbz	r0, 8009e60 <pow+0xac>
 8009e3e:	4632      	mov	r2, r6
 8009e40:	463b      	mov	r3, r7
 8009e42:	4630      	mov	r0, r6
 8009e44:	4639      	mov	r1, r7
 8009e46:	f7f6 fe71 	bl	8000b2c <__aeabi_dcmpun>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d0e2      	beq.n	8009e14 <pow+0x60>
 8009e4e:	f7ff fb11 	bl	8009474 <__errno>
 8009e52:	2321      	movs	r3, #33	; 0x21
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	ecbd 8b02 	vpop	{d8}
 8009e5a:	ec47 6b10 	vmov	d0, r6, r7
 8009e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e60:	2200      	movs	r2, #0
 8009e62:	2300      	movs	r3, #0
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d0f2      	beq.n	8009e56 <pow+0xa2>
 8009e70:	eeb0 0a48 	vmov.f32	s0, s16
 8009e74:	eef0 0a68 	vmov.f32	s1, s17
 8009e78:	f000 fe27 	bl	800aaca <finite>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d0ea      	beq.n	8009e56 <pow+0xa2>
 8009e80:	ec45 4b10 	vmov	d0, r4, r5
 8009e84:	f000 fe21 	bl	800aaca <finite>
 8009e88:	e7c3      	b.n	8009e12 <pow+0x5e>
 8009e8a:	4f01      	ldr	r7, [pc, #4]	; (8009e90 <pow+0xdc>)
 8009e8c:	2600      	movs	r6, #0
 8009e8e:	e7e2      	b.n	8009e56 <pow+0xa2>
 8009e90:	3ff00000 	.word	0x3ff00000
 8009e94:	00000000 	.word	0x00000000

08009e98 <__ieee754_pow>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	ed2d 8b06 	vpush	{d8-d10}
 8009ea0:	b089      	sub	sp, #36	; 0x24
 8009ea2:	ed8d 1b00 	vstr	d1, [sp]
 8009ea6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009eaa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009eae:	ea58 0102 	orrs.w	r1, r8, r2
 8009eb2:	ec57 6b10 	vmov	r6, r7, d0
 8009eb6:	d115      	bne.n	8009ee4 <__ieee754_pow+0x4c>
 8009eb8:	19b3      	adds	r3, r6, r6
 8009eba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009ebe:	4152      	adcs	r2, r2
 8009ec0:	4299      	cmp	r1, r3
 8009ec2:	4b89      	ldr	r3, [pc, #548]	; (800a0e8 <__ieee754_pow+0x250>)
 8009ec4:	4193      	sbcs	r3, r2
 8009ec6:	f080 84d2 	bcs.w	800a86e <__ieee754_pow+0x9d6>
 8009eca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ece:	4630      	mov	r0, r6
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	f7f6 f9db 	bl	800028c <__adddf3>
 8009ed6:	ec41 0b10 	vmov	d0, r0, r1
 8009eda:	b009      	add	sp, #36	; 0x24
 8009edc:	ecbd 8b06 	vpop	{d8-d10}
 8009ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee4:	4b81      	ldr	r3, [pc, #516]	; (800a0ec <__ieee754_pow+0x254>)
 8009ee6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009eea:	429c      	cmp	r4, r3
 8009eec:	ee10 aa10 	vmov	sl, s0
 8009ef0:	463d      	mov	r5, r7
 8009ef2:	dc06      	bgt.n	8009f02 <__ieee754_pow+0x6a>
 8009ef4:	d101      	bne.n	8009efa <__ieee754_pow+0x62>
 8009ef6:	2e00      	cmp	r6, #0
 8009ef8:	d1e7      	bne.n	8009eca <__ieee754_pow+0x32>
 8009efa:	4598      	cmp	r8, r3
 8009efc:	dc01      	bgt.n	8009f02 <__ieee754_pow+0x6a>
 8009efe:	d10f      	bne.n	8009f20 <__ieee754_pow+0x88>
 8009f00:	b172      	cbz	r2, 8009f20 <__ieee754_pow+0x88>
 8009f02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009f06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009f0a:	ea55 050a 	orrs.w	r5, r5, sl
 8009f0e:	d1dc      	bne.n	8009eca <__ieee754_pow+0x32>
 8009f10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f14:	18db      	adds	r3, r3, r3
 8009f16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009f1a:	4152      	adcs	r2, r2
 8009f1c:	429d      	cmp	r5, r3
 8009f1e:	e7d0      	b.n	8009ec2 <__ieee754_pow+0x2a>
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	da3b      	bge.n	8009f9c <__ieee754_pow+0x104>
 8009f24:	4b72      	ldr	r3, [pc, #456]	; (800a0f0 <__ieee754_pow+0x258>)
 8009f26:	4598      	cmp	r8, r3
 8009f28:	dc51      	bgt.n	8009fce <__ieee754_pow+0x136>
 8009f2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009f2e:	4598      	cmp	r8, r3
 8009f30:	f340 84ac 	ble.w	800a88c <__ieee754_pow+0x9f4>
 8009f34:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009f38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f3c:	2b14      	cmp	r3, #20
 8009f3e:	dd0f      	ble.n	8009f60 <__ieee754_pow+0xc8>
 8009f40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009f44:	fa22 f103 	lsr.w	r1, r2, r3
 8009f48:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	f040 849d 	bne.w	800a88c <__ieee754_pow+0x9f4>
 8009f52:	f001 0101 	and.w	r1, r1, #1
 8009f56:	f1c1 0302 	rsb	r3, r1, #2
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	b182      	cbz	r2, 8009f80 <__ieee754_pow+0xe8>
 8009f5e:	e05f      	b.n	800a020 <__ieee754_pow+0x188>
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	d15b      	bne.n	800a01c <__ieee754_pow+0x184>
 8009f64:	f1c3 0314 	rsb	r3, r3, #20
 8009f68:	fa48 f103 	asr.w	r1, r8, r3
 8009f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f70:	4543      	cmp	r3, r8
 8009f72:	f040 8488 	bne.w	800a886 <__ieee754_pow+0x9ee>
 8009f76:	f001 0101 	and.w	r1, r1, #1
 8009f7a:	f1c1 0302 	rsb	r3, r1, #2
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	4b5c      	ldr	r3, [pc, #368]	; (800a0f4 <__ieee754_pow+0x25c>)
 8009f82:	4598      	cmp	r8, r3
 8009f84:	d132      	bne.n	8009fec <__ieee754_pow+0x154>
 8009f86:	f1b9 0f00 	cmp.w	r9, #0
 8009f8a:	f280 8478 	bge.w	800a87e <__ieee754_pow+0x9e6>
 8009f8e:	4959      	ldr	r1, [pc, #356]	; (800a0f4 <__ieee754_pow+0x25c>)
 8009f90:	4632      	mov	r2, r6
 8009f92:	463b      	mov	r3, r7
 8009f94:	2000      	movs	r0, #0
 8009f96:	f7f6 fc59 	bl	800084c <__aeabi_ddiv>
 8009f9a:	e79c      	b.n	8009ed6 <__ieee754_pow+0x3e>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	d13d      	bne.n	800a020 <__ieee754_pow+0x188>
 8009fa4:	4b51      	ldr	r3, [pc, #324]	; (800a0ec <__ieee754_pow+0x254>)
 8009fa6:	4598      	cmp	r8, r3
 8009fa8:	d1ea      	bne.n	8009f80 <__ieee754_pow+0xe8>
 8009faa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009fae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009fb2:	ea53 030a 	orrs.w	r3, r3, sl
 8009fb6:	f000 845a 	beq.w	800a86e <__ieee754_pow+0x9d6>
 8009fba:	4b4f      	ldr	r3, [pc, #316]	; (800a0f8 <__ieee754_pow+0x260>)
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	dd08      	ble.n	8009fd2 <__ieee754_pow+0x13a>
 8009fc0:	f1b9 0f00 	cmp.w	r9, #0
 8009fc4:	f2c0 8457 	blt.w	800a876 <__ieee754_pow+0x9de>
 8009fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fcc:	e783      	b.n	8009ed6 <__ieee754_pow+0x3e>
 8009fce:	2302      	movs	r3, #2
 8009fd0:	e7e5      	b.n	8009f9e <__ieee754_pow+0x106>
 8009fd2:	f1b9 0f00 	cmp.w	r9, #0
 8009fd6:	f04f 0000 	mov.w	r0, #0
 8009fda:	f04f 0100 	mov.w	r1, #0
 8009fde:	f6bf af7a 	bge.w	8009ed6 <__ieee754_pow+0x3e>
 8009fe2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009fe6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009fea:	e774      	b.n	8009ed6 <__ieee754_pow+0x3e>
 8009fec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009ff0:	d106      	bne.n	800a000 <__ieee754_pow+0x168>
 8009ff2:	4632      	mov	r2, r6
 8009ff4:	463b      	mov	r3, r7
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	f7f6 fafd 	bl	80005f8 <__aeabi_dmul>
 8009ffe:	e76a      	b.n	8009ed6 <__ieee754_pow+0x3e>
 800a000:	4b3e      	ldr	r3, [pc, #248]	; (800a0fc <__ieee754_pow+0x264>)
 800a002:	4599      	cmp	r9, r3
 800a004:	d10c      	bne.n	800a020 <__ieee754_pow+0x188>
 800a006:	2d00      	cmp	r5, #0
 800a008:	db0a      	blt.n	800a020 <__ieee754_pow+0x188>
 800a00a:	ec47 6b10 	vmov	d0, r6, r7
 800a00e:	b009      	add	sp, #36	; 0x24
 800a010:	ecbd 8b06 	vpop	{d8-d10}
 800a014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	f000 bc6c 	b.w	800a8f4 <__ieee754_sqrt>
 800a01c:	2300      	movs	r3, #0
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	ec47 6b10 	vmov	d0, r6, r7
 800a024:	f000 fd48 	bl	800aab8 <fabs>
 800a028:	ec51 0b10 	vmov	r0, r1, d0
 800a02c:	f1ba 0f00 	cmp.w	sl, #0
 800a030:	d129      	bne.n	800a086 <__ieee754_pow+0x1ee>
 800a032:	b124      	cbz	r4, 800a03e <__ieee754_pow+0x1a6>
 800a034:	4b2f      	ldr	r3, [pc, #188]	; (800a0f4 <__ieee754_pow+0x25c>)
 800a036:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d123      	bne.n	800a086 <__ieee754_pow+0x1ee>
 800a03e:	f1b9 0f00 	cmp.w	r9, #0
 800a042:	da05      	bge.n	800a050 <__ieee754_pow+0x1b8>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	2000      	movs	r0, #0
 800a04a:	492a      	ldr	r1, [pc, #168]	; (800a0f4 <__ieee754_pow+0x25c>)
 800a04c:	f7f6 fbfe 	bl	800084c <__aeabi_ddiv>
 800a050:	2d00      	cmp	r5, #0
 800a052:	f6bf af40 	bge.w	8009ed6 <__ieee754_pow+0x3e>
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a05c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a060:	4323      	orrs	r3, r4
 800a062:	d108      	bne.n	800a076 <__ieee754_pow+0x1de>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4610      	mov	r0, r2
 800a06a:	4619      	mov	r1, r3
 800a06c:	f7f6 f90c 	bl	8000288 <__aeabi_dsub>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	e78f      	b.n	8009f96 <__ieee754_pow+0xfe>
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	f47f af2c 	bne.w	8009ed6 <__ieee754_pow+0x3e>
 800a07e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a082:	4619      	mov	r1, r3
 800a084:	e727      	b.n	8009ed6 <__ieee754_pow+0x3e>
 800a086:	0feb      	lsrs	r3, r5, #31
 800a088:	3b01      	subs	r3, #1
 800a08a:	9306      	str	r3, [sp, #24]
 800a08c:	9a06      	ldr	r2, [sp, #24]
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	d102      	bne.n	800a09a <__ieee754_pow+0x202>
 800a094:	4632      	mov	r2, r6
 800a096:	463b      	mov	r3, r7
 800a098:	e7e6      	b.n	800a068 <__ieee754_pow+0x1d0>
 800a09a:	4b19      	ldr	r3, [pc, #100]	; (800a100 <__ieee754_pow+0x268>)
 800a09c:	4598      	cmp	r8, r3
 800a09e:	f340 80fb 	ble.w	800a298 <__ieee754_pow+0x400>
 800a0a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a0a6:	4598      	cmp	r8, r3
 800a0a8:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <__ieee754_pow+0x260>)
 800a0aa:	dd0c      	ble.n	800a0c6 <__ieee754_pow+0x22e>
 800a0ac:	429c      	cmp	r4, r3
 800a0ae:	dc0f      	bgt.n	800a0d0 <__ieee754_pow+0x238>
 800a0b0:	f1b9 0f00 	cmp.w	r9, #0
 800a0b4:	da0f      	bge.n	800a0d6 <__ieee754_pow+0x23e>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	b009      	add	sp, #36	; 0x24
 800a0ba:	ecbd 8b06 	vpop	{d8-d10}
 800a0be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c2:	f000 bcf0 	b.w	800aaa6 <__math_oflow>
 800a0c6:	429c      	cmp	r4, r3
 800a0c8:	dbf2      	blt.n	800a0b0 <__ieee754_pow+0x218>
 800a0ca:	4b0a      	ldr	r3, [pc, #40]	; (800a0f4 <__ieee754_pow+0x25c>)
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	dd19      	ble.n	800a104 <__ieee754_pow+0x26c>
 800a0d0:	f1b9 0f00 	cmp.w	r9, #0
 800a0d4:	dcef      	bgt.n	800a0b6 <__ieee754_pow+0x21e>
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	b009      	add	sp, #36	; 0x24
 800a0da:	ecbd 8b06 	vpop	{d8-d10}
 800a0de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e2:	f000 bcd7 	b.w	800aa94 <__math_uflow>
 800a0e6:	bf00      	nop
 800a0e8:	fff00000 	.word	0xfff00000
 800a0ec:	7ff00000 	.word	0x7ff00000
 800a0f0:	433fffff 	.word	0x433fffff
 800a0f4:	3ff00000 	.word	0x3ff00000
 800a0f8:	3fefffff 	.word	0x3fefffff
 800a0fc:	3fe00000 	.word	0x3fe00000
 800a100:	41e00000 	.word	0x41e00000
 800a104:	4b60      	ldr	r3, [pc, #384]	; (800a288 <__ieee754_pow+0x3f0>)
 800a106:	2200      	movs	r2, #0
 800a108:	f7f6 f8be 	bl	8000288 <__aeabi_dsub>
 800a10c:	a354      	add	r3, pc, #336	; (adr r3, 800a260 <__ieee754_pow+0x3c8>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	4604      	mov	r4, r0
 800a114:	460d      	mov	r5, r1
 800a116:	f7f6 fa6f 	bl	80005f8 <__aeabi_dmul>
 800a11a:	a353      	add	r3, pc, #332	; (adr r3, 800a268 <__ieee754_pow+0x3d0>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	4606      	mov	r6, r0
 800a122:	460f      	mov	r7, r1
 800a124:	4620      	mov	r0, r4
 800a126:	4629      	mov	r1, r5
 800a128:	f7f6 fa66 	bl	80005f8 <__aeabi_dmul>
 800a12c:	4b57      	ldr	r3, [pc, #348]	; (800a28c <__ieee754_pow+0x3f4>)
 800a12e:	4682      	mov	sl, r0
 800a130:	468b      	mov	fp, r1
 800a132:	2200      	movs	r2, #0
 800a134:	4620      	mov	r0, r4
 800a136:	4629      	mov	r1, r5
 800a138:	f7f6 fa5e 	bl	80005f8 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	a14b      	add	r1, pc, #300	; (adr r1, 800a270 <__ieee754_pow+0x3d8>)
 800a142:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a146:	f7f6 f89f 	bl	8000288 <__aeabi_dsub>
 800a14a:	4622      	mov	r2, r4
 800a14c:	462b      	mov	r3, r5
 800a14e:	f7f6 fa53 	bl	80005f8 <__aeabi_dmul>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	2000      	movs	r0, #0
 800a158:	494d      	ldr	r1, [pc, #308]	; (800a290 <__ieee754_pow+0x3f8>)
 800a15a:	f7f6 f895 	bl	8000288 <__aeabi_dsub>
 800a15e:	4622      	mov	r2, r4
 800a160:	4680      	mov	r8, r0
 800a162:	4689      	mov	r9, r1
 800a164:	462b      	mov	r3, r5
 800a166:	4620      	mov	r0, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	f7f6 fa45 	bl	80005f8 <__aeabi_dmul>
 800a16e:	4602      	mov	r2, r0
 800a170:	460b      	mov	r3, r1
 800a172:	4640      	mov	r0, r8
 800a174:	4649      	mov	r1, r9
 800a176:	f7f6 fa3f 	bl	80005f8 <__aeabi_dmul>
 800a17a:	a33f      	add	r3, pc, #252	; (adr r3, 800a278 <__ieee754_pow+0x3e0>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f6 fa3a 	bl	80005f8 <__aeabi_dmul>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4650      	mov	r0, sl
 800a18a:	4659      	mov	r1, fp
 800a18c:	f7f6 f87c 	bl	8000288 <__aeabi_dsub>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	4680      	mov	r8, r0
 800a196:	4689      	mov	r9, r1
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f6 f876 	bl	800028c <__adddf3>
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	4632      	mov	r2, r6
 800a1a4:	463b      	mov	r3, r7
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	460d      	mov	r5, r1
 800a1aa:	f7f6 f86d 	bl	8000288 <__aeabi_dsub>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4640      	mov	r0, r8
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	f7f6 f867 	bl	8000288 <__aeabi_dsub>
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	9a06      	ldr	r2, [sp, #24]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	4682      	mov	sl, r0
 800a1c4:	468b      	mov	fp, r1
 800a1c6:	f040 81e7 	bne.w	800a598 <__ieee754_pow+0x700>
 800a1ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a280 <__ieee754_pow+0x3e8>
 800a1ce:	eeb0 8a47 	vmov.f32	s16, s14
 800a1d2:	eef0 8a67 	vmov.f32	s17, s15
 800a1d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1da:	2600      	movs	r6, #0
 800a1dc:	4632      	mov	r2, r6
 800a1de:	463b      	mov	r3, r7
 800a1e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1e4:	f7f6 f850 	bl	8000288 <__aeabi_dsub>
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	462b      	mov	r3, r5
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1f4:	4680      	mov	r8, r0
 800a1f6:	4689      	mov	r9, r1
 800a1f8:	4650      	mov	r0, sl
 800a1fa:	4659      	mov	r1, fp
 800a1fc:	f7f6 f9fc 	bl	80005f8 <__aeabi_dmul>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	f7f6 f840 	bl	800028c <__adddf3>
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	4680      	mov	r8, r0
 800a212:	4689      	mov	r9, r1
 800a214:	4620      	mov	r0, r4
 800a216:	4629      	mov	r1, r5
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	460b      	mov	r3, r1
 800a21e:	4604      	mov	r4, r0
 800a220:	460d      	mov	r5, r1
 800a222:	4602      	mov	r2, r0
 800a224:	4649      	mov	r1, r9
 800a226:	4640      	mov	r0, r8
 800a228:	f7f6 f830 	bl	800028c <__adddf3>
 800a22c:	4b19      	ldr	r3, [pc, #100]	; (800a294 <__ieee754_pow+0x3fc>)
 800a22e:	4299      	cmp	r1, r3
 800a230:	ec45 4b19 	vmov	d9, r4, r5
 800a234:	4606      	mov	r6, r0
 800a236:	460f      	mov	r7, r1
 800a238:	468b      	mov	fp, r1
 800a23a:	f340 82f1 	ble.w	800a820 <__ieee754_pow+0x988>
 800a23e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a242:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a246:	4303      	orrs	r3, r0
 800a248:	f000 81e4 	beq.w	800a614 <__ieee754_pow+0x77c>
 800a24c:	ec51 0b18 	vmov	r0, r1, d8
 800a250:	2200      	movs	r2, #0
 800a252:	2300      	movs	r3, #0
 800a254:	f7f6 fc42 	bl	8000adc <__aeabi_dcmplt>
 800a258:	3800      	subs	r0, #0
 800a25a:	bf18      	it	ne
 800a25c:	2001      	movne	r0, #1
 800a25e:	e72b      	b.n	800a0b8 <__ieee754_pow+0x220>
 800a260:	60000000 	.word	0x60000000
 800a264:	3ff71547 	.word	0x3ff71547
 800a268:	f85ddf44 	.word	0xf85ddf44
 800a26c:	3e54ae0b 	.word	0x3e54ae0b
 800a270:	55555555 	.word	0x55555555
 800a274:	3fd55555 	.word	0x3fd55555
 800a278:	652b82fe 	.word	0x652b82fe
 800a27c:	3ff71547 	.word	0x3ff71547
 800a280:	00000000 	.word	0x00000000
 800a284:	bff00000 	.word	0xbff00000
 800a288:	3ff00000 	.word	0x3ff00000
 800a28c:	3fd00000 	.word	0x3fd00000
 800a290:	3fe00000 	.word	0x3fe00000
 800a294:	408fffff 	.word	0x408fffff
 800a298:	4bd5      	ldr	r3, [pc, #852]	; (800a5f0 <__ieee754_pow+0x758>)
 800a29a:	402b      	ands	r3, r5
 800a29c:	2200      	movs	r2, #0
 800a29e:	b92b      	cbnz	r3, 800a2ac <__ieee754_pow+0x414>
 800a2a0:	4bd4      	ldr	r3, [pc, #848]	; (800a5f4 <__ieee754_pow+0x75c>)
 800a2a2:	f7f6 f9a9 	bl	80005f8 <__aeabi_dmul>
 800a2a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	1523      	asrs	r3, r4, #20
 800a2ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a2b2:	4413      	add	r3, r2
 800a2b4:	9305      	str	r3, [sp, #20]
 800a2b6:	4bd0      	ldr	r3, [pc, #832]	; (800a5f8 <__ieee754_pow+0x760>)
 800a2b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a2bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a2c0:	429c      	cmp	r4, r3
 800a2c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a2c6:	dd08      	ble.n	800a2da <__ieee754_pow+0x442>
 800a2c8:	4bcc      	ldr	r3, [pc, #816]	; (800a5fc <__ieee754_pow+0x764>)
 800a2ca:	429c      	cmp	r4, r3
 800a2cc:	f340 8162 	ble.w	800a594 <__ieee754_pow+0x6fc>
 800a2d0:	9b05      	ldr	r3, [sp, #20]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	9305      	str	r3, [sp, #20]
 800a2d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a2da:	2400      	movs	r4, #0
 800a2dc:	00e3      	lsls	r3, r4, #3
 800a2de:	9307      	str	r3, [sp, #28]
 800a2e0:	4bc7      	ldr	r3, [pc, #796]	; (800a600 <__ieee754_pow+0x768>)
 800a2e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2e6:	ed93 7b00 	vldr	d7, [r3]
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	ec53 2b17 	vmov	r2, r3, d7
 800a2f0:	eeb0 9a47 	vmov.f32	s18, s14
 800a2f4:	eef0 9a67 	vmov.f32	s19, s15
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	f7f5 ffc5 	bl	8000288 <__aeabi_dsub>
 800a2fe:	4652      	mov	r2, sl
 800a300:	4606      	mov	r6, r0
 800a302:	460f      	mov	r7, r1
 800a304:	462b      	mov	r3, r5
 800a306:	ec51 0b19 	vmov	r0, r1, d9
 800a30a:	f7f5 ffbf 	bl	800028c <__adddf3>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	2000      	movs	r0, #0
 800a314:	49bb      	ldr	r1, [pc, #748]	; (800a604 <__ieee754_pow+0x76c>)
 800a316:	f7f6 fa99 	bl	800084c <__aeabi_ddiv>
 800a31a:	ec41 0b1a 	vmov	d10, r0, r1
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	4630      	mov	r0, r6
 800a324:	4639      	mov	r1, r7
 800a326:	f7f6 f967 	bl	80005f8 <__aeabi_dmul>
 800a32a:	2300      	movs	r3, #0
 800a32c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a330:	9302      	str	r3, [sp, #8]
 800a332:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a336:	46ab      	mov	fp, r5
 800a338:	106d      	asrs	r5, r5, #1
 800a33a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a33e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a342:	ec41 0b18 	vmov	d8, r0, r1
 800a346:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a34a:	2200      	movs	r2, #0
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	4614      	mov	r4, r2
 800a352:	461d      	mov	r5, r3
 800a354:	f7f6 f950 	bl	80005f8 <__aeabi_dmul>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	f7f5 ff92 	bl	8000288 <__aeabi_dsub>
 800a364:	ec53 2b19 	vmov	r2, r3, d9
 800a368:	4606      	mov	r6, r0
 800a36a:	460f      	mov	r7, r1
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f5 ff8a 	bl	8000288 <__aeabi_dsub>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4650      	mov	r0, sl
 800a37a:	4659      	mov	r1, fp
 800a37c:	f7f5 ff84 	bl	8000288 <__aeabi_dsub>
 800a380:	4642      	mov	r2, r8
 800a382:	464b      	mov	r3, r9
 800a384:	f7f6 f938 	bl	80005f8 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f5 ff7a 	bl	8000288 <__aeabi_dsub>
 800a394:	ec53 2b1a 	vmov	r2, r3, d10
 800a398:	f7f6 f92e 	bl	80005f8 <__aeabi_dmul>
 800a39c:	ec53 2b18 	vmov	r2, r3, d8
 800a3a0:	ec41 0b19 	vmov	d9, r0, r1
 800a3a4:	ec51 0b18 	vmov	r0, r1, d8
 800a3a8:	f7f6 f926 	bl	80005f8 <__aeabi_dmul>
 800a3ac:	a37c      	add	r3, pc, #496	; (adr r3, 800a5a0 <__ieee754_pow+0x708>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	460d      	mov	r5, r1
 800a3b6:	f7f6 f91f 	bl	80005f8 <__aeabi_dmul>
 800a3ba:	a37b      	add	r3, pc, #492	; (adr r3, 800a5a8 <__ieee754_pow+0x710>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	f7f5 ff64 	bl	800028c <__adddf3>
 800a3c4:	4622      	mov	r2, r4
 800a3c6:	462b      	mov	r3, r5
 800a3c8:	f7f6 f916 	bl	80005f8 <__aeabi_dmul>
 800a3cc:	a378      	add	r3, pc, #480	; (adr r3, 800a5b0 <__ieee754_pow+0x718>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f7f5 ff5b 	bl	800028c <__adddf3>
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	462b      	mov	r3, r5
 800a3da:	f7f6 f90d 	bl	80005f8 <__aeabi_dmul>
 800a3de:	a376      	add	r3, pc, #472	; (adr r3, 800a5b8 <__ieee754_pow+0x720>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f5 ff52 	bl	800028c <__adddf3>
 800a3e8:	4622      	mov	r2, r4
 800a3ea:	462b      	mov	r3, r5
 800a3ec:	f7f6 f904 	bl	80005f8 <__aeabi_dmul>
 800a3f0:	a373      	add	r3, pc, #460	; (adr r3, 800a5c0 <__ieee754_pow+0x728>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f5 ff49 	bl	800028c <__adddf3>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	f7f6 f8fb 	bl	80005f8 <__aeabi_dmul>
 800a402:	a371      	add	r3, pc, #452	; (adr r3, 800a5c8 <__ieee754_pow+0x730>)
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	f7f5 ff40 	bl	800028c <__adddf3>
 800a40c:	4622      	mov	r2, r4
 800a40e:	4606      	mov	r6, r0
 800a410:	460f      	mov	r7, r1
 800a412:	462b      	mov	r3, r5
 800a414:	4620      	mov	r0, r4
 800a416:	4629      	mov	r1, r5
 800a418:	f7f6 f8ee 	bl	80005f8 <__aeabi_dmul>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f6 f8e8 	bl	80005f8 <__aeabi_dmul>
 800a428:	4642      	mov	r2, r8
 800a42a:	4604      	mov	r4, r0
 800a42c:	460d      	mov	r5, r1
 800a42e:	464b      	mov	r3, r9
 800a430:	ec51 0b18 	vmov	r0, r1, d8
 800a434:	f7f5 ff2a 	bl	800028c <__adddf3>
 800a438:	ec53 2b19 	vmov	r2, r3, d9
 800a43c:	f7f6 f8dc 	bl	80005f8 <__aeabi_dmul>
 800a440:	4622      	mov	r2, r4
 800a442:	462b      	mov	r3, r5
 800a444:	f7f5 ff22 	bl	800028c <__adddf3>
 800a448:	4642      	mov	r2, r8
 800a44a:	4682      	mov	sl, r0
 800a44c:	468b      	mov	fp, r1
 800a44e:	464b      	mov	r3, r9
 800a450:	4640      	mov	r0, r8
 800a452:	4649      	mov	r1, r9
 800a454:	f7f6 f8d0 	bl	80005f8 <__aeabi_dmul>
 800a458:	4b6b      	ldr	r3, [pc, #428]	; (800a608 <__ieee754_pow+0x770>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	f7f5 ff14 	bl	800028c <__adddf3>
 800a464:	4652      	mov	r2, sl
 800a466:	465b      	mov	r3, fp
 800a468:	f7f5 ff10 	bl	800028c <__adddf3>
 800a46c:	2000      	movs	r0, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	460d      	mov	r5, r1
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4640      	mov	r0, r8
 800a478:	4649      	mov	r1, r9
 800a47a:	f7f6 f8bd 	bl	80005f8 <__aeabi_dmul>
 800a47e:	4b62      	ldr	r3, [pc, #392]	; (800a608 <__ieee754_pow+0x770>)
 800a480:	4680      	mov	r8, r0
 800a482:	4689      	mov	r9, r1
 800a484:	2200      	movs	r2, #0
 800a486:	4620      	mov	r0, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	f7f5 fefd 	bl	8000288 <__aeabi_dsub>
 800a48e:	4632      	mov	r2, r6
 800a490:	463b      	mov	r3, r7
 800a492:	f7f5 fef9 	bl	8000288 <__aeabi_dsub>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4650      	mov	r0, sl
 800a49c:	4659      	mov	r1, fp
 800a49e:	f7f5 fef3 	bl	8000288 <__aeabi_dsub>
 800a4a2:	ec53 2b18 	vmov	r2, r3, d8
 800a4a6:	f7f6 f8a7 	bl	80005f8 <__aeabi_dmul>
 800a4aa:	4622      	mov	r2, r4
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	460f      	mov	r7, r1
 800a4b0:	462b      	mov	r3, r5
 800a4b2:	ec51 0b19 	vmov	r0, r1, d9
 800a4b6:	f7f6 f89f 	bl	80005f8 <__aeabi_dmul>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4630      	mov	r0, r6
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	f7f5 fee3 	bl	800028c <__adddf3>
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	460f      	mov	r7, r1
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	f7f5 fedb 	bl	800028c <__adddf3>
 800a4d6:	a33e      	add	r3, pc, #248	; (adr r3, 800a5d0 <__ieee754_pow+0x738>)
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	2000      	movs	r0, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	f7f6 f889 	bl	80005f8 <__aeabi_dmul>
 800a4e6:	4642      	mov	r2, r8
 800a4e8:	ec41 0b18 	vmov	d8, r0, r1
 800a4ec:	464b      	mov	r3, r9
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f5 fec9 	bl	8000288 <__aeabi_dsub>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	f7f5 fec3 	bl	8000288 <__aeabi_dsub>
 800a502:	a335      	add	r3, pc, #212	; (adr r3, 800a5d8 <__ieee754_pow+0x740>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f6 f876 	bl	80005f8 <__aeabi_dmul>
 800a50c:	a334      	add	r3, pc, #208	; (adr r3, 800a5e0 <__ieee754_pow+0x748>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	4620      	mov	r0, r4
 800a518:	4629      	mov	r1, r5
 800a51a:	f7f6 f86d 	bl	80005f8 <__aeabi_dmul>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	4630      	mov	r0, r6
 800a524:	4639      	mov	r1, r7
 800a526:	f7f5 feb1 	bl	800028c <__adddf3>
 800a52a:	9a07      	ldr	r2, [sp, #28]
 800a52c:	4b37      	ldr	r3, [pc, #220]	; (800a60c <__ieee754_pow+0x774>)
 800a52e:	4413      	add	r3, r2
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f5 feaa 	bl	800028c <__adddf3>
 800a538:	4682      	mov	sl, r0
 800a53a:	9805      	ldr	r0, [sp, #20]
 800a53c:	468b      	mov	fp, r1
 800a53e:	f7f5 fff1 	bl	8000524 <__aeabi_i2d>
 800a542:	9a07      	ldr	r2, [sp, #28]
 800a544:	4b32      	ldr	r3, [pc, #200]	; (800a610 <__ieee754_pow+0x778>)
 800a546:	4413      	add	r3, r2
 800a548:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a54c:	4606      	mov	r6, r0
 800a54e:	460f      	mov	r7, r1
 800a550:	4652      	mov	r2, sl
 800a552:	465b      	mov	r3, fp
 800a554:	ec51 0b18 	vmov	r0, r1, d8
 800a558:	f7f5 fe98 	bl	800028c <__adddf3>
 800a55c:	4642      	mov	r2, r8
 800a55e:	464b      	mov	r3, r9
 800a560:	f7f5 fe94 	bl	800028c <__adddf3>
 800a564:	4632      	mov	r2, r6
 800a566:	463b      	mov	r3, r7
 800a568:	f7f5 fe90 	bl	800028c <__adddf3>
 800a56c:	2000      	movs	r0, #0
 800a56e:	4632      	mov	r2, r6
 800a570:	463b      	mov	r3, r7
 800a572:	4604      	mov	r4, r0
 800a574:	460d      	mov	r5, r1
 800a576:	f7f5 fe87 	bl	8000288 <__aeabi_dsub>
 800a57a:	4642      	mov	r2, r8
 800a57c:	464b      	mov	r3, r9
 800a57e:	f7f5 fe83 	bl	8000288 <__aeabi_dsub>
 800a582:	ec53 2b18 	vmov	r2, r3, d8
 800a586:	f7f5 fe7f 	bl	8000288 <__aeabi_dsub>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4650      	mov	r0, sl
 800a590:	4659      	mov	r1, fp
 800a592:	e610      	b.n	800a1b6 <__ieee754_pow+0x31e>
 800a594:	2401      	movs	r4, #1
 800a596:	e6a1      	b.n	800a2dc <__ieee754_pow+0x444>
 800a598:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a5e8 <__ieee754_pow+0x750>
 800a59c:	e617      	b.n	800a1ce <__ieee754_pow+0x336>
 800a59e:	bf00      	nop
 800a5a0:	4a454eef 	.word	0x4a454eef
 800a5a4:	3fca7e28 	.word	0x3fca7e28
 800a5a8:	93c9db65 	.word	0x93c9db65
 800a5ac:	3fcd864a 	.word	0x3fcd864a
 800a5b0:	a91d4101 	.word	0xa91d4101
 800a5b4:	3fd17460 	.word	0x3fd17460
 800a5b8:	518f264d 	.word	0x518f264d
 800a5bc:	3fd55555 	.word	0x3fd55555
 800a5c0:	db6fabff 	.word	0xdb6fabff
 800a5c4:	3fdb6db6 	.word	0x3fdb6db6
 800a5c8:	33333303 	.word	0x33333303
 800a5cc:	3fe33333 	.word	0x3fe33333
 800a5d0:	e0000000 	.word	0xe0000000
 800a5d4:	3feec709 	.word	0x3feec709
 800a5d8:	dc3a03fd 	.word	0xdc3a03fd
 800a5dc:	3feec709 	.word	0x3feec709
 800a5e0:	145b01f5 	.word	0x145b01f5
 800a5e4:	be3e2fe0 	.word	0xbe3e2fe0
 800a5e8:	00000000 	.word	0x00000000
 800a5ec:	3ff00000 	.word	0x3ff00000
 800a5f0:	7ff00000 	.word	0x7ff00000
 800a5f4:	43400000 	.word	0x43400000
 800a5f8:	0003988e 	.word	0x0003988e
 800a5fc:	000bb679 	.word	0x000bb679
 800a600:	0800acb8 	.word	0x0800acb8
 800a604:	3ff00000 	.word	0x3ff00000
 800a608:	40080000 	.word	0x40080000
 800a60c:	0800acd8 	.word	0x0800acd8
 800a610:	0800acc8 	.word	0x0800acc8
 800a614:	a3b5      	add	r3, pc, #724	; (adr r3, 800a8ec <__ieee754_pow+0xa54>)
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	4640      	mov	r0, r8
 800a61c:	4649      	mov	r1, r9
 800a61e:	f7f5 fe35 	bl	800028c <__adddf3>
 800a622:	4622      	mov	r2, r4
 800a624:	ec41 0b1a 	vmov	d10, r0, r1
 800a628:	462b      	mov	r3, r5
 800a62a:	4630      	mov	r0, r6
 800a62c:	4639      	mov	r1, r7
 800a62e:	f7f5 fe2b 	bl	8000288 <__aeabi_dsub>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	ec51 0b1a 	vmov	r0, r1, d10
 800a63a:	f7f6 fa6d 	bl	8000b18 <__aeabi_dcmpgt>
 800a63e:	2800      	cmp	r0, #0
 800a640:	f47f ae04 	bne.w	800a24c <__ieee754_pow+0x3b4>
 800a644:	4aa4      	ldr	r2, [pc, #656]	; (800a8d8 <__ieee754_pow+0xa40>)
 800a646:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a64a:	4293      	cmp	r3, r2
 800a64c:	f340 8108 	ble.w	800a860 <__ieee754_pow+0x9c8>
 800a650:	151b      	asrs	r3, r3, #20
 800a652:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a656:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a65a:	fa4a f303 	asr.w	r3, sl, r3
 800a65e:	445b      	add	r3, fp
 800a660:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a664:	4e9d      	ldr	r6, [pc, #628]	; (800a8dc <__ieee754_pow+0xa44>)
 800a666:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a66a:	4116      	asrs	r6, r2
 800a66c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a670:	2000      	movs	r0, #0
 800a672:	ea23 0106 	bic.w	r1, r3, r6
 800a676:	f1c2 0214 	rsb	r2, r2, #20
 800a67a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a67e:	fa4a fa02 	asr.w	sl, sl, r2
 800a682:	f1bb 0f00 	cmp.w	fp, #0
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4620      	mov	r0, r4
 800a68c:	4629      	mov	r1, r5
 800a68e:	bfb8      	it	lt
 800a690:	f1ca 0a00 	rsblt	sl, sl, #0
 800a694:	f7f5 fdf8 	bl	8000288 <__aeabi_dsub>
 800a698:	ec41 0b19 	vmov	d9, r0, r1
 800a69c:	4642      	mov	r2, r8
 800a69e:	464b      	mov	r3, r9
 800a6a0:	ec51 0b19 	vmov	r0, r1, d9
 800a6a4:	f7f5 fdf2 	bl	800028c <__adddf3>
 800a6a8:	a37b      	add	r3, pc, #492	; (adr r3, 800a898 <__ieee754_pow+0xa00>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	f7f5 ffa0 	bl	80005f8 <__aeabi_dmul>
 800a6b8:	ec53 2b19 	vmov	r2, r3, d9
 800a6bc:	4606      	mov	r6, r0
 800a6be:	460f      	mov	r7, r1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	f7f5 fde0 	bl	8000288 <__aeabi_dsub>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4640      	mov	r0, r8
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	f7f5 fdda 	bl	8000288 <__aeabi_dsub>
 800a6d4:	a372      	add	r3, pc, #456	; (adr r3, 800a8a0 <__ieee754_pow+0xa08>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 ff8d 	bl	80005f8 <__aeabi_dmul>
 800a6de:	a372      	add	r3, pc, #456	; (adr r3, 800a8a8 <__ieee754_pow+0xa10>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4689      	mov	r9, r1
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f7f5 ff84 	bl	80005f8 <__aeabi_dmul>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4640      	mov	r0, r8
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	f7f5 fdc8 	bl	800028c <__adddf3>
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	460d      	mov	r5, r1
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4630      	mov	r0, r6
 800a706:	4639      	mov	r1, r7
 800a708:	f7f5 fdc0 	bl	800028c <__adddf3>
 800a70c:	4632      	mov	r2, r6
 800a70e:	463b      	mov	r3, r7
 800a710:	4680      	mov	r8, r0
 800a712:	4689      	mov	r9, r1
 800a714:	f7f5 fdb8 	bl	8000288 <__aeabi_dsub>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f5 fdb2 	bl	8000288 <__aeabi_dsub>
 800a724:	4642      	mov	r2, r8
 800a726:	4606      	mov	r6, r0
 800a728:	460f      	mov	r7, r1
 800a72a:	464b      	mov	r3, r9
 800a72c:	4640      	mov	r0, r8
 800a72e:	4649      	mov	r1, r9
 800a730:	f7f5 ff62 	bl	80005f8 <__aeabi_dmul>
 800a734:	a35e      	add	r3, pc, #376	; (adr r3, 800a8b0 <__ieee754_pow+0xa18>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	4604      	mov	r4, r0
 800a73c:	460d      	mov	r5, r1
 800a73e:	f7f5 ff5b 	bl	80005f8 <__aeabi_dmul>
 800a742:	a35d      	add	r3, pc, #372	; (adr r3, 800a8b8 <__ieee754_pow+0xa20>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	f7f5 fd9e 	bl	8000288 <__aeabi_dsub>
 800a74c:	4622      	mov	r2, r4
 800a74e:	462b      	mov	r3, r5
 800a750:	f7f5 ff52 	bl	80005f8 <__aeabi_dmul>
 800a754:	a35a      	add	r3, pc, #360	; (adr r3, 800a8c0 <__ieee754_pow+0xa28>)
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f7f5 fd97 	bl	800028c <__adddf3>
 800a75e:	4622      	mov	r2, r4
 800a760:	462b      	mov	r3, r5
 800a762:	f7f5 ff49 	bl	80005f8 <__aeabi_dmul>
 800a766:	a358      	add	r3, pc, #352	; (adr r3, 800a8c8 <__ieee754_pow+0xa30>)
 800a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76c:	f7f5 fd8c 	bl	8000288 <__aeabi_dsub>
 800a770:	4622      	mov	r2, r4
 800a772:	462b      	mov	r3, r5
 800a774:	f7f5 ff40 	bl	80005f8 <__aeabi_dmul>
 800a778:	a355      	add	r3, pc, #340	; (adr r3, 800a8d0 <__ieee754_pow+0xa38>)
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	f7f5 fd85 	bl	800028c <__adddf3>
 800a782:	4622      	mov	r2, r4
 800a784:	462b      	mov	r3, r5
 800a786:	f7f5 ff37 	bl	80005f8 <__aeabi_dmul>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4640      	mov	r0, r8
 800a790:	4649      	mov	r1, r9
 800a792:	f7f5 fd79 	bl	8000288 <__aeabi_dsub>
 800a796:	4604      	mov	r4, r0
 800a798:	460d      	mov	r5, r1
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	4640      	mov	r0, r8
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	f7f5 ff29 	bl	80005f8 <__aeabi_dmul>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	ec41 0b19 	vmov	d9, r0, r1
 800a7ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	f7f5 fd68 	bl	8000288 <__aeabi_dsub>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	ec51 0b19 	vmov	r0, r1, d9
 800a7c0:	f7f6 f844 	bl	800084c <__aeabi_ddiv>
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	460d      	mov	r5, r1
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	f7f5 ff12 	bl	80005f8 <__aeabi_dmul>
 800a7d4:	4632      	mov	r2, r6
 800a7d6:	463b      	mov	r3, r7
 800a7d8:	f7f5 fd58 	bl	800028c <__adddf3>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	f7f5 fd50 	bl	8000288 <__aeabi_dsub>
 800a7e8:	4642      	mov	r2, r8
 800a7ea:	464b      	mov	r3, r9
 800a7ec:	f7f5 fd4c 	bl	8000288 <__aeabi_dsub>
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	493a      	ldr	r1, [pc, #232]	; (800a8e0 <__ieee754_pow+0xa48>)
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	f7f5 fd46 	bl	8000288 <__aeabi_dsub>
 800a7fc:	ec41 0b10 	vmov	d0, r0, r1
 800a800:	ee10 3a90 	vmov	r3, s1
 800a804:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a80c:	da2b      	bge.n	800a866 <__ieee754_pow+0x9ce>
 800a80e:	4650      	mov	r0, sl
 800a810:	f000 f966 	bl	800aae0 <scalbn>
 800a814:	ec51 0b10 	vmov	r0, r1, d0
 800a818:	ec53 2b18 	vmov	r2, r3, d8
 800a81c:	f7ff bbed 	b.w	8009ffa <__ieee754_pow+0x162>
 800a820:	4b30      	ldr	r3, [pc, #192]	; (800a8e4 <__ieee754_pow+0xa4c>)
 800a822:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a826:	429e      	cmp	r6, r3
 800a828:	f77f af0c 	ble.w	800a644 <__ieee754_pow+0x7ac>
 800a82c:	4b2e      	ldr	r3, [pc, #184]	; (800a8e8 <__ieee754_pow+0xa50>)
 800a82e:	440b      	add	r3, r1
 800a830:	4303      	orrs	r3, r0
 800a832:	d009      	beq.n	800a848 <__ieee754_pow+0x9b0>
 800a834:	ec51 0b18 	vmov	r0, r1, d8
 800a838:	2200      	movs	r2, #0
 800a83a:	2300      	movs	r3, #0
 800a83c:	f7f6 f94e 	bl	8000adc <__aeabi_dcmplt>
 800a840:	3800      	subs	r0, #0
 800a842:	bf18      	it	ne
 800a844:	2001      	movne	r0, #1
 800a846:	e447      	b.n	800a0d8 <__ieee754_pow+0x240>
 800a848:	4622      	mov	r2, r4
 800a84a:	462b      	mov	r3, r5
 800a84c:	f7f5 fd1c 	bl	8000288 <__aeabi_dsub>
 800a850:	4642      	mov	r2, r8
 800a852:	464b      	mov	r3, r9
 800a854:	f7f6 f956 	bl	8000b04 <__aeabi_dcmpge>
 800a858:	2800      	cmp	r0, #0
 800a85a:	f43f aef3 	beq.w	800a644 <__ieee754_pow+0x7ac>
 800a85e:	e7e9      	b.n	800a834 <__ieee754_pow+0x99c>
 800a860:	f04f 0a00 	mov.w	sl, #0
 800a864:	e71a      	b.n	800a69c <__ieee754_pow+0x804>
 800a866:	ec51 0b10 	vmov	r0, r1, d0
 800a86a:	4619      	mov	r1, r3
 800a86c:	e7d4      	b.n	800a818 <__ieee754_pow+0x980>
 800a86e:	491c      	ldr	r1, [pc, #112]	; (800a8e0 <__ieee754_pow+0xa48>)
 800a870:	2000      	movs	r0, #0
 800a872:	f7ff bb30 	b.w	8009ed6 <__ieee754_pow+0x3e>
 800a876:	2000      	movs	r0, #0
 800a878:	2100      	movs	r1, #0
 800a87a:	f7ff bb2c 	b.w	8009ed6 <__ieee754_pow+0x3e>
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7ff bb28 	b.w	8009ed6 <__ieee754_pow+0x3e>
 800a886:	9204      	str	r2, [sp, #16]
 800a888:	f7ff bb7a 	b.w	8009f80 <__ieee754_pow+0xe8>
 800a88c:	2300      	movs	r3, #0
 800a88e:	f7ff bb64 	b.w	8009f5a <__ieee754_pow+0xc2>
 800a892:	bf00      	nop
 800a894:	f3af 8000 	nop.w
 800a898:	00000000 	.word	0x00000000
 800a89c:	3fe62e43 	.word	0x3fe62e43
 800a8a0:	fefa39ef 	.word	0xfefa39ef
 800a8a4:	3fe62e42 	.word	0x3fe62e42
 800a8a8:	0ca86c39 	.word	0x0ca86c39
 800a8ac:	be205c61 	.word	0xbe205c61
 800a8b0:	72bea4d0 	.word	0x72bea4d0
 800a8b4:	3e663769 	.word	0x3e663769
 800a8b8:	c5d26bf1 	.word	0xc5d26bf1
 800a8bc:	3ebbbd41 	.word	0x3ebbbd41
 800a8c0:	af25de2c 	.word	0xaf25de2c
 800a8c4:	3f11566a 	.word	0x3f11566a
 800a8c8:	16bebd93 	.word	0x16bebd93
 800a8cc:	3f66c16c 	.word	0x3f66c16c
 800a8d0:	5555553e 	.word	0x5555553e
 800a8d4:	3fc55555 	.word	0x3fc55555
 800a8d8:	3fe00000 	.word	0x3fe00000
 800a8dc:	000fffff 	.word	0x000fffff
 800a8e0:	3ff00000 	.word	0x3ff00000
 800a8e4:	4090cbff 	.word	0x4090cbff
 800a8e8:	3f6f3400 	.word	0x3f6f3400
 800a8ec:	652b82fe 	.word	0x652b82fe
 800a8f0:	3c971547 	.word	0x3c971547

0800a8f4 <__ieee754_sqrt>:
 800a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f8:	ec55 4b10 	vmov	r4, r5, d0
 800a8fc:	4e55      	ldr	r6, [pc, #340]	; (800aa54 <__ieee754_sqrt+0x160>)
 800a8fe:	43ae      	bics	r6, r5
 800a900:	ee10 0a10 	vmov	r0, s0
 800a904:	ee10 3a10 	vmov	r3, s0
 800a908:	462a      	mov	r2, r5
 800a90a:	4629      	mov	r1, r5
 800a90c:	d110      	bne.n	800a930 <__ieee754_sqrt+0x3c>
 800a90e:	ee10 2a10 	vmov	r2, s0
 800a912:	462b      	mov	r3, r5
 800a914:	f7f5 fe70 	bl	80005f8 <__aeabi_dmul>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4620      	mov	r0, r4
 800a91e:	4629      	mov	r1, r5
 800a920:	f7f5 fcb4 	bl	800028c <__adddf3>
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	ec45 4b10 	vmov	d0, r4, r5
 800a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a930:	2d00      	cmp	r5, #0
 800a932:	dc10      	bgt.n	800a956 <__ieee754_sqrt+0x62>
 800a934:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a938:	4330      	orrs	r0, r6
 800a93a:	d0f5      	beq.n	800a928 <__ieee754_sqrt+0x34>
 800a93c:	b15d      	cbz	r5, 800a956 <__ieee754_sqrt+0x62>
 800a93e:	ee10 2a10 	vmov	r2, s0
 800a942:	462b      	mov	r3, r5
 800a944:	ee10 0a10 	vmov	r0, s0
 800a948:	f7f5 fc9e 	bl	8000288 <__aeabi_dsub>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	f7f5 ff7c 	bl	800084c <__aeabi_ddiv>
 800a954:	e7e6      	b.n	800a924 <__ieee754_sqrt+0x30>
 800a956:	1512      	asrs	r2, r2, #20
 800a958:	d074      	beq.n	800aa44 <__ieee754_sqrt+0x150>
 800a95a:	07d4      	lsls	r4, r2, #31
 800a95c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a960:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a968:	bf5e      	ittt	pl
 800a96a:	0fda      	lsrpl	r2, r3, #31
 800a96c:	005b      	lslpl	r3, r3, #1
 800a96e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a972:	2400      	movs	r4, #0
 800a974:	0fda      	lsrs	r2, r3, #31
 800a976:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a97a:	107f      	asrs	r7, r7, #1
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	2516      	movs	r5, #22
 800a980:	4620      	mov	r0, r4
 800a982:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a986:	1886      	adds	r6, r0, r2
 800a988:	428e      	cmp	r6, r1
 800a98a:	bfde      	ittt	le
 800a98c:	1b89      	suble	r1, r1, r6
 800a98e:	18b0      	addle	r0, r6, r2
 800a990:	18a4      	addle	r4, r4, r2
 800a992:	0049      	lsls	r1, r1, #1
 800a994:	3d01      	subs	r5, #1
 800a996:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a99a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a99e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9a2:	d1f0      	bne.n	800a986 <__ieee754_sqrt+0x92>
 800a9a4:	462a      	mov	r2, r5
 800a9a6:	f04f 0e20 	mov.w	lr, #32
 800a9aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a9ae:	4281      	cmp	r1, r0
 800a9b0:	eb06 0c05 	add.w	ip, r6, r5
 800a9b4:	dc02      	bgt.n	800a9bc <__ieee754_sqrt+0xc8>
 800a9b6:	d113      	bne.n	800a9e0 <__ieee754_sqrt+0xec>
 800a9b8:	459c      	cmp	ip, r3
 800a9ba:	d811      	bhi.n	800a9e0 <__ieee754_sqrt+0xec>
 800a9bc:	f1bc 0f00 	cmp.w	ip, #0
 800a9c0:	eb0c 0506 	add.w	r5, ip, r6
 800a9c4:	da43      	bge.n	800aa4e <__ieee754_sqrt+0x15a>
 800a9c6:	2d00      	cmp	r5, #0
 800a9c8:	db41      	blt.n	800aa4e <__ieee754_sqrt+0x15a>
 800a9ca:	f100 0801 	add.w	r8, r0, #1
 800a9ce:	1a09      	subs	r1, r1, r0
 800a9d0:	459c      	cmp	ip, r3
 800a9d2:	bf88      	it	hi
 800a9d4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a9d8:	eba3 030c 	sub.w	r3, r3, ip
 800a9dc:	4432      	add	r2, r6
 800a9de:	4640      	mov	r0, r8
 800a9e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a9e4:	f1be 0e01 	subs.w	lr, lr, #1
 800a9e8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a9ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a9f4:	d1db      	bne.n	800a9ae <__ieee754_sqrt+0xba>
 800a9f6:	430b      	orrs	r3, r1
 800a9f8:	d006      	beq.n	800aa08 <__ieee754_sqrt+0x114>
 800a9fa:	1c50      	adds	r0, r2, #1
 800a9fc:	bf13      	iteet	ne
 800a9fe:	3201      	addne	r2, #1
 800aa00:	3401      	addeq	r4, #1
 800aa02:	4672      	moveq	r2, lr
 800aa04:	f022 0201 	bicne.w	r2, r2, #1
 800aa08:	1063      	asrs	r3, r4, #1
 800aa0a:	0852      	lsrs	r2, r2, #1
 800aa0c:	07e1      	lsls	r1, r4, #31
 800aa0e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aa12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aa16:	bf48      	it	mi
 800aa18:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aa1c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aa20:	4614      	mov	r4, r2
 800aa22:	e781      	b.n	800a928 <__ieee754_sqrt+0x34>
 800aa24:	0ad9      	lsrs	r1, r3, #11
 800aa26:	3815      	subs	r0, #21
 800aa28:	055b      	lsls	r3, r3, #21
 800aa2a:	2900      	cmp	r1, #0
 800aa2c:	d0fa      	beq.n	800aa24 <__ieee754_sqrt+0x130>
 800aa2e:	02cd      	lsls	r5, r1, #11
 800aa30:	d50a      	bpl.n	800aa48 <__ieee754_sqrt+0x154>
 800aa32:	f1c2 0420 	rsb	r4, r2, #32
 800aa36:	fa23 f404 	lsr.w	r4, r3, r4
 800aa3a:	1e55      	subs	r5, r2, #1
 800aa3c:	4093      	lsls	r3, r2
 800aa3e:	4321      	orrs	r1, r4
 800aa40:	1b42      	subs	r2, r0, r5
 800aa42:	e78a      	b.n	800a95a <__ieee754_sqrt+0x66>
 800aa44:	4610      	mov	r0, r2
 800aa46:	e7f0      	b.n	800aa2a <__ieee754_sqrt+0x136>
 800aa48:	0049      	lsls	r1, r1, #1
 800aa4a:	3201      	adds	r2, #1
 800aa4c:	e7ef      	b.n	800aa2e <__ieee754_sqrt+0x13a>
 800aa4e:	4680      	mov	r8, r0
 800aa50:	e7bd      	b.n	800a9ce <__ieee754_sqrt+0xda>
 800aa52:	bf00      	nop
 800aa54:	7ff00000 	.word	0x7ff00000

0800aa58 <with_errno>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	460d      	mov	r5, r1
 800aa5e:	4616      	mov	r6, r2
 800aa60:	f7fe fd08 	bl	8009474 <__errno>
 800aa64:	4629      	mov	r1, r5
 800aa66:	6006      	str	r6, [r0, #0]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}

0800aa6c <xflow>:
 800aa6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa6e:	4614      	mov	r4, r2
 800aa70:	461d      	mov	r5, r3
 800aa72:	b108      	cbz	r0, 800aa78 <xflow+0xc>
 800aa74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa78:	e9cd 2300 	strd	r2, r3, [sp]
 800aa7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa80:	4620      	mov	r0, r4
 800aa82:	4629      	mov	r1, r5
 800aa84:	f7f5 fdb8 	bl	80005f8 <__aeabi_dmul>
 800aa88:	2222      	movs	r2, #34	; 0x22
 800aa8a:	b003      	add	sp, #12
 800aa8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa90:	f7ff bfe2 	b.w	800aa58 <with_errno>

0800aa94 <__math_uflow>:
 800aa94:	b508      	push	{r3, lr}
 800aa96:	2200      	movs	r2, #0
 800aa98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aa9c:	f7ff ffe6 	bl	800aa6c <xflow>
 800aaa0:	ec41 0b10 	vmov	d0, r0, r1
 800aaa4:	bd08      	pop	{r3, pc}

0800aaa6 <__math_oflow>:
 800aaa6:	b508      	push	{r3, lr}
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800aaae:	f7ff ffdd 	bl	800aa6c <xflow>
 800aab2:	ec41 0b10 	vmov	d0, r0, r1
 800aab6:	bd08      	pop	{r3, pc}

0800aab8 <fabs>:
 800aab8:	ec51 0b10 	vmov	r0, r1, d0
 800aabc:	ee10 2a10 	vmov	r2, s0
 800aac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aac4:	ec43 2b10 	vmov	d0, r2, r3
 800aac8:	4770      	bx	lr

0800aaca <finite>:
 800aaca:	b082      	sub	sp, #8
 800aacc:	ed8d 0b00 	vstr	d0, [sp]
 800aad0:	9801      	ldr	r0, [sp, #4]
 800aad2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800aad6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800aada:	0fc0      	lsrs	r0, r0, #31
 800aadc:	b002      	add	sp, #8
 800aade:	4770      	bx	lr

0800aae0 <scalbn>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	ec55 4b10 	vmov	r4, r5, d0
 800aae6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aaea:	4606      	mov	r6, r0
 800aaec:	462b      	mov	r3, r5
 800aaee:	b99a      	cbnz	r2, 800ab18 <scalbn+0x38>
 800aaf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aaf4:	4323      	orrs	r3, r4
 800aaf6:	d036      	beq.n	800ab66 <scalbn+0x86>
 800aaf8:	4b39      	ldr	r3, [pc, #228]	; (800abe0 <scalbn+0x100>)
 800aafa:	4629      	mov	r1, r5
 800aafc:	ee10 0a10 	vmov	r0, s0
 800ab00:	2200      	movs	r2, #0
 800ab02:	f7f5 fd79 	bl	80005f8 <__aeabi_dmul>
 800ab06:	4b37      	ldr	r3, [pc, #220]	; (800abe4 <scalbn+0x104>)
 800ab08:	429e      	cmp	r6, r3
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	460d      	mov	r5, r1
 800ab0e:	da10      	bge.n	800ab32 <scalbn+0x52>
 800ab10:	a32b      	add	r3, pc, #172	; (adr r3, 800abc0 <scalbn+0xe0>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	e03a      	b.n	800ab8e <scalbn+0xae>
 800ab18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ab1c:	428a      	cmp	r2, r1
 800ab1e:	d10c      	bne.n	800ab3a <scalbn+0x5a>
 800ab20:	ee10 2a10 	vmov	r2, s0
 800ab24:	4620      	mov	r0, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	f7f5 fbb0 	bl	800028c <__adddf3>
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	460d      	mov	r5, r1
 800ab30:	e019      	b.n	800ab66 <scalbn+0x86>
 800ab32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab36:	460b      	mov	r3, r1
 800ab38:	3a36      	subs	r2, #54	; 0x36
 800ab3a:	4432      	add	r2, r6
 800ab3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ab40:	428a      	cmp	r2, r1
 800ab42:	dd08      	ble.n	800ab56 <scalbn+0x76>
 800ab44:	2d00      	cmp	r5, #0
 800ab46:	a120      	add	r1, pc, #128	; (adr r1, 800abc8 <scalbn+0xe8>)
 800ab48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab4c:	da1c      	bge.n	800ab88 <scalbn+0xa8>
 800ab4e:	a120      	add	r1, pc, #128	; (adr r1, 800abd0 <scalbn+0xf0>)
 800ab50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab54:	e018      	b.n	800ab88 <scalbn+0xa8>
 800ab56:	2a00      	cmp	r2, #0
 800ab58:	dd08      	ble.n	800ab6c <scalbn+0x8c>
 800ab5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab66:	ec45 4b10 	vmov	d0, r4, r5
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}
 800ab6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ab70:	da19      	bge.n	800aba6 <scalbn+0xc6>
 800ab72:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab76:	429e      	cmp	r6, r3
 800ab78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ab7c:	dd0a      	ble.n	800ab94 <scalbn+0xb4>
 800ab7e:	a112      	add	r1, pc, #72	; (adr r1, 800abc8 <scalbn+0xe8>)
 800ab80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e2      	bne.n	800ab4e <scalbn+0x6e>
 800ab88:	a30f      	add	r3, pc, #60	; (adr r3, 800abc8 <scalbn+0xe8>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	f7f5 fd33 	bl	80005f8 <__aeabi_dmul>
 800ab92:	e7cb      	b.n	800ab2c <scalbn+0x4c>
 800ab94:	a10a      	add	r1, pc, #40	; (adr r1, 800abc0 <scalbn+0xe0>)
 800ab96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0b8      	beq.n	800ab10 <scalbn+0x30>
 800ab9e:	a10e      	add	r1, pc, #56	; (adr r1, 800abd8 <scalbn+0xf8>)
 800aba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aba4:	e7b4      	b.n	800ab10 <scalbn+0x30>
 800aba6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800abaa:	3236      	adds	r2, #54	; 0x36
 800abac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800abb4:	4620      	mov	r0, r4
 800abb6:	4b0c      	ldr	r3, [pc, #48]	; (800abe8 <scalbn+0x108>)
 800abb8:	2200      	movs	r2, #0
 800abba:	e7e8      	b.n	800ab8e <scalbn+0xae>
 800abbc:	f3af 8000 	nop.w
 800abc0:	c2f8f359 	.word	0xc2f8f359
 800abc4:	01a56e1f 	.word	0x01a56e1f
 800abc8:	8800759c 	.word	0x8800759c
 800abcc:	7e37e43c 	.word	0x7e37e43c
 800abd0:	8800759c 	.word	0x8800759c
 800abd4:	fe37e43c 	.word	0xfe37e43c
 800abd8:	c2f8f359 	.word	0xc2f8f359
 800abdc:	81a56e1f 	.word	0x81a56e1f
 800abe0:	43500000 	.word	0x43500000
 800abe4:	ffff3cb0 	.word	0xffff3cb0
 800abe8:	3c900000 	.word	0x3c900000

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
